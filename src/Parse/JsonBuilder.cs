using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Docify.Parse
{
    class JsonBuilder
    {
        static bool _writingApi = true;
        public static void Write(
            Dictionary<string, ParsedType> namespaces,
            Dictionary<string, List<ParsedType>> publicTypes,
            string path)
        {
            _writingApi = true;
            bool asJavascript = path.EndsWith(".js", StringComparison.OrdinalIgnoreCase);
            StringBuilder content = new StringBuilder();

            if (asJavascript)
            {
                content.AppendLine($@"// auto-generated by {Program.Name}");
                content.AppendLine("var RhinoCommonApi = [");
            }
            else
            {
                content.AppendLine("[");
            }

            // write all namespaces first along with their docs
            // sort namespaces alphabetically
            List<string> namespaceNames = new List<string>(publicTypes.Keys);
            namespaceNames.Sort();
            bool objectWritten = false;
            foreach (var namespaceName in namespaceNames)
            {
                if (!namespaces.ContainsKey(namespaceName))
                    continue; // TODO: figure out these cases
                var nsDefinition = namespaces[namespaceName];
                string jsonType = WriteTypeAsObject(nsDefinition, null, asJavascript);
                if (string.IsNullOrEmpty(jsonType))
                    continue;
                if (objectWritten)
                    content.AppendLine(",");
                content.Append(jsonType);
                objectWritten = true;
            }
            if (objectWritten)
                content.AppendLine(",");

            List<ParsedType> sortedTypes = new List<ParsedType>();
            foreach (var kv in publicTypes)
            {
                sortedTypes.AddRange(kv.Value);
            }
            sortedTypes.Sort((a, b) => { return a.FullName.CompareTo(b.FullName); });
            var typesByNameDictionary = new Dictionary<string, ParsedType>();
            foreach (var type in sortedTypes)
            {
                string name = type.Name;
                if (!name.Equals("EventArgs"))
                    typesByNameDictionary[name] = type;
            }
            objectWritten = false;
            for (int i = 0; i < sortedTypes.Count; i++)
            {
                string jsonType = WriteTypeAsObject(sortedTypes[i], typesByNameDictionary, asJavascript);
                if (string.IsNullOrEmpty(jsonType))
                    continue;
                if (objectWritten)
                    content.AppendLine(",");
                content.Append(jsonType);
                objectWritten = true;
            }
            content.AppendLine();
            content.AppendLine("]");
            content.AppendLine();
            if (asJavascript)
                content.AppendLine("export { RhinoCommonApi }");

            System.IO.File.WriteAllText(path, content.ToString());
        }

        static string JsonQuote(string s, bool asJavascript, string key)
        {
            s = s.Replace("\r", "");

            if (s.Contains('\n'))
            {
                var lines = s.Split('\n');
                StringBuilder sb = new StringBuilder();
                sb.Append(asJavascript ? "`" : "\"");
                for (int i = 0; i < lines.Length; i++)
                {
                    if (i > 0)
                    {
                        if (asJavascript)
                            sb.AppendLine();
                        else
                        {
                            if (string.CompareOrdinal(key, "code") != 0)
                                sb.Append("  ");
                            sb.Append("\\n");
                        }
                    }
                    string line = lines[i];
                    // Morteza March 23, 2023 added check for <pre> to maintain  whitespace
                    if(_writingApi & !s.Contains("<pre>"))
                        line = line.Trim();
                    line = line.Replace("\\", "\\\\");
                    if (!asJavascript)
                    {
                        line = line.Replace("\"", "\\\"");
                    }
                    sb.Append(line);
                }
                sb.Append(asJavascript ? "`" : "\"");
                return sb.ToString();
            }

            if (asJavascript)
            {
                s = s.Replace("\\", "\\\\");
                s = s.Replace("'", "\\'");
                return "'" + s + "'";
            }
            else
            {
                s = s.Replace("\\", "\\\\");
                s = s.Replace("\"", "\\\"");
                return $"\"{s}\"";
            }
        }

        static string KeyValString(int indent, string key, string val, bool asJavascript)
        {
            string rc = "".PadLeft(indent);
            if (asJavascript)
                rc += key;
            else
                rc += $"\"{key}\"";
            rc += ": ";
            rc += JsonQuote(val, asJavascript, key);
            return rc;
        }

        static string KeyValBool(int indent, string key, bool val, bool asJavascript)
        {
            string rc = "".PadLeft(indent);
            if (asJavascript)
                rc += key;
            else
                rc += $"\"{key}\"";
            rc += ": ";
            rc += val.ToString().ToLower();
            return rc;
        }


        static string WriteTypeAsObject(ParsedType type, Dictionary<string, ParsedType> allPublicTypesByShortName, bool asJavascript)
        {
            if (!type.IsPublic || (type.DataType != ParsedDataType.Namespace && string.IsNullOrWhiteSpace(type.Namespace)))
                return null;
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("  {");
            if (type.DataType == ParsedDataType.Namespace)
            {
                sb.AppendLine(KeyValString(4, "name", type.FullName, asJavascript) + ",");
            }
            else
            {
                sb.AppendLine(KeyValString(4, "namespace", type.Namespace, asJavascript) + ",");
                sb.AppendLine(KeyValString(4, "name", type.Name, asJavascript) + ",");
            }
            sb.Append(KeyValString(4, "dataType", type.DataType.ToString().ToLower(), asJavascript));
            string summary = type.Summary();
            if (!string.IsNullOrWhiteSpace(summary))
            {
                sb.AppendLine(",");
                sb.Append(KeyValString(4, "summary", summary, asJavascript));
            }
            string remarks = type.Remarks();
            if (!string.IsNullOrWhiteSpace(remarks))
            {
                sb.AppendLine(",");
                sb.Append(KeyValString(4, "remarks", remarks, asJavascript));
            }

            if (type.DataType == ParsedDataType.Namespace)
            {
                sb.AppendLine();
            }
            else
            {
                string[] baseList = type.IsClass ? type.GetBaseList(allPublicTypesByShortName) : null;
                if (baseList != null && baseList.Length > 0)
                {
                    sb.AppendLine(",");
                    int firstInterfaceIndex = -1;
                    for (int i = 0; i < baseList.Length; i++)
                    {
                        // TODO: guessing based on .Net naming conventions. I'm sure
                        // this can be improved
                        if (baseList[i].StartsWith("I") && char.IsUpper(baseList[i][1]))
                        {
                            firstInterfaceIndex = i;
                            break;
                        }
                    }
                    if (firstInterfaceIndex != 0)
                    {
                        sb.Append(KeyValString(4, "baseclass", baseList[0], asJavascript));
                    }
                    if (firstInterfaceIndex > -1)
                    {
                        if (firstInterfaceIndex > 0)
                            sb.AppendLine(",");
                        if (asJavascript)
                            sb.Append("    interfaces: [");
                        else
                            sb.Append("    \"interfaces\": [");
                        for (int i = firstInterfaceIndex; i < baseList.Length; i++)
                        {
                            if (i > firstInterfaceIndex)
                                sb.Append(", ");
                            sb.Append(JsonQuote(baseList[i], asJavascript, null));
                        }
                        sb.Append("]");
                    }
                }

                if (type.HasSinceTag())
                {
                    sb.AppendLine(",");
                    sb.Append(KeyValString(4, "since", type.Since, asJavascript));
                }
                if (type.HasDeprecatedTag())
                {
                    sb.AppendLine(",");
                    sb.Append(KeyValString(4, "deprecated", type.Deprecated, asJavascript));
                }
                //Morteza: debugging only
                if (type.FullName == "Rhino.Geometry.SubDToBrepOptions"){
                    var inspecting = type;
                }
                string values = MembersAsJsonArray(type, ParsedMemberType.EnumValue, asJavascript);
                string constructors = MembersAsJsonArray(type, ParsedMemberType.Constructor, asJavascript);
                if (constructors==null){
                    //Try to add default constructor
                    constructors = DefaultConstructorAsJson(type, asJavascript);
                }
                string properties = MembersAsJsonArray(type, ParsedMemberType.Property, asJavascript);
                string methods = MembersAsJsonArray(type, ParsedMemberType.Method, asJavascript);
                string events = MembersAsJsonArray(type, ParsedMemberType.Event, asJavascript);
                string operators = MembersAsJsonArray(type, ParsedMemberType.Operator, asJavascript);
                string fields = MembersAsJsonArray(type, ParsedMemberType.Field, asJavascript);
                if (values != null || constructors != null || properties != null || methods != null || events != null || fields != null || operators != null)
                    sb.AppendLine(",");
                else
                    sb.AppendLine();

                if (!string.IsNullOrWhiteSpace(values))
                {
                    if (asJavascript)
                        sb.AppendLine($"    values: {values}");
                    else
                        sb.AppendLine($"    \"values\": {values}");

                    if (constructors != null || properties != null || methods != null || events != null || fields != null  || operators != null)
                        sb.AppendLine(",");
                    else
                        sb.AppendLine();
                }
                if (!string.IsNullOrWhiteSpace(constructors))
                {
                    if (asJavascript)
                        sb.Append($"    constructors: {constructors}");
                    else
                        sb.Append($"    \"constructors\": {constructors}");

                    if (properties != null || methods != null || events != null || fields != null  || operators != null)
                        sb.AppendLine(",");
                    else
                        sb.AppendLine();
                }
                if (!string.IsNullOrWhiteSpace(properties))
                {
                    if (asJavascript)
                        sb.Append($"    properties: {properties}");
                    else
                        sb.Append($"    \"properties\": {properties}");

                    if ( methods != null || events != null || fields != null  || operators != null)
                        sb.AppendLine(",");
                    else
                        sb.AppendLine();
                }
                if (!string.IsNullOrWhiteSpace(methods))
                {
                    if (asJavascript)
                        sb.Append($"    methods: {methods}");
                    else
                        sb.Append($"    \"methods\": {methods}");

                    if (events != null || fields != null  || operators != null)
                        sb.AppendLine(",");
                    else
                        sb.AppendLine();
                }
                if (!string.IsNullOrWhiteSpace(events))
                {
                    if (asJavascript)
                        sb.AppendLine($"    events: {events}");
                    else
                        sb.AppendLine($"    \"events\": {events}");

                    if (fields != null  || operators != null)
                        sb.AppendLine(",");
                    else
                        sb.AppendLine();
                }
                if (!string.IsNullOrWhiteSpace(fields))
                {
                    if (asJavascript)
                        sb.AppendLine($"    fields: {fields}");
                    else
                        sb.AppendLine($"    \"fields\": {fields}");

                    if (operators != null)
                        sb.AppendLine(",");
                    else
                        sb.AppendLine();
                }
                if (!string.IsNullOrWhiteSpace(operators))
                {
                    if (asJavascript)
                        sb.AppendLine($"    operators: {operators}");
                    else
                        sb.AppendLine($"    \"operators\": {operators}");
                }
            }
            sb.Append("  }");
            return sb.ToString();
        }

        static string DefaultConstructorAsJson(ParsedType type,  bool asJavascript = true)
        {
            if (!type.IsPublic)
                return null;
            if (!type.IsClass)
                return null;
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("[");
            sb.AppendLine("      {");
            sb.Append(KeyValString(8, "signature", type.Name+ "()", asJavascript));
            string summary = "Initializes a new instance of the "+ type.Name + " class";
            if (!string.IsNullOrWhiteSpace(summary))
            {
                sb.AppendLine(",");
                sb.Append(KeyValString(8, "summary", summary, asJavascript));
            }
            sb.AppendLine();
            sb.Append("      }");
            sb.AppendLine();
            sb.Append("    ]");
            return  sb.ToString();
        }

        static string MembersAsJsonArray(ParsedType type, ParsedMemberType filter, bool asJavascript = true)
        {
            if (type.Members == null)
                return null;
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("[");
            bool memberAdded = false;
            foreach (var member in type.Members)
            {
                if (filter == ParsedMemberType.Property && member.MemberType == ParsedMemberType.Indexer){
                    //Don't skip: Adding indexers as properies
                }
                else{
                    if (filter != member.MemberType)
                        continue;
                }

                string obsolete = member.IsObsolete();

                if (!string.IsNullOrWhiteSpace(obsolete))
                {
                    continue;
                }

                if (memberAdded)
                    sb.AppendLine(",");
                sb.AppendLine("      {");
                sb.Append(KeyValString(8, "signature", member.Signature(false), asJavascript));
                //sb.Append($"        signature: '{member.Signature(false)}'");
                sb.AppendLine(",");
                sb.Append(KeyValBool(8, "protected", member.IsProtected, asJavascript));

                string summary = member.Summary();
                if (!string.IsNullOrWhiteSpace(summary))
                {
                    sb.AppendLine(",");
                    sb.Append(KeyValString(8, "summary", summary, asJavascript));
                    //sb.Append($"        summary: {JsonQuote(summary)}");
                }
                string since = member.Since;
                if (!string.IsNullOrWhiteSpace(since) && double.TryParse(since, out double sinceValue))
                {
                    sb.AppendLine(",");
                    sb.Append(KeyValString(8, "since", since, asJavascript));
                    //sb.Append($"        since: '{since}'");
                }
                string deprecated = member.Deprecated;
                if (!string.IsNullOrWhiteSpace(deprecated) && double.TryParse(deprecated, out double deprecatedValue))
                {
                    sb.AppendLine(",");
                    sb.Append(KeyValString(8, "deprecated", deprecated, asJavascript));
                    //sb.Append($"        deprecated: '{deprecated}'");
                }

                // string obsolete = member.IsObsolete();

                // if (!string.IsNullOrWhiteSpace(obsolete))
                // {
                //     sb.AppendLine(",");
                //     sb.Append(KeyValString(8, "obsolete", obsolete, asJavascript));
                // }

                if (member.Signature(false).Contains("Plane EquitorialPlane")){
                    var inspecting = member;
                }


                string remarks = member.Remarks();
                if (!string.IsNullOrWhiteSpace(remarks))
                {
                    sb.AppendLine(",");
                    sb.Append(KeyValString(4, "remarks", remarks, asJavascript));
                }

                var parameters = member.GetParameters();
                if (parameters != null)
                {
                    // for now, just skip items that have ALL undocumented parameters
                    bool writeParameters = false;
                    for (int i = 0; i < parameters.Length; i++)
                    {
                        if (!string.IsNullOrWhiteSpace(parameters[i].DocString))
                        {
                            writeParameters = true;
                            break;
                        }
                    }

                    if (writeParameters)
                    {
                        sb.AppendLine(",");
                        if (asJavascript)
                            sb.AppendLine($"        parameters: [");
                        else
                            sb.AppendLine($"        \"parameters\": [");
                        for (int i = 0; i < parameters.Length; i++)
                        {
                            if (i > 0)
                                sb.AppendLine(",");
                            sb.AppendLine("          {");
                            sb.AppendLine(KeyValString(12, "name", parameters[i].Name, asJavascript) + ",");
                            //sb.AppendLine($"            name: {JsonQuote(parameters[i].Name)},");
                            // Not sure if we really need type as it is easy to resolve in javascript
                            sb.AppendLine(KeyValString(12, "type", member.FullTypeName(parameters[i].Type.ToString()), asJavascript) + ",");
                            sb.AppendLine(KeyValString(12, "summary", parameters[i].DocString, asJavascript));
                            //sb.AppendLine($"            summary: {JsonQuote(parameters[i].DocString)}");
                            sb.Append("          }");
                        }
                        sb.AppendLine();
                        sb.Append("        ]");
                    }
                }

                if (member.MemberType == ParsedMemberType.Method)
                {
                    string returns = member.ReturnDocString();
                    if (!string.IsNullOrWhiteSpace(returns))
                    {
                        sb.AppendLine(",");
                        sb.Append(KeyValString(8, "returns", returns, asJavascript));
                    }
                }

                if (member.MemberType == ParsedMemberType.Property)
                {
                    bool get, set;
                    if (member.PropertyType(out get, out set))
                    {
                        sb.AppendLine(",");
                        string s = get ? "['get'" : "[";
                        if (set)
                        {
                            if (get)
                                s += ", ";
                            s += "'set'";
                        }
                        s += "]";
                        if (!asJavascript)
                            s = s.Replace("'", "\"");
                        if (asJavascript)
                            sb.Append($"        property: {s}");
                        else
                            sb.Append($"        \"property\": {s}");
                    }
                }
                sb.AppendLine();
                sb.Append("      }");
                memberAdded = true;
            }
            sb.AppendLine();
            sb.Append("    ]");

            return memberAdded ? sb.ToString() : null;
        }

        public static void WriteExamples(
            Dictionary<string, List<ParsedType>> publicTypes,
            string examplesBaseDirectory,
            string outputJsonFile)
        {
            _writingApi = false;
            Dictionary<string, List<ParsedMember>> examples = new Dictionary<string, List<ParsedMember>>();
            foreach (var typelist in publicTypes.Values)
            {
                foreach (var type in typelist)
                {
                    if (null == type.Members)
                        continue;
                    foreach (var member in type.Members)
                    {
                        if (member.MemberType == ParsedMemberType.None)
                            continue;
                        string[] sampleRefs = member.GetSampleReferences();
                        if (sampleRefs != null)
                        {
                            for (int i = 0; i < sampleRefs.Length; i++)
                            {
                                if (sampleRefs[i] != null)
                                {
                                    string s = sampleRefs[i].ToLower();
                                    if (!examples.ContainsKey(s))
                                        examples[s] = new List<ParsedMember>();
                                    examples[s].Add(member);
                                }
                            }
                        }
                    }
                }
            }

            bool asJavascript = outputJsonFile.EndsWith(".js", StringComparison.OrdinalIgnoreCase);
            StringBuilder content = new StringBuilder();
            if (asJavascript)
            {
                content.AppendLine("var Examples = [");
            }
            else
            {
                content.AppendLine("[");
            }
            bool addComma = false;
            var keys = new List<string>(examples.Keys);
            // sort so we get a consistent order
            keys.Sort();
            for (int keyIndex = 0; keyIndex < keys.Count; keyIndex++)
            {
                string key = keys[keyIndex];
                var sample = examples[key];
                key = key.Replace('\\', '/');
                string path = System.IO.Path.Combine(examplesBaseDirectory, key);
                string name = System.IO.Path.GetFileName(path);
                if (name.StartsWith("ex_", StringComparison.OrdinalIgnoreCase))
                    name = name.Substring("ex_".Length);
                if (char.IsLower(name[0]))
                    name = char.ToUpper(name[0]) + name.Substring(1);
                string code = System.IO.File.ReadAllText(path);

                code = code.Replace("\\\"", "\"");
                if (addComma)
                    content.AppendLine(",");
                addComma = true;
                content.AppendLine("  {");
                content.AppendLine(KeyValString(4, "name", name, asJavascript) + ",");
                content.AppendLine(KeyValString(4, "code", code, asJavascript) + ",");
                if (asJavascript)
                    content.AppendLine("    members: [");
                else
                    content.AppendLine("    \"members\": [");
                for (int i = 0; i < sample.Count; i++)
                {
                    if (i > 0)
                        content.AppendLine(",");
                    if (asJavascript)
                        content.Append($"      ['{sample[i].ParentType.FullName}', '{sample[i].Signature(false)}']");
                    else
                        content.Append($"      [\"{sample[i].ParentType.FullName}\", \"{sample[i].Signature(false)}\"]");
                }
                content.AppendLine();
                content.AppendLine("    ]");
                content.Append("  }");
            }
            content.AppendLine();
            content.AppendLine("]");
            content.AppendLine();
            if (asJavascript)
                content.AppendLine("export { Examples }");
            System.IO.File.WriteAllText(outputJsonFile, content.ToString());
        }
    }
}
