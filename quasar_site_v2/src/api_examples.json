[
  {
    "name": "Activeviewport.cs",
    "code": "partial class Examples\n{\n  public static Rhino.Commands.Result ActiveViewport(Rhino.RhinoDoc doc)\n  {\n    Rhino.Display.RhinoView view = doc.Views.ActiveView;\n    if (view == null)\n      return Rhino.Commands.Result.Failure;\n\n    Rhino.Display.RhinoPageView pageview = view as Rhino.Display.RhinoPageView;\n    if (pageview != null)\n    {\n      string layout_name = pageview.PageName;\n      if (pageview.PageIsActive)\n      {\n        Rhino.RhinoApp.WriteLine(\"The layout {0} is active\", layout_name);\n      }\n      else\n      {\n        string detail_name = pageview.ActiveViewport.Name;\n        Rhino.RhinoApp.WriteLine(\"The detail {0} on layout {1} is active\", detail_name, layout_name);\n      }\n    }\n    else\n    {\n      string viewport_name = view.MainViewport.Name;\n      Rhino.RhinoApp.WriteLine(\"The viewport {0} is active\", viewport_name);\n    }\n    return Rhino.Commands.Result.Success;\n  }\n}\n",
    "members": [
      ["Rhino.Display.RhinoPageView", "bool PageIsActive"],
      ["Rhino.Display.RhinoPageView", "string PageName"]
    ]
  },
  {
    "name": "Addbackgroundbitmap.cs",
    "code": "using System;\n\npartial class Examples\n{\n  public static Rhino.Commands.Result AddBackgroundBitmap(Rhino.RhinoDoc doc)\n  {\n    // Allow the user to select a bitmap file\n    var fd = new Rhino.UI.OpenFileDialog { Filter = \"Image Files (*.bmp;*.png;*.jpg)|*.bmp;*.png;*.jpg\" };\n    if (!fd.ShowOpenDialog())\n      return Rhino.Commands.Result.Cancel;\n\n    // Verify the file that was selected\n    System.Drawing.Image image;\n    try\n    {\n      image = System.Drawing.Image.FromFile(fd.FileName);\n    }\n    catch (Exception)\n    {\n      return Rhino.Commands.Result.Failure;\n    }\n\n    // Allow the user to pick the bitmap origin\n    var gp = new Rhino.Input.Custom.GetPoint();\n    gp.SetCommandPrompt(\"Bitmap Origin\");\n    gp.ConstrainToConstructionPlane(true);\n    gp.Get();\n    if (gp.CommandResult() != Rhino.Commands.Result.Success)\n      return gp.CommandResult();\n\n    // Get the view that the point was picked in.\n    // This will be the view that the bitmap appears in.\n    var view = gp.View();\n    if (view == null)\n    {\n      view = doc.Views.ActiveView;\n      if (view == null)\n        return Rhino.Commands.Result.Failure;\n    }\n\n    // Allow the user to specify the bitmap width in model units\n    var gn = new Rhino.Input.Custom.GetNumber();\n    gn.SetCommandPrompt(\"Bitmap width\");\n    gn.SetLowerLimit(1.0, false);\n    gn.Get();\n    if (gn.CommandResult() != Rhino.Commands.Result.Success)\n      return gn.CommandResult();\n\n    // Cook up some scale factors\n    var w = gn.Number();\n    var image_width = image.Width;\n    var image_height = image.Height;\n    var h = w * (image_height / image_width);\n\n    var plane = view.ActiveViewport.ConstructionPlane();\n    plane.Origin = gp.Point();\n    view.ActiveViewport.SetTraceImage(fd.FileName, plane, w, h, false, false);\n    view.Redraw();\n    return Rhino.Commands.Result.Success;\n  }\n}\n",
    "members": [
      ["Rhino.Display.RhinoView", "RhinoViewport ActiveViewport"],
      ["Rhino.Display.RhinoView", "void Redraw()"],
      ["Rhino.Display.RhinoViewport", "Plane ConstructionPlane()"],
      ["Rhino.Display.RhinoViewport", "bool SetTraceImage(string bitmapFileName, Plane plane, double width, double height, bool grayscale, bool filtered)"],
      ["Rhino.UI.OpenFileDialog", "OpenFileDialog()"],
      ["Rhino.UI.OpenFileDialog", "string FileName"],
      ["Rhino.UI.OpenFileDialog", "string Filter"],
      ["Rhino.UI.OpenFileDialog", "bool ShowOpenDialog()"],
      ["Rhino.Input.Custom.GetBaseClass", "Result CommandResult()"],
      ["Rhino.Input.Custom.GetBaseClass", "double Number()"],
      ["Rhino.Input.Custom.GetBaseClass", "RhinoView View()"],
      ["Rhino.Input.Custom.GetPoint", "bool ConstrainToConstructionPlane(bool throughBasePoint)"],
      ["Rhino.Input.Custom.GetNumber", "GetNumber()"],
      ["Rhino.Input.Custom.GetNumber", "GetResult Get()"],
      ["Rhino.Input.Custom.GetNumber", "void SetLowerLimit(double lowerLimit, bool strictlyGreaterThan)"],
      ["Rhino.DocObjects.Tables.ViewTable", "RhinoView ActiveView"]
    ]
  },
  {
    "name": "Addbrepbox.cs",
    "code": "partial class Examples\n{\n  public static Rhino.Commands.Result AddBrepBox(Rhino.RhinoDoc doc)\n  {\n    Rhino.Geometry.Point3d pt0 = new Rhino.Geometry.Point3d(0, 0, 0);\n    Rhino.Geometry.Point3d pt1 = new Rhino.Geometry.Point3d(10, 10, 10);\n    Rhino.Geometry.BoundingBox box = new Rhino.Geometry.BoundingBox(pt0, pt1);\n    Rhino.Geometry.Brep brep = box.ToBrep();\n    Rhino.Commands.Result rc = Rhino.Commands.Result.Failure;\n    if( doc.Objects.AddBrep(brep) != System.Guid.Empty )\n    {\n      rc = Rhino.Commands.Result.Success;\n      doc.Views.Redraw();\n    }\n    return rc;\n  }\n}\n",
    "members": [
      ["Rhino.Geometry.BoundingBox", "BoundingBox(Point3d min, Point3d max)"],
      ["Rhino.Geometry.BoundingBox", "Brep ToBrep()"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddBrep(Brep brep)"]
    ]
  },
  {
    "name": "Addchildlayer.cs",
    "code": "partial class Examples\n{\n  public static Rhino.Commands.Result AddChildLayer(Rhino.RhinoDoc doc)\n  {\n    // Get an existing layer\n    string default_name = doc.Layers.CurrentLayer.Name;\n\n    // Prompt the user to enter a layer name\n    Rhino.Input.Custom.GetString gs = new Rhino.Input.Custom.GetString();\n    gs.SetCommandPrompt(\"Name of existing layer\");\n    gs.SetDefaultString(default_name);\n    gs.AcceptNothing(true);\n    gs.Get();\n    if (gs.CommandResult() != Rhino.Commands.Result.Success)\n      return gs.CommandResult();\n\n    // Was a layer named entered?\n    string layer_name = gs.StringResult().Trim();\n    int index = doc.Layers.Find(layer_name, true);\n    if (index<0)\n      return Rhino.Commands.Result.Cancel;\n\n    Rhino.DocObjects.Layer parent_layer = doc.Layers[index];\n\n    // Create a child layer\n    string child_name = parent_layer.Name + \"_child\";\n    Rhino.DocObjects.Layer childlayer = new Rhino.DocObjects.Layer();\n    childlayer.ParentLayerId = parent_layer.Id;\n    childlayer.Name = child_name;\n    childlayer.Color = System.Drawing.Color.Red;\n\n    index = doc.Layers.Add(childlayer);\n    if (index < 0)\n    {\n      Rhino.RhinoApp.WriteLine(\"Unable to add {0} layer.\", child_name);\n      return Rhino.Commands.Result.Failure;\n    }\n    return Rhino.Commands.Result.Success;\n  }\n}\n",
    "members": [
      ["Rhino.DocObjects.Layer", "Guid ParentLayerId"],
      ["Rhino.DocObjects.Tables.LayerTable", "int Add(Layer layer)"]
    ]
  },
  {
    "name": "Addcircle.cs",
    "code": "using System;\n\npartial class Examples\n{\n  public static Rhino.Commands.Result AddCircle(Rhino.RhinoDoc doc)\n  {\n    Rhino.Geometry.Point3d center = new Rhino.Geometry.Point3d(0, 0, 0);\n    const double radius = 10.0;\n    Rhino.Geometry.Circle c = new Rhino.Geometry.Circle(center, radius);\n    if (doc.Objects.AddCircle(c) != Guid.Empty)\n    {\n      doc.Views.Redraw();\n      return Rhino.Commands.Result.Success;\n    }\n    return Rhino.Commands.Result.Failure;\n  }\n}\n",
    "members": [
      ["Rhino.Geometry.Circle", "Circle(Plane plane, double radius)"],
      ["Rhino.Geometry.Point3d", "Point3d(double x, double y, double z)"],
      ["Rhino.DocObjects.Tables.ViewTable", "void Redraw()"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddCircle(Circle circle)"]
    ]
  },
  {
    "name": "Addclippingplane.cs",
    "code": "using System;\n\npartial class Examples\n{\n  public static Rhino.Commands.Result AddClippingPlane(Rhino.RhinoDoc doc)\n  {\n    // Define the corners of the clipping plane\n    Rhino.Geometry.Point3d[] corners;\n    Rhino.Commands.Result rc = Rhino.Input.RhinoGet.GetRectangle(out corners);\n    if (rc != Rhino.Commands.Result.Success)\n      return rc;\n\n    // Get the active view\n    Rhino.Display.RhinoView view = doc.Views.ActiveView;\n    if (view == null)\n      return Rhino.Commands.Result.Failure;\n\n    Rhino.Geometry.Point3d p0 = corners[0];\n    Rhino.Geometry.Point3d p1 = corners[1];\n    Rhino.Geometry.Point3d p3 = corners[3];\n\n    // Create a plane from the corner points\n    Rhino.Geometry.Plane plane = new Rhino.Geometry.Plane(p0, p1, p3);\n\n    // Add a clipping plane object to the document\n    Guid id = doc.Objects.AddClippingPlane(plane, p0.DistanceTo(p1), p0.DistanceTo(p3), view.ActiveViewportID);\n    if (id != Guid.Empty)\n    {\n      doc.Views.Redraw();\n      return Rhino.Commands.Result.Success;\n    }\n    return Rhino.Commands.Result.Failure;\n  }\n}\n",
    "members": [
      ["Rhino.Geometry.Plane", "Plane(Point3d origin, Point3d xPoint, Point3d yPoint)"],
      ["Rhino.FileIO.File3dmObjectTable", "Guid AddClippingPlane(Plane plane, double uMagnitude, double vMagnitude, Guid clippedViewportId)"],
      ["Rhino.Input.RhinoGet", "static Result GetRectangle(out Point3d[] corners)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddClippingPlane(Plane plane, double uMagnitude, double vMagnitude, Guid clippedViewportId)"]
    ]
  },
  {
    "name": "Addcylinder.cs",
    "code": "partial class Examples\n{\n  public static Rhino.Commands.Result AddCylinder(Rhino.RhinoDoc doc)\n  {\n    Rhino.Geometry.Point3d center_point = new Rhino.Geometry.Point3d(0, 0, 0);\n    Rhino.Geometry.Point3d height_point = new Rhino.Geometry.Point3d(0, 0, 10);\n    Rhino.Geometry.Vector3d zaxis = height_point - center_point;\n    Rhino.Geometry.Plane plane = new Rhino.Geometry.Plane(center_point, zaxis);\n    const double radius = 5;\n    Rhino.Geometry.Circle circle = new Rhino.Geometry.Circle(plane, radius);\n    Rhino.Geometry.Cylinder cylinder = new Rhino.Geometry.Cylinder(circle, zaxis.Length);\n    Rhino.Geometry.Brep brep = cylinder.ToBrep(true, true);\n    if (brep != null)\n    {\n      doc.Objects.AddBrep(brep);\n      doc.Views.Redraw();\n    }\n    return Rhino.Commands.Result.Success;\n  }\n}\n",
    "members": [
      ["Rhino.Geometry.Cylinder", "Cylinder(Circle baseCircle, double height)"],
      ["Rhino.Geometry.Cylinder", "Brep ToBrep(bool capBottom, bool capTop)"],
      ["Rhino.Geometry.Plane", "Plane(Point3d origin, Vector3d normal)"]
    ]
  },
  {
    "name": "Addlayer.cs",
    "code": "partial class Examples\n{\n  public static Rhino.Commands.Result AddLayer(Rhino.RhinoDoc doc)\n  {\n    // Cook up an unused layer name\n    string unused_name = doc.Layers.GetUnusedLayerName(false);\n\n    // Prompt the user to enter a layer name\n    Rhino.Input.Custom.GetString gs = new Rhino.Input.Custom.GetString();\n    gs.SetCommandPrompt(\"Name of layer to add\");\n    gs.SetDefaultString(unused_name);\n    gs.AcceptNothing(true);\n    gs.Get();\n    if (gs.CommandResult() != Rhino.Commands.Result.Success)\n      return gs.CommandResult();\n\n    // Was a layer named entered?\n    string layer_name = gs.StringResult().Trim();\n    if (string.IsNullOrEmpty(layer_name))\n    {\n      Rhino.RhinoApp.WriteLine(\"Layer name cannot be blank.\");\n      return Rhino.Commands.Result.Cancel;\n    }\n\n    // Is the layer name valid?\n    if (!Rhino.DocObjects.Layer.IsValidName(layer_name))\n    {\n      Rhino.RhinoApp.WriteLine(layer_name + \" is not a valid layer name.\");\n      return Rhino.Commands.Result.Cancel;\n    }\n\n    // Does a layer with the same name already exist?\n    int layer_index = doc.Layers.Find(layer_name, true);\n    if (layer_index >= 0)\n    {\n      Rhino.RhinoApp.WriteLine(\"A layer with the name {0} already exists.\", layer_name);\n      return Rhino.Commands.Result.Cancel;\n    }\n\n    // Add a new layer to the document\n    layer_index = doc.Layers.Add(layer_name, System.Drawing.Color.Black);\n    if (layer_index < 0)\n    {\n      Rhino.RhinoApp.WriteLine(\"Unable to add {0} layer.\", layer_name);\n      return Rhino.Commands.Result.Failure;\n    }\n    return Rhino.Commands.Result.Success;\n  }\n}\n",
    "members": [
      ["Rhino.RhinoApp", "static void WriteLine(string message)"],
      ["Rhino.RhinoApp", "static void WriteLine(string format, object arg0)"],
      ["Rhino.DocObjects.Layer", "static bool IsValidName(string name)"],
      ["Rhino.Input.Custom.GetBaseClass", "void AcceptNothing(bool enable)"],
      ["Rhino.Input.Custom.GetBaseClass", "void SetDefaultString(string defaultValue)"],
      ["Rhino.Input.Custom.GetBaseClass", "string StringResult()"],
      ["Rhino.Input.Custom.GetString", "GetString()"],
      ["Rhino.Input.Custom.GetString", "GetResult Get()"],
      ["Rhino.DocObjects.Tables.LayerTable", "int Add(string layerName, Color layerColor)"],
      ["Rhino.DocObjects.Tables.LayerTable", "int Find(string layerName, bool ignoreDeletedLayers)"],
      ["Rhino.DocObjects.Tables.LayerTable", "Layer FindName(string layerName)"],
      ["Rhino.DocObjects.Tables.LayerTable", "string GetUnusedLayerName()"],
      ["Rhino.DocObjects.Tables.LayerTable", "string GetUnusedLayerName(bool ignoreDeleted)"]
    ]
  },
  {
    "name": "Addlayout.cs",
    "code": "partial class Examples\n{\n  /// <summary>\n  /// Generate a layout with a single detail view that zooms to a list of objects\n  /// </summary>\n  /// <param name=\"doc\"></param>\n  /// <returns></returns>\n  public static Rhino.Commands.Result AddLayout(Rhino.RhinoDoc doc)\n  {\n    doc.PageUnitSystem = Rhino.UnitSystem.Millimeters;\n    var page_views = doc.Views.GetPageViews();\n    int page_number = (page_views==null) ? 1 : page_views.Length + 1;\n    var pageview = doc.Views.AddPageView(string.Format(\"A0_{0}\",page_number), 1189, 841);\n    if( pageview!=null )\n    {\n      Rhino.Geometry.Point2d top_left = new Rhino.Geometry.Point2d(20,821);\n      Rhino.Geometry.Point2d bottom_right = new Rhino.Geometry.Point2d(1169, 20);\n      var detail = pageview.AddDetailView(\"ModelView\", top_left, bottom_right, Rhino.Display.DefinedViewportProjection.Top);\n      if (detail != null)\n      {\n        pageview.SetActiveDetail(detail.Id);\n        detail.Viewport.ZoomExtents();\n        detail.DetailGeometry.IsProjectionLocked = true;\n        detail.DetailGeometry.SetScale(1, doc.ModelUnitSystem, 10, doc.PageUnitSystem);\n        // Commit changes tells the document to replace the document's detail object\n        // with the modified one that we just adjusted\n        detail.CommitChanges();\n      }\n      pageview.SetPageAsActive();\n      doc.Views.ActiveView = pageview;\n      doc.Views.Redraw();\n      return Rhino.Commands.Result.Success;\n    }\n    return Rhino.Commands.Result.Failure;\n  }\n}\n",
    "members": [
      ["Rhino.RhinoDoc", "UnitSystem PageUnitSystem"],
      ["Rhino.Geometry.DetailView", "bool IsProjectionLocked"],
      ["Rhino.Geometry.DetailView", "bool SetScale(double modelLength, UnitSystem modelUnits, double pageLength, UnitSystem pageUnits)"],
      ["Rhino.DocObjects.RhinoObject", "bool CommitChanges()"],
      ["Rhino.Display.RhinoPageView", "DetailViewObject AddDetailView(string title, Point2d corner0, Point2d corner1, DefinedViewportProjection initialProjection)"],
      ["Rhino.Display.RhinoPageView", "bool SetActiveDetail(Guid detailId)"],
      ["Rhino.Display.RhinoPageView", "void SetPageAsActive()"],
      ["Rhino.Display.RhinoViewport", "bool ZoomExtents()"],
      ["Rhino.DocObjects.Tables.ViewTable", "RhinoPageView AddPageView(string title, double pageWidth, double pageHeight)"],
      ["Rhino.DocObjects.Tables.ViewTable", "RhinoPageView[] GetPageViews()"]
    ]
  },
  {
    "name": "Addline.cs",
    "code": "using System;\n\npartial class Examples\n{\n  public static Rhino.Commands.Result AddLine(Rhino.RhinoDoc doc)\n  {\n    Rhino.Input.Custom.GetPoint gp = new Rhino.Input.Custom.GetPoint();\n    gp.SetCommandPrompt(\"Start of line\");\n    gp.Get();\n    if (gp.CommandResult() != Rhino.Commands.Result.Success)\n      return gp.CommandResult();\n\n    Rhino.Geometry.Point3d pt_start = gp.Point();\n\n    gp.SetCommandPrompt(\"End of line\");\n    gp.SetBasePoint(pt_start, false);\n    gp.DrawLineFromPoint(pt_start, true);\n    gp.Get();\n    if (gp.CommandResult() != Rhino.Commands.Result.Success)\n      return gp.CommandResult();\n\n    Rhino.Geometry.Point3d pt_end = gp.Point();\n    Rhino.Geometry.Vector3d v = pt_end - pt_start;\n    if (v.IsTiny(Rhino.RhinoMath.ZeroTolerance))\n      return Rhino.Commands.Result.Nothing;\n\n    if (doc.Objects.AddLine(pt_start, pt_end) != Guid.Empty)\n    {\n      doc.Views.Redraw();\n      return Rhino.Commands.Result.Success;\n    }\n    return Rhino.Commands.Result.Failure;\n  }\n}\n",
    "members": [
      ["Rhino.Geometry.Vector2d", "bool IsTiny(double tolerance)"],
      ["Rhino.Geometry.Vector3d", "bool IsTiny(double tolerance)"],
      ["Rhino.Input.Custom.GetBaseClass", "Point3d Point()"],
      ["Rhino.Input.Custom.GetBaseClass", "void SetCommandPrompt(string prompt)"],
      ["Rhino.Input.Custom.GetPoint", "GetPoint()"],
      ["Rhino.Input.Custom.GetPoint", "void DrawLineFromPoint(Point3d startPoint, bool showDistanceInStatusBar)"],
      ["Rhino.Input.Custom.GetPoint", "GetResult Get()"],
      ["Rhino.Input.Custom.GetPoint", "void SetBasePoint(Point3d basePoint, bool showDistanceInStatusBar)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddLine(Point3d from, Point3d to)"]
    ]
  },
  {
    "name": "Addlineardimension.cs",
    "code": "using System;\n\npartial class Examples\n{\n  public static Rhino.Commands.Result AddLinearDimension(Rhino.RhinoDoc doc)\n  {\n    Rhino.Geometry.LinearDimension dimension;\n    Rhino.Commands.Result rc = Rhino.Input.RhinoGet.GetLinearDimension(out dimension);\n    if (rc == Rhino.Commands.Result.Success && dimension != null)\n    {\n      if (doc.Objects.AddLinearDimension(dimension) == Guid.Empty)\n        rc = Rhino.Commands.Result.Failure;\n      else\n        doc.Views.Redraw();\n    }\n    return rc;\n  }\n}\n",
    "members": [
      ["Rhino.Input.RhinoGet", "static Result GetLinearDimension(out LinearDimension dimension)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddLinearDimension(LinearDimension dimension)"]
    ]
  },
  {
    "name": "Addlineardimension2.cs",
    "code": "using System;\nusing Rhino.Geometry;\n\npartial class Examples\n{\n  public static Rhino.Commands.Result AddLinearDimension2(Rhino.RhinoDoc doc)\n  {\n    Point3d origin = new Point3d(1,1,0);\n    Point3d offset = new Point3d(11,1,0);\n    Point3d pt = new Point3d((offset.X-origin.X)/2,3,0);\n\n    Plane plane = Plane.WorldXY;\n    plane.Origin = origin;\n\n    double u,v;\n    plane.ClosestParameter(origin, out u, out v);\n    Point2d ext1 = new Point2d(u, v);\n\n    plane.ClosestParameter(offset, out u, out v);\n    Point2d ext2 = new Point2d(u, v);\n\n    plane.ClosestParameter(pt, out u, out v);\n    Point2d linePt = new Point2d(u, v);\n\n    LinearDimension dimension = new LinearDimension(plane, ext1, ext2, linePt);\n    if (doc.Objects.AddLinearDimension(dimension) != Guid.Empty)\n    {\n      doc.Views.Redraw();\n      return Rhino.Commands.Result.Success;\n    }\n    return Rhino.Commands.Result.Failure;\n  }\n}\n",
    "members": [
      ["Rhino.Geometry.LinearDimension", "LinearDimension(Plane dimensionPlane, Point2d extensionLine1End, Point2d extensionLine2End, Point2d pointOnDimensionLine)"],
      ["Rhino.Geometry.Plane", "bool ClosestParameter(Point3d testPoint, out double s, out double t)"]
    ]
  },
  {
    "name": "Addmesh.cs",
    "code": "using System;\n\npartial class Examples\n{\n  public static Rhino.Commands.Result AddMesh(Rhino.RhinoDoc doc)\n  {\n    Rhino.Geometry.Mesh mesh = new Rhino.Geometry.Mesh();\n    mesh.Vertices.Add(0.0, 0.0, 1.0); //0\n    mesh.Vertices.Add(1.0, 0.0, 1.0); //1\n    mesh.Vertices.Add(2.0, 0.0, 1.0); //2\n    mesh.Vertices.Add(3.0, 0.0, 0.0); //3\n    mesh.Vertices.Add(0.0, 1.0, 1.0); //4\n    mesh.Vertices.Add(1.0, 1.0, 2.0); //5\n    mesh.Vertices.Add(2.0, 1.0, 1.0); //6\n    mesh.Vertices.Add(3.0, 1.0, 0.0); //7\n    mesh.Vertices.Add(0.0, 2.0, 1.0); //8\n    mesh.Vertices.Add(1.0, 2.0, 1.0); //9\n    mesh.Vertices.Add(2.0, 2.0, 1.0); //10\n    mesh.Vertices.Add(3.0, 2.0, 1.0); //11\n\n    mesh.Faces.AddFace(0, 1, 5, 4);\n    mesh.Faces.AddFace(1, 2, 6, 5);\n    mesh.Faces.AddFace(2, 3, 7, 6);\n    mesh.Faces.AddFace(4, 5, 9, 8);\n    mesh.Faces.AddFace(5, 6, 10, 9);\n    mesh.Faces.AddFace(6, 7, 11, 10);\n    mesh.Normals.ComputeNormals();\n    mesh.Compact();\n    if (doc.Objects.AddMesh(mesh) != Guid.Empty)\n    {\n      doc.Views.Redraw();\n      return Rhino.Commands.Result.Success;\n    }\n    return Rhino.Commands.Result.Failure;\n  }\n}",
    "members": [
      ["Rhino.Geometry.Mesh", "Mesh()"],
      ["Rhino.Geometry.Mesh", "MeshFaceList Faces"],
      ["Rhino.Geometry.Mesh", "MeshVertexNormalList Normals"],
      ["Rhino.Geometry.Mesh", "MeshVertexList Vertices"],
      ["Rhino.Geometry.Mesh", "bool Compact()"],
      ["Rhino.Geometry.Collections.MeshVertexList", "int Add(double x, double y, double z)"],
      ["Rhino.Geometry.Collections.MeshVertexList", "int Add(float x, float y, float z)"],
      ["Rhino.Geometry.Collections.MeshVertexNormalList", "bool ComputeNormals()"],
      ["Rhino.Geometry.Collections.MeshFaceList", "int AddFace(int vertex1, int vertex2, int vertex3, int vertex4)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddMesh(Mesh mesh)"]
    ]
  },
  {
    "name": "Addnamedview.cs",
    "code": "partial class Examples\n{\n  public static Rhino.Commands.Result AddNamedView(Rhino.RhinoDoc doc)\n  {\n    Rhino.Display.RhinoView view;\n    Rhino.Commands.Result rc = Rhino.Input.RhinoGet.GetView(\"Select view to adjust\", out view);\n    if (rc != Rhino.Commands.Result.Success)\n      return rc;\n\n    Rhino.Geometry.Point3d location;\n    rc = Rhino.Input.RhinoGet.GetPoint(\"Camera Location\", false, out location);\n    if (rc != Rhino.Commands.Result.Success)\n      return rc;\n\n    Rhino.Input.Custom.GetPoint gp = new Rhino.Input.Custom.GetPoint();\n    gp.SetCommandPrompt(\"Look At Location\");\n    gp.DrawLineFromPoint(location, false);\n    gp.Get();\n    if (gp.CommandResult() != Rhino.Commands.Result.Success)\n      return gp.CommandResult();\n    Rhino.Geometry.Point3d lookat = gp.Point();\n    \n    string name = view.ActiveViewport.Name;\n    rc = Rhino.Input.RhinoGet.GetString(\"Name\", true, ref name);\n    if (rc != Rhino.Commands.Result.Success)\n      return rc;\n\n    Rhino.Display.RhinoViewport vp = view.ActiveViewport;\n    // save the current viewport projection\n    vp.PushViewProjection();\n    vp.CameraUp = Rhino.Geometry.Vector3d.ZAxis;\n    vp.SetCameraLocation(location, false);\n    vp.SetCameraDirection(lookat - location, true);\n    vp.Name = name;\n\n    doc.NamedViews.Add(name, vp.Id);\n    view.Redraw();\n    return Rhino.Commands.Result.Success;\n  }\n}",
    "members": [
      ["Rhino.RhinoDoc", "NamedViewTable NamedViews"],
      ["Rhino.Display.RhinoViewport", "Vector3d CameraUp"],
      ["Rhino.Display.RhinoViewport", "string Name"],
      ["Rhino.Display.RhinoViewport", "bool PopViewProjection()"],
      ["Rhino.Display.RhinoViewport", "void PushViewProjection()"],
      ["Rhino.Display.RhinoViewport", "void SetCameraDirection(Vector3d cameraDirection, bool updateTargetLocation)"],
      ["Rhino.Display.RhinoViewport", "void SetCameraLocation(Point3d cameraLocation, bool updateTargetLocation)"],
      ["Rhino.Input.RhinoGet", "static Result GetPoint(string prompt, bool acceptNothing, out Point3d point)"],
      ["Rhino.Input.RhinoGet", "static Result GetString(string prompt, bool acceptNothing, ref string outputString)"],
      ["Rhino.Input.RhinoGet", "static Result GetView(string commandPrompt, out RhinoView view)"],
      ["Rhino.DocObjects.Tables.NamedViewTable", "int Add(string name, Guid viewportId)"]
    ]
  },
  {
    "name": "Addnurbscircle.cs",
    "code": "using System;\n\npartial class Examples\n{\n  public static Rhino.Commands.Result AddNurbsCircle(Rhino.RhinoDoc doc)\n  {\n    // The easy way to get a NURBS curve from a circle is with\n    // the following two lines of code.\n    //\n    // Rhino.Geometry.Circle c = new Rhino.Geometry.Circle(20);\n    // Rhino.Geometry.NurbsCurve nc = c.ToNurbsCurve();\n    //\n    // This sample demonstrates creating a NURBS curve from scratch.\n    const int dimension = 3;\n    const bool isRational = true;\n    const int order = 3;\n    const int cv_count = 9;\n    Rhino.Geometry.NurbsCurve nc = new Rhino.Geometry.NurbsCurve(dimension, isRational, order, cv_count);\n    nc.Points.SetPoint(0, 1.0, 0.0, 0.0, 1.0);\n    nc.Points.SetPoint(1, 0.707107, 0.707107, 0.0, 0.707107);\n    nc.Points.SetPoint(2, 0.0, 1.0, 0.0, 1.0);\n    nc.Points.SetPoint(3, -0.707107, 0.707107, 0.0, 0.707107);\n    nc.Points.SetPoint(4, -1.0, 0.0, 0.0, 1.0);\n    nc.Points.SetPoint(5, -0.707107, -0.707107, 0.0, 0.707107);\n    nc.Points.SetPoint(6, 0.0, -1.0, 0.0, 1.0);\n    nc.Points.SetPoint(7, 0.707107, -0.707107, 0.0, 0.707107);\n    nc.Points.SetPoint(8, 1.0, 0.0, 0.0, 1.0);\n    nc.Knots[0] = 0.0;\n    nc.Knots[1] = 0.0;\n    nc.Knots[2] = 0.5 * Math.PI;\n    nc.Knots[3] = 0.5 * Math.PI;\n    nc.Knots[4] = Math.PI;\n    nc.Knots[5] = Math.PI;\n    nc.Knots[6] = 1.5 * Math.PI;\n    nc.Knots[7] = 1.5 * Math.PI;\n    nc.Knots[8] = 2.0 * Math.PI;\n    nc.Knots[9] = 2.0 * Math.PI;\n    if (nc.IsValid)\n    {\n      doc.Objects.AddCurve(nc);\n      doc.Views.Redraw();\n      return Rhino.Commands.Result.Success;\n    }\n    return Rhino.Commands.Result.Failure;\n  }\n}\n",
    "members": [
      ["Rhino.Geometry.NurbsCurve", "NurbsCurve(int dimension, bool rational, int order, int pointCount)"],
      ["Rhino.Geometry.NurbsCurve", "NurbsCurveKnotList Knots"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddCurve(Curve curve)"]
    ]
  },
  {
    "name": "Addnurbscurve.cs",
    "code": "using System;\n\npartial class Examples\n{\n  public static Rhino.Commands.Result AddNurbsCurve(Rhino.RhinoDoc doc)\n  {\n    Rhino.Collections.Point3dList points = new Rhino.Collections.Point3dList(5);\n    points.Add(0, 0, 0);\n    points.Add(0, 2, 0);\n    points.Add(2, 3, 0);\n    points.Add(4, 2, 0);\n    points.Add(4, 0, 0);\n    Rhino.Geometry.NurbsCurve nc = Rhino.Geometry.NurbsCurve.Create(false, 3, points);\n    Rhino.Commands.Result rc = Rhino.Commands.Result.Failure;\n    if (nc != null && nc.IsValid)\n    {\n      if (doc.Objects.AddCurve(nc) != Guid.Empty)\n      {\n        doc.Views.Redraw();\n        rc = Rhino.Commands.Result.Success;\n      }\n    }\n    return rc;\n  }\n}\n",
    "members": [
      ["Rhino.Geometry.NurbsCurve", "static NurbsCurve Create(bool periodic, int degree, IEnumerable<Point3d> points)"],
      ["Rhino.Collections.Point3dList", "Point3dList(int initialCapacity)"],
      ["Rhino.Collections.Point3dList", "void Add(double x, double y, double z)"]
    ]
  },
  {
    "name": "Addobjectstogroup.cs",
    "code": "using System;\nusing System.Collections.Generic;\n\npartial class Examples\n{\n  public static Rhino.Commands.Result AddObjectsToGroup(Rhino.RhinoDoc doc)\n  {\n    Rhino.Input.Custom.GetObject go = new Rhino.Input.Custom.GetObject();\n    go.SetCommandPrompt(\"Select objects to group\");\n    go.GroupSelect = true;\n    go.GetMultiple(1, 0);\n    if (go.CommandResult() != Rhino.Commands.Result.Success)\n      return go.CommandResult();\n\n    List<Guid> ids = new List<Guid>();\n    for (int i = 0; i < go.ObjectCount; i++)\n    {\n      ids.Add(go.Object(i).ObjectId);\n    }\n    int index = doc.Groups.Add(ids);\n    doc.Views.Redraw();\n    if (index >= 0)\n      return Rhino.Commands.Result.Success;\n    return Rhino.Commands.Result.Failure;\n  }\n}\n",
    "members": [
      ["Rhino.RhinoDoc", "GroupTable Groups"],
      ["Rhino.Input.Custom.GetObject", "GetObject()"],
      ["Rhino.Input.Custom.GetObject", "GetResult GetMultiple(int minimumNumber, int maximumNumber)"],
      ["Rhino.DocObjects.Tables.GroupTable", "int Add(IEnumerable<Guid> objectIds)"]
    ]
  },
  {
    "name": "Addradialdimension.cs",
    "code": "using Rhino;\nusing Rhino.DocObjects;\nusing Rhino.Commands;\nusing Rhino.Geometry;\nusing Rhino.Input;\n\nnamespace examples_cs\n{\n  public class AddRadialDimensionCommand : Rhino.Commands.Command\n  {\n    public override string EnglishName\n    {\n      get { return \"csAddRadialDimension\"; }\n    }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      ObjRef obj_ref;\n      var rc = RhinoGet.GetOneObject(\"Select curve for radius dimension\", \n        true, ObjectType.Curve, out obj_ref);\n      if (rc != Result.Success)\n        return rc;\n      double curve_parameter;\n      var curve = obj_ref.CurveParameter(out curve_parameter);\n      if (curve == null)\n        return Result.Failure;\n\n      if (curve.IsLinear() || curve.IsPolyline())\n      {\n        RhinoApp.WriteLine(\"Curve must be non-linear.\");\n        return Result.Nothing;\n      }\n\n      // in this example just deal with planar curves\n      if (!curve.IsPlanar())\n      {\n        RhinoApp.WriteLine(\"Curve must be planar.\");\n        return Result.Nothing;\n      }\n\n      var point_on_curve = curve.PointAt(curve_parameter);\n      var curvature_vector = curve.CurvatureAt(curve_parameter);\n      var len = curvature_vector.Length;\n      if (len < RhinoMath.SqrtEpsilon)\n      {\n        RhinoApp.WriteLine(\"Curve is almost linear and therefore has no curvature.\");\n        return Result.Nothing;\n      }\n\n      var center = point_on_curve + (curvature_vector/(len*len));\n      Plane plane;\n      curve.TryGetPlane(out plane);\n      var radial_dimension = \n        new RadialDimension(center, point_on_curve, plane.XAxis, plane.Normal, 5.0);\n      doc.Objects.AddRadialDimension(radial_dimension);\n      doc.Views.Redraw();\n      return Result.Success;\n    }\n  }\n}",
    "members": [
      ["Rhino.Geometry.Curve", "Vector3d CurvatureAt(double t)"],
      ["Rhino.Geometry.Curve", "bool IsLinear()"],
      ["Rhino.Geometry.Curve", "bool IsPlanar()"],
      ["Rhino.Geometry.Curve", "bool IsPolyline()"],
      ["Rhino.Geometry.Curve", "Point3d PointAt(double t)"],
      ["Rhino.DocObjects.ObjRef", "Curve CurveParameter(out double parameter)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddRadialDimension(RadialDimension dimension)"]
    ]
  },
  {
    "name": "Addsphere.cs",
    "code": "using System;\n\npartial class Examples\n{\n  public static Rhino.Commands.Result AddSphere(Rhino.RhinoDoc doc)\n  {\n    Rhino.Geometry.Point3d center = new Rhino.Geometry.Point3d(0, 0, 0);\n    const double radius = 5.0;\n    Rhino.Geometry.Sphere sphere = new Rhino.Geometry.Sphere(center, radius);\n    if( doc.Objects.AddSphere(sphere) != Guid.Empty )\n    {\n      doc.Views.Redraw();\n      return Rhino.Commands.Result.Success;\n    }\n    return Rhino.Commands.Result.Failure;\n  }\n}\n",
    "members": [
      ["Rhino.Geometry.Sphere", "Sphere(Point3d center, double radius)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddSphere(Sphere sphere)"]
    ]
  },
  {
    "name": "Addtext.cs",
    "code": "using System;\n\npartial class Examples\n{\n  public static Rhino.Commands.Result AddAnnotationText(Rhino.RhinoDoc doc)\n  {\n    Rhino.Geometry.Point3d pt = new Rhino.Geometry.Point3d(10, 0, 0);\n    const string text = \"Hello RhinoCommon\";\n    const double height = 2.0;\n    const string font = \"Arial\";\n    Rhino.Geometry.Plane plane = doc.Views.ActiveView.ActiveViewport.ConstructionPlane();\n    plane.Origin = pt;\n    Guid id = doc.Objects.AddText(text, plane, height, font, false, false);\n    if( id != Guid.Empty )\n    {\n      doc.Views.Redraw();\n      return Rhino.Commands.Result.Success;\n    }\n    return Rhino.Commands.Result.Failure;\n  }\n}\n",
    "members": [
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddText(string text, Plane plane, double height, string fontName, bool bold, bool italic)"]
    ]
  },
  {
    "name": "Addtorus.cs",
    "code": "using System;\n\npartial class Examples\n{\n  public static Rhino.Commands.Result AddTorus(Rhino.RhinoDoc doc)\n  {\n    const double major_radius = 4.0;\n    const double minor_radius = 2.0;\n\n    Rhino.Geometry.Plane plane = Rhino.Geometry.Plane.WorldXY;\n    Rhino.Geometry.Torus torus = new Rhino.Geometry.Torus(plane, major_radius, minor_radius);\n    Rhino.Geometry.RevSurface revsrf = torus.ToRevSurface();\n    if (doc.Objects.AddSurface(revsrf) != Guid.Empty)\n    {\n      doc.Views.Redraw();\n      return Rhino.Commands.Result.Success;\n    }\n    return Rhino.Commands.Result.Failure;\n  }\n}\n",
    "members": [
      ["Rhino.Geometry.Torus", "Torus(Plane basePlane, double majorRadius, double minorRadius)"],
      ["Rhino.Geometry.Torus", "RevSurface ToRevSurface()"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddSurface(Surface surface)"]
    ]
  },
  {
    "name": "Addtruncatedcone.cs",
    "code": "using System;\nusing Rhino.Geometry;\n\npartial class Examples\n{\n  public static Rhino.Commands.Result AddTruncatedCone(Rhino.RhinoDoc doc)\n  {\n    Point3d bottom_pt = new Point3d(0,0,0);\n    const double bottom_radius = 2;\n    Circle bottom_circle = new Circle(bottom_pt, bottom_radius);\n\n    Point3d top_pt = new Point3d(0,0,10);\n    const double top_radius = 6;\n    Circle top_circle = new Circle(top_pt, top_radius);\n\n    LineCurve shapeCurve = new LineCurve(bottom_circle.PointAt(0), top_circle.PointAt(0));\n    Line axis = new Line(bottom_circle.Center, top_circle.Center);\n    RevSurface revsrf = RevSurface.Create(shapeCurve, axis);\n    Brep tcone_brep = Brep.CreateFromRevSurface(revsrf, true, true);\n    if( doc.Objects.AddBrep(tcone_brep) != Guid.Empty )\n    {\n      doc.Views.Redraw();\n      return Rhino.Commands.Result.Success;\n    }\n    return Rhino.Commands.Result.Failure;\n  }\n}\n",
    "members": [
      ["Rhino.Geometry.Brep", "static Brep CreateFromRevSurface(RevSurface surface, bool capStart, bool capEnd)"],
      ["Rhino.Geometry.Circle", "Circle(Point3d center, double radius)"],
      ["Rhino.Geometry.LineCurve", "LineCurve(Point3d from, Point3d to)"],
      ["Rhino.Geometry.RevSurface", "static RevSurface Create(Curve revoluteCurve, Line axisOfRevolution)"]
    ]
  },
  {
    "name": "Advanceddisplay.cs",
    "code": "using System.Collections.Generic;\nusing Rhino.Display;\n\npartial class Examples\n{\n  // The following example code demonstrates how to modify advanced display settings using\n  // the Rhino SDK. In this example, a display mode's mesh wireframe thickness (in pixels)\n  // will be modified.\n  public static Rhino.Commands.Result AdvancedDisplay(Rhino.RhinoDoc doc)\n  {\n    // Use the display attributes manager to build a list of display modes.\n    // Note, these are copies of the originals...\n    DisplayModeDescription[] display_modes = DisplayModeDescription.GetDisplayModes();\n    if( display_modes==null || display_modes.Length<1 )\n      return Rhino.Commands.Result.Failure;\n\n    // Construct an options picker so the user can pick which\n    // display mode they want modified\n    Rhino.Input.Custom.GetOption go = new Rhino.Input.Custom.GetOption();\n    go.SetCommandPrompt(\"Display mode to modify mesh thickness\");\n    List<int> opt_list = new List<int>();\n\n    for( int i=0; i<display_modes.Length; i++ )\n    {\n      string english_name = display_modes[i].EnglishName;\n      english_name = english_name.Replace(\"_\", \"\");\n      english_name = english_name.Replace(\" \", \"\");\n      english_name = english_name.Replace(\"-\", \"\");\n      english_name = english_name.Replace(\",\", \"\");\n      english_name = english_name.Replace(\".\", \"\");\n      int index = go.AddOption(english_name);\n      opt_list.Add(index);\n    }\n    \n    // Get the command option\n    go.Get();\n    if( go.CommandResult() != Rhino.Commands.Result.Success )\n      return go.CommandResult();\n\n    int selected_index = go.Option().Index;\n    DisplayModeDescription selected_description = null;\n    for( int i=0; i<opt_list.Count; i++ )\n    {\n      if( opt_list[i]==selected_index )\n      {\n        selected_description = display_modes[i];\n        break;\n      }\n    }\n \n    // Validate...\n    if( selected_description==null )\n      return Rhino.Commands.Result.Failure;\n\n    // Modify the desired display mode. In this case, we\n    // will just set the mesh wireframe thickness to zero.\n    selected_description.DisplayAttributes.MeshSpecificAttributes.MeshWireThickness = 0;\n    // Use the display attributes manager to update the display mode.\n    DisplayModeDescription.UpdateDisplayMode(selected_description);\n\n    // Force the document to regenerate.\n    doc.Views.Redraw();\n    return Rhino.Commands.Result.Success;\n  }\n}\n",
    "members": [
      ["Rhino.Display.DisplayModeDescription", "DisplayPipelineAttributes DisplayAttributes"],
      ["Rhino.Display.DisplayModeDescription", "static DisplayModeDescription[] GetDisplayModes()"],
      ["Rhino.Display.DisplayModeDescription", "static bool UpdateDisplayMode(DisplayModeDescription displayMode)"],
      ["Rhino.Input.Custom.GetBaseClass", "int AddOption(string englishOption)"]
    ]
  },
  {
    "name": "Analysismode.cs",
    "code": "using System;\nusing Rhino;\nusing Rhino.DocObjects;\nusing Rhino.Geometry;\n\n\n[System.Runtime.InteropServices.Guid(\"62dd8eec-5cce-42c7-9d80-8b01fc169b81\")]\npublic class AnalysisModeOnCommand : Rhino.Commands.Command\n{\n  public override string EnglishName { get { return \"cs_analysismode_on\"; } }\n\n  protected override Rhino.Commands.Result RunCommand(RhinoDoc doc, Rhino.Commands.RunMode mode)\n  {\n    // make sure our custom visual analysis mode is registered\n    var zmode = Rhino.Display.VisualAnalysisMode.Register(typeof(ZAnalysisMode));\n\n    const ObjectType filter = Rhino.DocObjects.ObjectType.Surface | Rhino.DocObjects.ObjectType.PolysrfFilter | Rhino.DocObjects.ObjectType.Mesh;\n    Rhino.DocObjects.ObjRef[] objs;\n    var rc = Rhino.Input.RhinoGet.GetMultipleObjects(\"Select objects for Z analysis\", false, filter, out objs);\n    if (rc != Rhino.Commands.Result.Success)\n      return rc;\n\n    int count = 0;\n    for (int i = 0; i < objs.Length; i++)\n    {\n      var obj = objs[i].Object();\n\n      // see if this object is alreay in Z analysis mode\n      if (obj.InVisualAnalysisMode(zmode))\n        continue;\n\n      if (obj.EnableVisualAnalysisMode(zmode, true))\n        count++;\n    }\n    doc.Views.Redraw();\n    RhinoApp.WriteLine(\"{0} objects were put into Z-Analysis mode.\", count);\n    return Rhino.Commands.Result.Success;\n  }\n}\n\n[System.Runtime.InteropServices.Guid(\"0A8CE87D-A8CB-4A41-9DE2-5B3957436AEE\")]\npublic class AnalysisModeOffCommand : Rhino.Commands.Command\n{\n  public override string EnglishName { get { return \"cs_analysismode_off\"; } }\n\n  protected override Rhino.Commands.Result RunCommand(RhinoDoc doc, Rhino.Commands.RunMode mode)\n  {\n    var zmode = Rhino.Display.VisualAnalysisMode.Find(typeof(ZAnalysisMode));\n    // If zmode is null, we've never registered the mode so we know it hasn't been used\n    if (zmode != null)\n    {\n      foreach (Rhino.DocObjects.RhinoObject obj in doc.Objects)\n      {\n        obj.EnableVisualAnalysisMode(zmode, false);\n      }\n      doc.Views.Redraw();\n    }\n    RhinoApp.WriteLine(\"Z-Analysis is off.\");\n    return Rhino.Commands.Result.Success;\n  }\n}\n\n\n/// <summary>\n/// This simple example provides a false color based on the world z-coordinate.\n/// For details, see the implementation of the FalseColor() function.\n/// </summary>\npublic class ZAnalysisMode : Rhino.Display.VisualAnalysisMode\n{\n  Interval m_z_range = new Interval(-10,10);\n  Interval m_hue_range = new Interval(0,4*Math.PI / 3);\n  private const bool m_show_isocurves = true;\n\n  public override string Name { get { return \"Z-Analysis\"; } }\n  public override Rhino.Display.VisualAnalysisMode.AnalysisStyle Style { get { return AnalysisStyle.FalseColor; } }\n\n  public override bool ObjectSupportsAnalysisMode(Rhino.DocObjects.RhinoObject obj)\n  {\n    if (obj is Rhino.DocObjects.MeshObject || obj is Rhino.DocObjects.BrepObject)\n      return true;\n    return false;\n  }\n\n  protected override void UpdateVertexColors(Rhino.DocObjects.RhinoObject obj, Mesh[] meshes)\n  {\n    // A \"mapping tag\" is used to determine if the colors need to be set\n    Rhino.Render.MappingTag mt = GetMappingTag(obj.RuntimeSerialNumber);\n\n    for (int mi = 0; mi < meshes.Length; mi++)\n    {\n      var mesh = meshes[mi];\n      if( mesh.VertexColors.Tag.Id != this.Id )\n      {\n        // The mesh's mapping tag is different from ours. Either the mesh has\n        // no false colors, has false colors set by another analysis mode, has\n        // false colors set using different m_z_range[]/m_hue_range[] values, or\n        // the mesh has been moved.  In any case, we need to set the false\n        // colors to the ones we want.\n        System.Drawing.Color[] colors = new System.Drawing.Color[mesh.Vertices.Count];\n        for (int i = 0; i < mesh.Vertices.Count; i++)\n        {\n          double z = mesh.Vertices[i].Z;\n          colors[i] = FalseColor(z);\n        }\n        mesh.VertexColors.SetColors(colors);\n        // set the mesh's color tag \n        mesh.VertexColors.Tag = mt;\n      }\n    }\n  }\n\n  public override bool ShowIsoCurves\n  {\n    get\n    {\n      // Most shaded analysis modes that work on breps have the option of\n      // showing or hiding isocurves.  Run the built-in Rhino ZebraAnalysis\n      // to see how Rhino handles the user interface.  If controlling\n      // iso-curve visability is a feature you want to support, then provide\n      // user interface to set this member variable.\n      return m_show_isocurves; \n    }\n  }\n\n  /// <summary>\n  /// Returns a mapping tag that is used to detect when a mesh's colors need to\n  /// be set.\n  /// </summary>\n  /// <returns></returns>\n  Rhino.Render.MappingTag GetMappingTag(uint serialNumber)\n  {\n    Rhino.Render.MappingTag mt = new Rhino.Render.MappingTag();\n    mt.Id = this.Id;\n\n    // Since the false colors that are shown will change if the mesh is\n    // transformed, we have to initialize the transformation.\n    mt.MeshTransform = Transform.Identity;\n\n    // This is a 32 bit CRC or the information used to set the false colors.\n    // For this example, the m_z_range and m_hue_range intervals control the\n    // colors, so we calculate their crc.\n    uint crc = RhinoMath.CRC32(serialNumber, m_z_range.T0);\n    crc = RhinoMath.CRC32(crc, m_z_range.T1);\n    crc = RhinoMath.CRC32(crc, m_hue_range.T0);\n    crc = RhinoMath.CRC32(crc, m_hue_range.T1);\n    mt.MappingCRC = crc;\n    return mt;\n  }\n\n  System.Drawing.Color FalseColor(double z)\n  {\n    // Simple example of one way to change a number into a color.\n    double s = m_z_range.NormalizedParameterAt(z);\n    s = Rhino.RhinoMath.Clamp(s, 0, 1);\n    return System.Drawing.Color.FromArgb((int)(s * 255), 0, 0);\n  }\n\n}",
    "members": [
      ["Rhino.RhinoMath", "static uint CRC32(uint currentRemainder, double value)"],
      ["Rhino.Geometry.Collections.MeshVertexColorList", "MappingTag Tag"],
      ["Rhino.Geometry.Collections.MeshVertexColorList", "bool SetColors(Color[] colors)"]
    ]
  },
  {
    "name": "Arclengthpoint.cs",
    "code": "partial class Examples\n{\n  public static Rhino.Commands.Result ArcLengthPoint(Rhino.RhinoDoc doc)\n  {\n    Rhino.DocObjects.ObjRef objref;\n    Rhino.Commands.Result rc = Rhino.Input.RhinoGet.GetOneObject(\"Select curve\",\n      true, Rhino.DocObjects.ObjectType.Curve,out objref);\n    if(rc!= Rhino.Commands.Result.Success)\n      return rc;\n    Rhino.Geometry.Curve crv = objref.Curve();\n    if( crv==null )\n      return Rhino.Commands.Result.Failure;\n \n    double crv_length = crv.GetLength();\n    double length = 0;\n    rc = Rhino.Input.RhinoGet.GetNumber(\"Length from start\", true, ref length, 0, crv_length);\n    if(rc!= Rhino.Commands.Result.Success)\n      return rc;\n \n    Rhino.Geometry.Point3d pt = crv.PointAtLength(length);\n    if (pt.IsValid)\n    {\n      doc.Objects.AddPoint(pt);\n      doc.Views.Redraw();\n    }\n    return Rhino.Commands.Result.Success;\n  }\n}\n",
    "members": [
      ["Rhino.Geometry.Curve", "double GetLength()"],
      ["Rhino.Geometry.Curve", "Point3d PointAtLength(double length)"]
    ]
  },
  {
    "name": "Arraybydistance.cs",
    "code": "using Rhino;\n\n[System.Runtime.InteropServices.Guid(\"3CDCBB20-B4E4-4AB6-B870-C911C7435BD7\")]\npublic class ArrayByDistanceCommand : Rhino.Commands.Command\n{\n  public override string EnglishName\n  {\n    get { return \"cs_ArrayByDistance\"; }\n  }\n  \n  double m_distance = 1;\n  Rhino.Geometry.Point3d m_point_start;\n  protected override Rhino.Commands.Result RunCommand(RhinoDoc doc, Rhino.Commands.RunMode mode)\n  {\n    Rhino.DocObjects.ObjRef objref;\n    var rc = Rhino.Input.RhinoGet.GetOneObject(\"Select object\", true, Rhino.DocObjects.ObjectType.AnyObject, out objref);\n    if (rc != Rhino.Commands.Result.Success)\n      return rc;\n\n    rc = Rhino.Input.RhinoGet.GetPoint(\"Start point\", false, out m_point_start);\n    if (rc != Rhino.Commands.Result.Success)\n      return rc;\n\n    var obj = objref.Object();\n    if (obj == null)\n      return Rhino.Commands.Result.Failure;\n\n    // create an instance of a GetPoint class and add a delegate\n    // for the DynamicDraw event\n    var gp = new Rhino.Input.Custom.GetPoint();\n    gp.DrawLineFromPoint(m_point_start, true);\n    var optdouble = new Rhino.Input.Custom.OptionDouble(m_distance);\n    bool constrain = false;\n    var optconstrain = new Rhino.Input.Custom.OptionToggle(constrain, \"Off\", \"On\");\n    gp.AddOptionDouble(\"Distance\", ref optdouble);\n    gp.AddOptionToggle(\"Constrain\", ref optconstrain);\n    gp.DynamicDraw += ArrayByDistanceDraw;\n    gp.Tag = obj;\n    while (gp.Get() == Rhino.Input.GetResult.Option)\n    {\n      m_distance = optdouble.CurrentValue;\n      if (constrain != optconstrain.CurrentValue)\n      {\n        constrain = optconstrain.CurrentValue;\n        if (constrain)\n        {\n          var gp2 = new Rhino.Input.Custom.GetPoint();\n          gp2.DrawLineFromPoint(m_point_start, true);\n          gp2.SetCommandPrompt(\"Second point on constraint line\");\n          if (gp2.Get() == Rhino.Input.GetResult.Point)\n            gp.Constrain(m_point_start, gp2.Point());\n          else\n          {\n            gp.ClearCommandOptions();\n            optconstrain.CurrentValue = false;\n            constrain = false;\n            gp.AddOptionDouble(\"Distance\", ref optdouble);\n            gp.AddOptionToggle(\"Constrain\", ref optconstrain);\n          }\n        }\n        else\n        {\n          gp.ClearConstraints();\n        }\n      }\n    }\n\n    if (gp.CommandResult() == Rhino.Commands.Result.Success)\n    {\n      m_distance = optdouble.CurrentValue;\n      var pt = gp.Point();\n      var vec = pt - m_point_start;\n      double length = vec.Length;\n      vec.Unitize();\n      int count = (int)(length / m_distance);\n      for (int i = 1; i < count; i++)\n      {\n        var translate = vec * (i * m_distance);\n        var xf = Rhino.Geometry.Transform.Translation(translate);\n        doc.Objects.Transform(obj, xf, false);\n      }\n      doc.Views.Redraw();\n    }\n\n    return gp.CommandResult();\n  }\n\n  // this function is called whenever the GetPoint's DynamicDraw\n  // event occurs\n  void ArrayByDistanceDraw(object sender, Rhino.Input.Custom.GetPointDrawEventArgs e)\n  {\n    Rhino.DocObjects.RhinoObject rhobj = e.Source.Tag as Rhino.DocObjects.RhinoObject;\n    if (rhobj == null)\n      return;\n    var vec = e.CurrentPoint - m_point_start;\n    double length = vec.Length;\n    vec.Unitize();\n    int count = (int)(length / m_distance);\n    for (int i = 1; i < count; i++)\n    {\n      var translate = vec * (i * m_distance);\n      var xf = Rhino.Geometry.Transform.Translation(translate);\n      e.Display.DrawObject(rhobj, xf);\n    }\n  }\n}\n",
    "members": [
      ["Rhino.Display.DisplayPipeline", "void DrawObject(RhinoObject rhinoObject, Transform xform)"],
      ["Rhino.Input.Custom.GetBaseClass", "void ClearCommandOptions()"],
      ["Rhino.Input.Custom.GetPoint", "object Tag"],
      ["Rhino.Input.Custom.GetPoint", "void ClearConstraints()"],
      ["Rhino.Input.Custom.GetPoint", "bool Constrain(Point3d from, Point3d to)"],
      ["Rhino.Input.Custom.GetPointDrawEventArgs", "GetPoint Source"]
    ]
  },
  {
    "name": "Blockinsertionpoint.cs",
    "code": "using Rhino.Commands;\n\npartial class Examples\n{\n  public static Rhino.Commands.Result BlockInsertionPoint(Rhino.RhinoDoc doc)\n  {\n    Rhino.DocObjects.ObjRef objref;\n    Result rc = Rhino.Input.RhinoGet.GetOneObject(\"Select instance\", true, Rhino.DocObjects.ObjectType.InstanceReference, out objref);\n    if (rc != Rhino.Commands.Result.Success)\n      return rc;\n    Rhino.DocObjects.InstanceObject instance = objref.Object() as Rhino.DocObjects.InstanceObject;\n    if (instance != null)\n    {\n      Rhino.Geometry.Point3d pt = instance.InsertionPoint;\n      doc.Objects.AddPoint(pt);\n      doc.Views.Redraw();\n    }\n    return Rhino.Commands.Result.Success;\n  }\n}\n",
    "members": [
      ["Rhino.DocObjects.InstanceObject", "Point3d InsertionPoint"]
    ]
  },
  {
    "name": "Booleandifference.cs",
    "code": "using System.Collections.Generic;\nusing Rhino.Commands;\n\npartial class Examples\n{\n  public static Rhino.Commands.Result BooleanDifference(Rhino.RhinoDoc doc)\n  {\n    Rhino.DocObjects.ObjRef[] objrefs;\n    Result rc = Rhino.Input.RhinoGet.GetMultipleObjects(\"Select first set of polysurfaces\",\n                                                        false, Rhino.DocObjects.ObjectType.PolysrfFilter, out objrefs);\n    if (rc != Rhino.Commands.Result.Success)\n      return rc;\n    if (objrefs == null || objrefs.Length < 1)\n      return Rhino.Commands.Result.Failure;\n\n    List<Rhino.Geometry.Brep> in_breps0 = new List<Rhino.Geometry.Brep>();\n    for (int i = 0; i < objrefs.Length; i++)\n    {\n      Rhino.Geometry.Brep brep = objrefs[i].Brep();\n      if (brep != null)\n        in_breps0.Add(brep);\n    }\n\n    doc.Objects.UnselectAll();\n    rc = Rhino.Input.RhinoGet.GetMultipleObjects(\"Select second set of polysurfaces\",\n      false, Rhino.DocObjects.ObjectType.PolysrfFilter, out objrefs);\n    if (rc != Rhino.Commands.Result.Success)\n      return rc;\n    if (objrefs == null || objrefs.Length < 1)\n      return Rhino.Commands.Result.Failure;\n\n    List<Rhino.Geometry.Brep> in_breps1 = new List<Rhino.Geometry.Brep>();\n    for (int i = 0; i < objrefs.Length; i++)\n    {\n      Rhino.Geometry.Brep brep = objrefs[i].Brep();\n      if (brep != null)\n        in_breps1.Add(brep);\n    }\n\n    double tolerance = doc.ModelAbsoluteTolerance;\n    Rhino.Geometry.Brep[] breps = Rhino.Geometry.Brep.CreateBooleanDifference(in_breps0, in_breps1, tolerance);\n    if (breps.Length < 1)\n      return Rhino.Commands.Result.Nothing;\n    for (int i = 0; i < breps.Length; i++)\n      doc.Objects.AddBrep(breps[i]);\n    doc.Views.Redraw();\n    return Rhino.Commands.Result.Success;\n  }\n}\n",
    "members": [
      ["Rhino.Geometry.Brep", "static Brep[] CreateBooleanDifference(IEnumerable<Brep> firstSet, IEnumerable<Brep> secondSet, double tolerance)"],
      ["Rhino.Geometry.Brep", "static Brep[] CreateBooleanDifference(IEnumerable<Brep> firstSet, IEnumerable<Brep> secondSet, double tolerance, bool manifoldOnly)"],
      ["Rhino.DocObjects.ObjRef", "Brep Brep()"],
      ["Rhino.Input.RhinoGet", "static Result GetMultipleObjects(string prompt, bool acceptNothing, ObjectType filter, out ObjRef[] rhObjects)"]
    ]
  },
  {
    "name": "Circlecenter.cs",
    "code": "partial class Examples\n{\n  public static Rhino.Commands.Result CircleCenter(Rhino.RhinoDoc doc)\n  {\n    Rhino.Input.Custom.GetObject go = new Rhino.Input.Custom.GetObject();\n    go.SetCommandPrompt(\"Select objects\");\n    go.GeometryFilter = Rhino.DocObjects.ObjectType.Curve;\n    go.GeometryAttributeFilter = Rhino.Input.Custom.GeometryAttributeFilter.ClosedCurve;\n    go.GetMultiple(1, 0);\n    if( go.CommandResult() != Rhino.Commands.Result.Success )\n      return go.CommandResult();\n\n    Rhino.DocObjects.ObjRef[] objrefs = go.Objects();\n    if( objrefs==null )\n      return Rhino.Commands.Result.Nothing;\n\n    double tolerance = doc.ModelAbsoluteTolerance;\n    for( int i=0; i<objrefs.Length; i++ )\n    {\n      // get the curve geometry\n      Rhino.Geometry.Curve curve = objrefs[i].Curve();\n      if( curve==null )\n        continue;\n      Rhino.Geometry.Circle circle;\n      if( curve.TryGetCircle(out circle, tolerance) )\n      {\n        Rhino.RhinoApp.WriteLine(\"Circle{0}: center = {1}\", i+1, circle.Center);\n      }\n    }\n    return Rhino.Commands.Result.Success;\n  }\n}\n",
    "members": [
      ["Rhino.Geometry.Curve", "bool TryGetCircle(out Circle circle, double tolerance)"],
      ["Rhino.Input.Custom.GetObject", "GeometryAttributeFilter GeometryAttributeFilter"]
    ]
  },
  {
    "name": "Closestpoint.cs",
    "code": "using Rhino;\nusing Rhino.Geometry;\n\nnamespace examples_cs\n{\n  [System.Runtime.InteropServices.Guid(\"0E82E6DA-5335-453A-AC94-2499BBBCBE55\")]\n  public class RTreeClosestPoint : Rhino.Commands.Command\n  {\n    public override string EnglishName { get { return \"cs_RtreeClosestPoint\"; } }\n\n    void SearchCallback(object sender, RTreeEventArgs e)\n    {\n      SearchData data = e.Tag as SearchData;\n      if (data == null)\n        return;\n      data.HitCount = data.HitCount + 1;\n      Point3f vertex = data.Mesh.Vertices[e.Id];\n      double distance = data.Point.DistanceTo(vertex);\n      if (data.Index == -1 || data.Distance > distance)\n      {\n        // shrink the sphere to help improve the test\n        e.SearchSphere = new Sphere(data.Point, distance);\n        data.Index = e.Id;\n        data.Distance = distance;\n      }\n    }\n\n    class SearchData\n    {\n      public SearchData(Mesh mesh, Point3d point)\n      {\n        Point = point;\n        Mesh = mesh;\n        HitCount = 0;\n        Index = -1;\n        Distance = 0;\n      }\n\n      public int HitCount { get; set; }\n      public Point3d Point { get; private set; }\n      public Mesh Mesh { get; private set; }\n      public int Index { get; set; }\n      public double Distance { get; set; }\n    }\n\n    protected override Rhino.Commands.Result RunCommand(RhinoDoc doc, Rhino.Commands.RunMode mode)\n    {\n      Rhino.DocObjects.ObjRef objref;\n      var rc = Rhino.Input.RhinoGet.GetOneObject(\"select mesh\", false, Rhino.DocObjects.ObjectType.Mesh, out objref);\n      if (rc != Rhino.Commands.Result.Success)\n        return rc;\n\n      Mesh mesh = objref.Mesh();\n      objref.Object().Select(false);\n      doc.Views.Redraw();\n\n      using (RTree tree = new RTree())\n      {\n        for (int i = 0; i < mesh.Vertices.Count; i++)\n        {\n          // we can make a C++ function that just builds an rtree from the\n          // vertices in one quick shot, but for now...\n          tree.Insert(mesh.Vertices[i], i);\n        }\n\n        while (true)\n        {\n          Point3d point;\n          rc = Rhino.Input.RhinoGet.GetPoint(\"test point\", false, out point);\n          if (rc != Rhino.Commands.Result.Success)\n            break;\n\n          SearchData data = new SearchData(mesh, point);\n          // Use the first vertex in the mesh to define a start sphere\n          double distance = point.DistanceTo(mesh.Vertices[0]);\n          Sphere sphere = new Sphere(point, distance * 1.1);\n          if (tree.Search(sphere, SearchCallback, data))\n          {\n            doc.Objects.AddPoint(mesh.Vertices[data.Index]);\n            doc.Views.Redraw();\n            RhinoApp.WriteLine(\"Found point in {0} tests\", data.HitCount);\n          }\n        }\n      }\n      return Rhino.Commands.Result.Success;\n    }\n  }\n}\n\n",
    "members": [
      ["Rhino.Geometry.RTree", "RTree()"],
      ["Rhino.Geometry.RTree", "bool Insert(Point3d point, int elementId)"],
      ["Rhino.Geometry.RTree", "bool Search(Sphere sphere, EventHandler<RTreeEventArgs> callback, object tag)"]
    ]
  },
  {
    "name": "Commandlineoptions.cs",
    "code": "partial class Examples\n{\n  public static Rhino.Commands.Result CommandLineOptions(Rhino.RhinoDoc doc)\n  {\n    // For this example we will use a GetPoint class, but all of the custom\n    // \"Get\" classes support command line options.\n    Rhino.Input.Custom.GetPoint gp = new Rhino.Input.Custom.GetPoint();\n    gp.SetCommandPrompt(\"GetPoint with options\");\n\n    // set up the options\n    Rhino.Input.Custom.OptionInteger intOption = new Rhino.Input.Custom.OptionInteger(1, 1, 99);\n    Rhino.Input.Custom.OptionDouble dblOption = new Rhino.Input.Custom.OptionDouble(2.2, 0, 99.9);\n    Rhino.Input.Custom.OptionToggle boolOption = new Rhino.Input.Custom.OptionToggle(true, \"Off\", \"On\");\n    string[] listValues = new string[] { \"Item0\", \"Item1\", \"Item2\", \"Item3\", \"Item4\" };\n\n    gp.AddOptionInteger(\"Integer\", ref intOption);\n    gp.AddOptionDouble(\"Double\", ref dblOption);\n    gp.AddOptionToggle(\"Boolean\", ref boolOption);\n    int listIndex = 3;\n    int opList = gp.AddOptionList(\"List\", listValues, listIndex);\n\n    while (true)\n    {\n      // perform the get operation. This will prompt the user to input a point, but also\n      // allow for command line options defined above\n      Rhino.Input.GetResult get_rc = gp.Get();\n      if (gp.CommandResult() != Rhino.Commands.Result.Success)\n        return gp.CommandResult();\n\n      if (get_rc == Rhino.Input.GetResult.Point)\n      {\n        doc.Objects.AddPoint(gp.Point());\n        doc.Views.Redraw();\n        Rhino.RhinoApp.WriteLine(\"Command line option values are\");\n        Rhino.RhinoApp.WriteLine(\" Integer = {0}\", intOption.CurrentValue);\n        Rhino.RhinoApp.WriteLine(\" Double = {0}\", dblOption.CurrentValue);\n        Rhino.RhinoApp.WriteLine(\" Boolean = {0}\", boolOption.CurrentValue);\n        Rhino.RhinoApp.WriteLine(\" List = {0}\", listValues[listIndex]);\n      }\n      else if (get_rc == Rhino.Input.GetResult.Option)\n      {\n        if (gp.OptionIndex() == opList)\n          listIndex = gp.Option().CurrentListOptionIndex;\n        continue;\n      }\n      break;\n    }\n    return Rhino.Commands.Result.Success;\n  }\n}\n",
    "members": [
      ["Rhino.Input.Custom.GetBaseClass", "int AddOptionDouble(LocalizeStringPair optionName, ref OptionDouble numberValue)"],
      ["Rhino.Input.Custom.GetBaseClass", "int AddOptionDouble(string englishName, ref OptionDouble numberValue)"],
      ["Rhino.Input.Custom.GetBaseClass", "int AddOptionInteger(LocalizeStringPair optionName, ref OptionInteger intValue)"],
      ["Rhino.Input.Custom.GetBaseClass", "int AddOptionInteger(string englishName, ref OptionInteger intValue)"],
      ["Rhino.Input.Custom.GetBaseClass", "int AddOptionToggle(LocalizeStringPair optionName, ref OptionToggle toggleValue)"],
      ["Rhino.Input.Custom.GetBaseClass", "int AddOptionToggle(string englishName, ref OptionToggle toggleValue)"],
      ["Rhino.Input.Custom.CommandLineOption", "int CurrentListOptionIndex"],
      ["Rhino.Input.Custom.OptionToggle", "OptionToggle(bool initialValue, string offValue, string onValue)"],
      ["Rhino.Input.Custom.OptionToggle", "bool CurrentValue"],
      ["Rhino.Input.Custom.OptionDouble", "OptionDouble(double initialValue, double lowerLimit, double upperLimit)"],
      ["Rhino.Input.Custom.OptionDouble", "double CurrentValue"],
      ["Rhino.Input.Custom.OptionInteger", "OptionInteger(int initialValue, int lowerLimit, int upperLimit)"],
      ["Rhino.Input.Custom.OptionInteger", "int CurrentValue"]
    ]
  },
  {
    "name": "Conduitarrowheads.cs",
    "code": "using Rhino;\nusing Rhino.Commands;\nusing Rhino.Geometry;\nusing Rhino.Input.Custom;\n\nnamespace examples_cs\n{\n  class DrawArrowHeadsConduit : Rhino.Display.DisplayConduit\n  {\n    private readonly Line m_line;\n    private readonly int m_screen_size;\n    private readonly double m_world_size;\n\n    public DrawArrowHeadsConduit(Line line, int screenSize, double worldSize)\n    {\n      m_line = line;\n      m_screen_size = screenSize;\n      m_world_size = worldSize;\n    }\n\n    protected override void DrawForeground(Rhino.Display.DrawEventArgs e)\n    {\n      e.Display.DrawArrow(m_line, System.Drawing.Color.Black, m_screen_size, m_world_size);\n    }\n  }\n\n\n  public class DrawArrowheadsCommand : Command\n  {\n    public override string EnglishName { get { return \"csDrawArrowHeads\"; } }\n\n    DrawArrowHeadsConduit m_draw_conduit;\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      if (m_draw_conduit != null)\n      {\n        RhinoApp.WriteLine(\"Turn off existing arrowhead conduit\");\n        m_draw_conduit.Enabled = false;\n        m_draw_conduit = null;\n      }\n      else\n      {\n        // get arrow head size\n        var go = new GetOption();\n        go.SetCommandPrompt(\"ArrowHead length in screen size (pixels) or world size (percentage of arrow length)?\");\n        go.AddOption(\"screen\");\n        go.AddOption(\"world\");\n        go.Get();\n        if (go.CommandResult() != Result.Success)\n          return go.CommandResult();\n\n        int screen_size = 0;\n        double world_size = 0.0;\n        if (go.Option().EnglishName == \"screen\")\n        {\n          var gi = new GetInteger();\n          gi.SetLowerLimit(0, true);\n          gi.SetCommandPrompt(\"Length of arrow head in pixels\");\n          gi.Get();\n          if (gi.CommandResult() != Result.Success)\n            return gi.CommandResult();\n          screen_size = gi.Number();\n        }\n        else\n        {\n          var gi = new GetInteger();\n          gi.SetLowerLimit(0, true);\n          gi.SetUpperLimit(100, false);\n          gi.SetCommandPrompt(\"Length of arrow head in percentage of total arrow length\");\n          gi.Get();\n          if (gi.CommandResult() != Result.Success)\n            return gi.CommandResult();\n          world_size = gi.Number() / 100.0;\n        }\n\n\n        // get arrow start and end points\n        var gp = new GetPoint();\n        gp.SetCommandPrompt(\"Start of line\");\n        gp.Get();\n        if (gp.CommandResult() != Result.Success)\n          return gp.CommandResult();\n        var start_point = gp.Point();\n\n        gp.SetCommandPrompt(\"End of line\");\n        gp.SetBasePoint(start_point, false);\n        gp.DrawLineFromPoint(start_point, true);\n        gp.Get();\n        if (gp.CommandResult() != Result.Success)\n          return gp.CommandResult();\n        var end_point = gp.Point();\n\n        var v = end_point - start_point;\n        if (v.IsTiny(Rhino.RhinoMath.ZeroTolerance))\n          return Result.Nothing;\n\n        var line = new Line(start_point, end_point);\n\n        m_draw_conduit = new DrawArrowHeadsConduit(line, screen_size, world_size);\n        // toggle conduit on/off\n        m_draw_conduit.Enabled = true;\n        RhinoApp.WriteLine(\"Draw arrowheads conduit enabled.\");\n      }\n      doc.Views.Redraw();\n      return Result.Success;\n    }\n  }\n}\n\n",
    "members": [
      ["Rhino.Display.DisplayPipeline", "void DrawArrow(Line line, Color color, double screenSize, double relativeSize)"]
    ]
  },
  {
    "name": "Conduitbitmap.cs",
    "code": "using System.Drawing;\nusing Rhino;\nusing Rhino.Commands;\nusing Rhino.Display;\n\nnamespace examples_cs\n{\n  public class DrawBitmapConduit : Rhino.Display.DisplayConduit\n  {\n    private readonly DisplayBitmap m_display_bitmap;\n\n    public DrawBitmapConduit()\n    {\n      var flag = new System.Drawing.Bitmap(100, 100);\n      for( int x = 0; x <  flag.Height; ++x )\n          for( int y = 0; y < flag.Width; ++y )\n              flag.SetPixel(x, y, Color.White);\n\n      var g = Graphics.FromImage(flag);\n      g.FillEllipse(Brushes.Blue, 25, 25, 50, 50);\n      m_display_bitmap = new DisplayBitmap(flag);\n    }\n\n    protected override void DrawForeground(Rhino.Display.DrawEventArgs e)\n    {\n      e.Display.DrawBitmap(m_display_bitmap, 50, 50, Color.White);\n    }\n  }\n\n  public class DrawBitmapCommand : Command\n  {\n    public override string EnglishName { get { return \"csDrawBitmap\"; } }\n\n    readonly DrawBitmapConduit m_conduit = new DrawBitmapConduit();\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      // toggle conduit on/off\n      m_conduit.Enabled = !m_conduit.Enabled;\n      \n      RhinoApp.WriteLine(\"Custom conduit enabled = {0}\", m_conduit.Enabled);\n      doc.Views.Redraw();\n      return Result.Success;\n    }\n  }\n}",
    "members": [
      ["Rhino.Display.DisplayPipeline", "void DrawBitmap(DisplayBitmap bitmap, int left, int top)"]
    ]
  },
  {
    "name": "Constrainedcopy.cs",
    "code": "using System;\n\npartial class Examples\n{\n  public static Rhino.Commands.Result ConstrainedCopy(Rhino.RhinoDoc doc)\n  {\n    // Get a single planar closed curve\n    var go = new Rhino.Input.Custom.GetObject();\n    go.SetCommandPrompt(\"Select curve\");\n    go.GeometryFilter = Rhino.DocObjects.ObjectType.Curve;\n    go.GeometryAttributeFilter = Rhino.Input.Custom.GeometryAttributeFilter.ClosedCurve;\n    go.Get();\n    if( go.CommandResult() != Rhino.Commands.Result.Success )\n      return go.CommandResult();\n    var objref = go.Object(0);\n    var base_curve = objref.Curve();\n    var first_point = objref.SelectionPoint();\n    if( base_curve==null || !first_point.IsValid )\n      return Rhino.Commands.Result.Cancel;\n\n    Rhino.Geometry.Plane plane;\n    if( !base_curve.TryGetPlane(out plane) )\n      return Rhino.Commands.Result.Cancel;\n\n    // Get a point constrained to a line passing through the initial selection\n    // point and parallel to the plane's normal\n    var gp = new Rhino.Input.Custom.GetPoint();\n    gp.SetCommandPrompt(\"Offset point\");\n    gp.DrawLineFromPoint(first_point, true);\n    var line = new Rhino.Geometry.Line(first_point, first_point+plane.Normal);\n    gp.Constrain(line);\n    gp.Get();\n    if( gp.CommandResult() != Rhino.Commands.Result.Success )\n      return gp.CommandResult();\n    var second_point = gp.Point();\n    Rhino.Geometry.Vector3d vec = second_point - first_point;\n    if( vec.Length > 0.001 )\n    {\n      var xf = Rhino.Geometry.Transform.Translation(vec);\n      Guid id = doc.Objects.Transform(objref, xf, false);\n      if( id!=Guid.Empty )\n      {\n        doc.Views.Redraw();\n        return Rhino.Commands.Result.Success;\n      }\n    }\n    return Rhino.Commands.Result.Cancel;\n  }\n}\n",
    "members": [
      ["Rhino.Geometry.Curve", "bool TryGetPlane(out Plane plane)"],
      ["Rhino.Geometry.Transform", "static Transform Translation(Vector3d motion)"],
      ["Rhino.DocObjects.ObjRef", "Point3d SelectionPoint()"],
      ["Rhino.Input.Custom.GetPoint", "bool Constrain(Line line)"]
    ]
  },
  {
    "name": "Createblock.cs",
    "code": "using Rhino.DocObjects;\n\npartial class Examples\n{\n  public static Rhino.Commands.Result CreateBlock(Rhino.RhinoDoc doc)\n  {\n    // Select objects to define block\n    var go = new Rhino.Input.Custom.GetObject();\n    go.SetCommandPrompt( \"Select objects to define block\" );\n    go.ReferenceObjectSelect = false;\n    go.SubObjectSelect = false;\n    go.GroupSelect = true;\n\n    // Phantoms, grips, lights, etc., cannot be in blocks.\n    const ObjectType forbidden_geometry_filter = Rhino.DocObjects.ObjectType.Light |\n                                                 Rhino.DocObjects.ObjectType.Grip | Rhino.DocObjects.ObjectType.Phantom;\n    const ObjectType geometry_filter = forbidden_geometry_filter ^ Rhino.DocObjects.ObjectType.AnyObject;\n    go.GeometryFilter = geometry_filter;\n    go.GetMultiple(1, 0);\n    if (go.CommandResult() != Rhino.Commands.Result.Success)\n      return go.CommandResult();\n\n    // Block base point\n    Rhino.Geometry.Point3d base_point;\n    var rc = Rhino.Input.RhinoGet.GetPoint(\"Block base point\", false, out base_point);\n    if (rc != Rhino.Commands.Result.Success)\n      return rc;\n\n    // Block definition name\n    string idef_name = \"\";\n    rc = Rhino.Input.RhinoGet.GetString(\"Block definition name\", false, ref idef_name);\n    if (rc != Rhino.Commands.Result.Success)\n      return rc;\n    // Validate block name\n    idef_name = idef_name.Trim();\n    if (string.IsNullOrEmpty(idef_name))\n      return Rhino.Commands.Result.Nothing;\n\n    // See if block name already exists\n    Rhino.DocObjects.InstanceDefinition existing_idef = doc.InstanceDefinitions.Find(idef_name, true);\n    if (existing_idef != null)\n    {\n      Rhino.RhinoApp.WriteLine(\"Block definition {0} already exists\", idef_name);\n      return Rhino.Commands.Result.Nothing;\n    }\n\n    // Gather all of the selected objects\n    var geometry = new System.Collections.Generic.List<Rhino.Geometry.GeometryBase>();\n    var attributes = new System.Collections.Generic.List<Rhino.DocObjects.ObjectAttributes>();\n    for (int i = 0; i < go.ObjectCount; i++)\n    {\n      var rhinoObject = go.Object(i).Object();\n      if (rhinoObject != null)\n      {\n        geometry.Add(rhinoObject.Geometry);\n        attributes.Add(rhinoObject.Attributes);\n      }\n    }\n\n    // Gather all of the selected objects\n    int idef_index = doc.InstanceDefinitions.Add(idef_name, string.Empty, base_point, geometry, attributes);\n\n    if( idef_index < 0 )\n    {\n      Rhino.RhinoApp.WriteLine(\"Unable to create block definition\", idef_name);\n      return Rhino.Commands.Result.Failure;\n    }\n    return Rhino.Commands.Result.Failure;\n  }\n}\n",
    "members": [
      ["Rhino.Input.Custom.GetObject", "bool ReferenceObjectSelect"],
      ["Rhino.DocObjects.Tables.InstanceDefinitionTable", "int Add(string name, string description, Point3d basePoint, IEnumerable<GeometryBase> geometry, IEnumerable<ObjectAttributes> attributes)"],
      ["Rhino.DocObjects.Tables.InstanceDefinitionTable", "InstanceDefinition Find(string instanceDefinitionName)"],
      ["Rhino.DocObjects.Tables.InstanceDefinitionTable", "InstanceDefinition Find(string instanceDefinitionName, bool ignoreDeletedInstanceDefinitions)"]
    ]
  },
  {
    "name": "Createmeshfrombrep.cs",
    "code": "using Rhino;\nusing Rhino.Commands;\nusing Rhino.Input;\nusing Rhino.Geometry;\nusing Rhino.DocObjects;\n\nnamespace examples_cs\n{\n  public class CreateMeshFromBrepCommand : Command\n  {\n    public override string EnglishName { get { return \"csCreateMeshFromBrep\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      ObjRef obj_ref;\n      var rc = RhinoGet.GetOneObject(\"Select surface or polysurface to mesh\", true, ObjectType.Surface | ObjectType.PolysrfFilter, out obj_ref);\n      if (rc != Result.Success)\n        return rc;\n      var brep = obj_ref.Brep();\n      if (null == brep)\n        return Result.Failure;\n\n      // you could choose anyone of these for example\n      var jagged_and_faster = MeshingParameters.Coarse;\n      var smooth_and_slower = MeshingParameters.Smooth;\n      var default_mesh_params = MeshingParameters.Default;\n      var minimal = MeshingParameters.Minimal;\n\n      var meshes = Mesh.CreateFromBrep(brep, smooth_and_slower);\n      if (meshes == null || meshes.Length == 0)\n        return Result.Failure;\n\n      var brep_mesh = new Mesh();\n      foreach (var mesh in meshes)\n        brep_mesh.Append(mesh);\n      doc.Objects.AddMesh(brep_mesh);\n      doc.Views.Redraw();\n\n      return Result.Success;\n    }\n  }\n}",
    "members": [
      ["Rhino.Geometry.MeshingParameters", "static MeshingParameters Coarse"],
      ["Rhino.Geometry.MeshingParameters", "static MeshingParameters Default"],
      ["Rhino.Geometry.MeshingParameters", "static MeshingParameters Minimal"],
      ["Rhino.Geometry.MeshingParameters", "static MeshingParameters Smooth"],
      ["Rhino.Geometry.Mesh", "static Mesh[] CreateFromBrep(Brep brep, MeshingParameters meshingParameters)"],
      ["Rhino.Geometry.Mesh", "void Append(Mesh other)"]
    ]
  },
  {
    "name": "Createsurfaceexample.cs",
    "code": "using Rhino;\nusing Rhino.Commands;\nusing Rhino.Geometry;\n\nnamespace examples_cs\n{\n  public class CreateSurfaceFromPointsAndKnotsCommand : Command\n  {\n    public override string EnglishName { get { return \"csCreateSurfaceFromPointsAndKnots\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      const bool is_rational = false;\n      const int number_of_dimensions = 3;\n      const int u_degree = 2;\n      const int v_degree = 3;\n      const int u_control_point_count = 3;\n      const int v_control_point_count = 5;\n     \n      // The knot vectors do NOT have the 2 superfluous knots\n      // at the start and end of the knot vector.  If you are\n      // coming from a system that has the 2 superfluous knots,\n      // just ignore them when creating NURBS surfaces.\n      var u_knots = new double[u_control_point_count + u_degree - 1];\n      var v_knots = new double[v_control_point_count + v_degree - 1];\n     \n      // make up a quadratic knot vector with no interior knots\n      u_knots[0] = u_knots[1] = 0.0;\n      u_knots[2] = u_knots[3] = 1.0;\n     \n      // make up a cubic knot vector with one simple interior knot\n      v_knots[0] = v_knots[1] = v_knots[2] = 0.0;\n      v_knots[3] = 1.5;\n      v_knots[4] = v_knots[5] = v_knots[6] = 2.0;\n     \n      // Rational control points can be in either homogeneous\n      // or euclidean form. Non-rational control points do not\n      // need to specify a weight.  \n      var control_points = new Point3d[u_control_point_count, v_control_point_count];\n\n      for (int u = 0; u < u_control_point_count; u++)\n      {\n        for (int v = 0; v < v_control_point_count; v++)\n        {\n          control_points[u,v] = new Point3d(u, v, u-v);\n        }\n      }\n     \n      // creates internal uninitialized arrays for \n      // control points and knots\n      var nurbs_surface = NurbsSurface.Create(\n        number_of_dimensions,\n        is_rational,\n        u_degree + 1,\n        v_degree + 1,\n        u_control_point_count,\n        v_control_point_count\n        );\n     \n      // add the knots\n      for (int u = 0;  u < nurbs_surface.KnotsU.Count; u++)\n        nurbs_surface.KnotsU[u] = u_knots[u];\n      for (int v = 0; v < nurbs_surface.KnotsV.Count; v++)\n        nurbs_surface.KnotsV[v] = v_knots[v];\n\n      // add the control points\n      for (int u = 0; u < nurbs_surface.Points.CountU; u++)\n      {\n        for (int v = 0; v < nurbs_surface.Points.CountV; v++)\n        {\n          nurbs_surface.Points.SetControlPoint(u, v, control_points[u, v]);\n        }\n      }\n\n      if (nurbs_surface.IsValid)\n      {\n        doc.Objects.AddSurface(nurbs_surface);\n        doc.Views.Redraw();\n        return Result.Success;\n      }\n      return Result.Failure;\n    }\n  }\n}",
    "members": [
      ["Rhino.Geometry.NurbsSurface", "NurbsSurfaceKnotList KnotsU"],
      ["Rhino.Geometry.NurbsSurface", "NurbsSurfaceKnotList KnotsV"],
      ["Rhino.Geometry.NurbsSurface", "NurbsSurfacePointList Points"],
      ["Rhino.Geometry.NurbsSurface", "static NurbsSurface Create(int dimension, bool isRational, int order0, int order1, int controlPointCount0, int controlPointCount1)"]
    ]
  },
  {
    "name": "Crvdeviation.cs",
    "code": "using Rhino;\nusing Rhino.Commands;\nusing Rhino.DocObjects;\nusing Rhino.Geometry;\nusing System.Drawing;\nusing Rhino.Input;\n\nnamespace examples_cs\n{\n  class DeviationConduit : Rhino.Display.DisplayConduit\n  {\n    private readonly Curve m_curve_a;\n    private readonly Curve m_curve_b;\n    private readonly Point3d m_min_dist_point_a ;\n    private readonly Point3d m_min_dist_point_b ;\n    private readonly Point3d m_max_dist_point_a ;\n    private readonly Point3d m_max_dist_point_b ;\n\n    public DeviationConduit(Curve curveA, Curve curveB, Point3d minDistPointA, Point3d minDistPointB, Point3d maxDistPointA, Point3d maxDistPointB)\n    {\n      m_curve_a = curveA;\n      m_curve_b = curveB;\n      m_min_dist_point_a = minDistPointA;\n      m_min_dist_point_b = minDistPointB;\n      m_max_dist_point_a = maxDistPointA;\n      m_max_dist_point_b = maxDistPointB;\n    }\n\n    protected override void DrawForeground(Rhino.Display.DrawEventArgs e)\n    {\n      e.Display.DrawCurve(m_curve_a, Color.Red);\n      e.Display.DrawCurve(m_curve_b, Color.Red);\n\n      e.Display.DrawPoint(m_min_dist_point_a, Color.LawnGreen);\n      e.Display.DrawPoint(m_min_dist_point_b, Color.LawnGreen);\n      e.Display.DrawLine(new Line(m_min_dist_point_a, m_min_dist_point_b), Color.LawnGreen);\n      e.Display.DrawPoint(m_max_dist_point_a, Color.Red);\n      e.Display.DrawPoint(m_max_dist_point_b, Color.Red);\n      e.Display.DrawLine(new Line(m_max_dist_point_a, m_max_dist_point_b), Color.Red);\n    }\n  }\n\n\n  public class CurveDeviationCommand : Command\n  {\n    public override string EnglishName { get { return \"csCurveDeviation\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      doc.Objects.UnselectAll();\n\n      ObjRef obj_ref1;\n      var rc1 = RhinoGet.GetOneObject(\"first curve\", true, ObjectType.Curve, out obj_ref1);\n      if (rc1 != Result.Success)\n        return rc1;\n      Curve curve_a = null;\n      if (obj_ref1 != null)\n        curve_a = obj_ref1.Curve();\n      if (curve_a == null)\n        return Result.Failure;\n\n      // Since you already selected a curve if you don't unselect it\n      // the next GetOneObject won't stop as it considers that curve \n      // input, i.e., curveA and curveB will point to the same curve.\n      // Another option would be to use an instance of Rhino.Input.Custom.GetObject\n      // instead of Rhino.Input.RhinoGet as GetObject has a DisablePreSelect() method.\n      doc.Objects.UnselectAll();\n\n      ObjRef obj_ref2;\n      var rc2 = RhinoGet.GetOneObject(\"second curve\", true, ObjectType.Curve, out obj_ref2);\n      if (rc2 != Result.Success)\n        return rc2;\n      Curve curve_b = null;\n      if (obj_ref2 != null)\n        curve_b = obj_ref2.Curve();\n      if (curve_b == null)\n        return Result.Failure;\n\n      var tolerance = doc.ModelAbsoluteTolerance;\n\n      double max_distance;\n      double max_distance_parameter_a;\n      double max_distance_parameter_b;\n      double min_distance;\n      double min_distance_parameter_a;\n      double min_distance_parameter_b;\n\n      DeviationConduit conduit;\n      if (!Curve.GetDistancesBetweenCurves(curve_a, curve_b, tolerance, out max_distance, \n                out max_distance_parameter_a, out max_distance_parameter_b,\n                out min_distance, out min_distance_parameter_a, out min_distance_parameter_b))\n      {\n        RhinoApp.WriteLine(\"Unable to find overlap intervals.\");\n        return Result.Success;\n      }\n      else\n      {\n        if (min_distance <= RhinoMath.ZeroTolerance)\n          min_distance = 0.0;\n        var max_dist_pt_a = curve_a.PointAt(max_distance_parameter_a);\n        var max_dist_pt_b = curve_b.PointAt(max_distance_parameter_b);\n        var min_dist_pt_a = curve_a.PointAt(min_distance_parameter_a);\n        var min_dist_pt_b = curve_b.PointAt(min_distance_parameter_b);\n\n        conduit = new DeviationConduit(curve_a, curve_b, min_dist_pt_a, min_dist_pt_b, max_dist_pt_a, max_dist_pt_b) {Enabled = true};\n        doc.Views.Redraw();\n\n        RhinoApp.WriteLine(\"Minimum deviation = {0}   pointA({1}), pointB({2})\", min_distance, min_dist_pt_a, min_dist_pt_b);\n        RhinoApp.WriteLine(\"Maximum deviation = {0}   pointA({1}), pointB({2})\", max_distance, max_dist_pt_a, max_dist_pt_b);\n      }\n\n      var str = \"\";\n      RhinoGet.GetString(\"Press Enter when done\", true, ref str);\n      conduit.Enabled = false;\n\n      return Result.Success;\n    }\n  }\n}\n",
    "members": [
      ["Rhino.Geometry.Curve", "static bool GetDistancesBetweenCurves(Curve curveA, Curve curveB, double tolerance, out double maxDistance, out double maxDistanceParameterA, out double maxDistanceParameterB, out double minDistance, out double minDistanceParameterA, out double minDistanceParameterB)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "int UnselectAll()"]
    ]
  },
  {
    "name": "Curveboundingbox.cs",
    "code": "partial class Examples\n{\n  public static Rhino.Commands.Result CurveBoundingBox(Rhino.RhinoDoc doc)\n  {\n    // Select a curve object\n    Rhino.DocObjects.ObjRef rhObject;\n    var rc = Rhino.Input.RhinoGet.GetOneObject(\"Select curve\", false, Rhino.DocObjects.ObjectType.Curve, out rhObject);\n    if (rc != Rhino.Commands.Result.Success)\n      return rc;\n\n    // Validate selection\n    var curve = rhObject.Curve();\n    if (curve == null)\n      return Rhino.Commands.Result.Failure;\n\n    // Get the active view's construction plane\n    var view = doc.Views.ActiveView;\n    if (view == null)\n      return Rhino.Commands.Result.Failure;\n    var plane = view.ActiveViewport.ConstructionPlane();\n\n    // Compute the tight bounding box of the curve in world coordinates\n    var bbox = curve.GetBoundingBox(true);\n    if (!bbox.IsValid)\n      return Rhino.Commands.Result.Failure;\n\n    // Print the min and max box coordinates in world coordinates\n    Rhino.RhinoApp.WriteLine(\"World min: {0}\", bbox.Min);\n    Rhino.RhinoApp.WriteLine(\"World max: {0}\", bbox.Max);\n\n    // Compute the tight bounding box of the curve based on the \n    // active view's construction plane\n    bbox = curve.GetBoundingBox(plane);\n\n    // Print the min and max box coordinates in cplane coordinates\n    Rhino.RhinoApp.WriteLine(\"CPlane min: {0}\", bbox.Min);\n    Rhino.RhinoApp.WriteLine(\"CPlane max: {0}\", bbox.Max);\n    return Rhino.Commands.Result.Success;\n  }\n}\n",
    "members": [
      ["Rhino.Geometry.GeometryBase", "BoundingBox GetBoundingBox(bool accurate)"],
      ["Rhino.Geometry.GeometryBase", "BoundingBox GetBoundingBox(Plane plane)"]
    ]
  },
  {
    "name": "Curvebrepbox.cs",
    "code": "using Rhino;\nusing Rhino.Geometry;\nusing Rhino.Commands;\nusing Rhino.Input;\nusing Rhino.DocObjects;\n\nnamespace examples_cs\n{\n  public class BrepFromCurveBBoxCommand : Command\n  {\n    public override string EnglishName { get { return \"csBrepFromCurveBBox\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      Rhino.DocObjects.ObjRef objref;\n      var rc = RhinoGet.GetOneObject(\"Select Curve\", false, ObjectType.Curve, out objref);\n      if( rc != Result.Success )\n        return rc;\n      var curve = objref.Curve();\n\n      var view = doc.Views.ActiveView;\n      var plane = view.ActiveViewport.ConstructionPlane();\n      // Create a construction plane aligned bounding box\n      var bbox = curve.GetBoundingBox(plane);\n\n      if (bbox.IsDegenerate(doc.ModelAbsoluteTolerance) > 0) {\n        RhinoApp.WriteLine(\"the curve's bounding box is degenerate (flat) in at least one direction so a box cannot be created.\");\n        return Result.Failure;\n      }\n      var brep = Brep.CreateFromBox(bbox);\n      doc.Objects.AddBrep(brep);\n      doc.Views.Redraw();\n      return Result.Success;\n    }\n  }\n}",
    "members": [
      ["Rhino.Geometry.BoundingBox", "int IsDegenerate(double tolerance)"],
      ["Rhino.Geometry.Brep", "static Brep CreateFromBox(BoundingBox box)"]
    ]
  },
  {
    "name": "Curvereverse.cs",
    "code": "using Rhino;\nusing Rhino.Commands;\nusing Rhino.Input;\nusing Rhino.DocObjects;\n\nnamespace examples_cs\n{\n  public class ReverseCurveCommand : Command\n  {\n    public override string EnglishName { get { return \"csReverseCurve\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      ObjRef[] obj_refs; \n      var rc = RhinoGet.GetMultipleObjects(\"Select curves to reverse\", true, ObjectType.Curve, out obj_refs);\n      if (rc != Result.Success)\n        return rc;\n\n      foreach (var obj_ref in obj_refs)\n      {\n        var curve_copy = obj_ref.Curve().DuplicateCurve();\n        if (curve_copy != null)\n        {\n          curve_copy.Reverse();\n          doc.Objects.Replace(obj_ref, curve_copy);\n        }\n      }\n      return Result.Success;\n    }\n  }\n}",
    "members": [
      ["Rhino.Geometry.Curve", "Curve DuplicateCurve()"],
      ["Rhino.Geometry.Curve", "bool Reverse()"]
    ]
  },
  {
    "name": "Curvesurfaceintersect.cs",
    "code": "using Rhino;\nusing Rhino.Geometry;\nusing Rhino.Geometry.Intersect;\nusing Rhino.Input.Custom;\nusing Rhino.DocObjects;\nusing Rhino.Commands;\n\nnamespace examples_cs\n{\n  public class CurveSurfaceIntersectCommand : Command\n  {\n    public override string EnglishName { get { return \"csCurveSurfaceIntersect\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      var gs = new GetObject();\n      gs.SetCommandPrompt(\"select brep\");\n      gs.GeometryFilter = ObjectType.Brep;\n      gs.DisablePreSelect();\n      gs.SubObjectSelect = false;\n      gs.Get();\n      if (gs.CommandResult() != Result.Success)\n        return gs.CommandResult();\n      var brep = gs.Object(0).Brep();\n\n      var gc = new GetObject();\n      gc.SetCommandPrompt(\"select curve\");\n      gc.GeometryFilter = ObjectType.Curve;\n      gc.DisablePreSelect();\n      gc.SubObjectSelect = false;\n      gc.Get();\n      if (gc.CommandResult() != Result.Success)\n        return gc.CommandResult();\n      var curve = gc.Object(0).Curve();\n\n      if (brep == null || curve == null)\n        return Result.Failure;\n\n      var tolerance = doc.ModelAbsoluteTolerance;\n\n      Point3d[] intersection_points;\n      Curve[] overlap_curves;\n      if (!Intersection.CurveBrep(curve, brep, tolerance, out overlap_curves, out intersection_points))\n      {\n        RhinoApp.WriteLine(\"curve brep intersection failed\");\n        return Result.Nothing;\n      }\n\n      foreach (var overlap_curve in overlap_curves)\n        doc.Objects.AddCurve(overlap_curve);\n      foreach (var intersection_point in intersection_points)\n        doc.Objects.AddPoint(intersection_point);\n\n      RhinoApp.WriteLine(\"{0} overlap curves, and {1} intersection points\", overlap_curves.Length, intersection_points.Length);\n      doc.Views.Redraw();\n\n      return Result.Success;\n    }\n  }\n}",
    "members": [
      ["Rhino.Geometry.Intersect.Intersection", "static CurveIntersections CurveSurface(Curve curve, Surface surface, double tolerance, double overlapTolerance)"],
      ["Rhino.Geometry.Intersect.IntersectionEvent", "bool IsOverlap"],
      ["Rhino.DocObjects.Tables.ObjectTable", "int Select(IEnumerable<Guid> objectIds)"]
    ]
  },
  {
    "name": "Customgeometryfilter.cs",
    "code": "using Rhino;\nusing Rhino.Geometry;\nusing Rhino.Commands;\nusing Rhino.Input.Custom;\nusing Rhino.DocObjects;\n\nnamespace examples_cs\n{\n  public class CustomGeometryFilterCommand : Command\n  {\n    private double m_tolerance;\n    public override string EnglishName { get { return \"csCustomGeometryFilter\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      m_tolerance = doc.ModelAbsoluteTolerance;\n      \n      // only use a custom geometry filter if no simpler filter does the job\n\n      // only curves\n      var gc = new GetObject();\n      gc.SetCommandPrompt(\"select curve\");\n      gc.GeometryFilter = ObjectType.Curve;\n      gc.DisablePreSelect();\n      gc.SubObjectSelect = false;\n      gc.Get();\n      if (gc.CommandResult() != Result.Success)\n        return gc.CommandResult();\n      if (null == gc.Object(0).Curve())\n        return Result.Failure;\n      Rhino.RhinoApp.WriteLine(\"curve was selected\");\n\n      // only closed curves\n      var gcc = new GetObject();\n      gcc.SetCommandPrompt(\"select closed curve\");\n      gcc.GeometryFilter = ObjectType.Curve;\n      gcc.GeometryAttributeFilter = GeometryAttributeFilter.ClosedCurve;\n      gcc.DisablePreSelect();\n      gcc.SubObjectSelect = false;\n      gcc.Get();\n      if (gcc.CommandResult() != Result.Success)\n        return gcc.CommandResult();\n      if (null == gcc.Object(0).Curve())\n        return Result.Failure;\n      Rhino.RhinoApp.WriteLine(\"closed curve was selected\");\n\n      // only circles with a radius of 10\n      var gcc10 = new GetObject();\n      gcc10.SetCommandPrompt(\"select circle with radius of 10\");\n      gc.GeometryFilter = ObjectType.Curve;\n      gcc10.SetCustomGeometryFilter(CircleWithRadiusOf10GeometryFilter); // custom geometry filter\n      gcc10.DisablePreSelect();\n      gcc10.SubObjectSelect = false;\n      gcc10.Get();\n      if (gcc10.CommandResult() != Result.Success)\n        return gcc10.CommandResult();\n      if (null == gcc10.Object(0).Curve())\n        return Result.Failure;\n      RhinoApp.WriteLine(\"circle with radius of 10 was selected\");\n\n      return Result.Success;\n    }\n\n    private bool CircleWithRadiusOf10GeometryFilter (Rhino.DocObjects.RhinoObject rhObject, GeometryBase geometry,\n      ComponentIndex componentIndex)\n    {\n      bool is_circle_with_radius_of10 = false;\n      Circle circle;\n      if (geometry is Curve && (geometry as Curve).TryGetCircle(out circle))\n        is_circle_with_radius_of10 = circle.Radius <= 10.0 + m_tolerance && circle.Radius >= 10.0 - m_tolerance;\n      return is_circle_with_radius_of10;\n    }\n  }\n}\n",
    "members": [
      ["Rhino.Geometry.Curve", "bool TryGetCircle(out Circle circle)"],
      ["Rhino.Input.Custom.GetObject", "void SetCustomGeometryFilter(GetObjectGeometryFilter filter)"]
    ]
  },
  {
    "name": "Customundo.cs",
    "code": "using System;\nusing System.Runtime.InteropServices;\nusing Rhino;\n\n[Guid(\"954B8E21-51F2-4115-BD6B-DE67EE874C74\")]\npublic class ex_customundoCommand : Rhino.Commands.Command\n{\n  public override string EnglishName { get { return \"cs_CustomUndoCommand\"; } }\n\n  double MyFavoriteNumber { get; set; }\n\n  protected override Rhino.Commands.Result RunCommand(RhinoDoc doc, Rhino.Commands.RunMode mode)\n  {\n    // Rhino automatically sets up an undo record when a command is run,\n    // but... the undo record is not saved if nothing changes in the\n    // document (objects added/deleted, layers changed,...)\n    //\n    // If we have a command that doesn't change things in the document,\n    // but we want to have our own custom undo called then we need to do\n    // a little extra work\n\n    double d = MyFavoriteNumber;\n    if (Rhino.Input.RhinoGet.GetNumber(\"Favorite number\", true, ref d) == Rhino.Commands.Result.Success)\n    {\n      double current_value = MyFavoriteNumber;\n      doc.AddCustomUndoEvent(\"Favorite Number\", OnUndoFavoriteNumber, current_value);\n      MyFavoriteNumber = d;\n    }\n    return Rhino.Commands.Result.Success;\n  }\n\n  // event handler for custom undo\n  void OnUndoFavoriteNumber(object sender, Rhino.Commands.CustomUndoEventArgs e)\n  {\n    // !!!!!!!!!!\n    // NEVER change any setting in the Rhino document or application.  Rhino\n    // handles ALL changes to the application and document and you will break\n    // the Undo/Redo commands if you make any changes to the application or\n    // document. This is meant only for your own private plug-in data\n    // !!!!!!!!!!\n\n    // This function can be called either by undo or redo\n    // In order to get redo to work, add another custom undo event with the\n    // current value.  If you don't want redo to work, just skip adding\n    // a custom undo event here\n    double current_value = MyFavoriteNumber;\n    e.Document.AddCustomUndoEvent(\"Favorite Number\", OnUndoFavoriteNumber, current_value);\n\n    double old_value = (double)e.Tag;\n    RhinoApp.WriteLine(\"Going back to your favorite = {0}\", old_value);\n    MyFavoriteNumber = old_value;\n  }\n}\n",
    "members": [
      ["Rhino.RhinoDoc", "bool AddCustomUndoEvent(string description, EventHandler<CustomUndoEventArgs> handler, object tag)"]
    ]
  },
  {
    "name": "Dimstyle.cs",
    "code": "using Rhino;\nusing Rhino.DocObjects;\nusing Rhino.Commands;\nusing Rhino.Geometry;\n\nnamespace examples_cs\n{\n  public class ChangeDimensionStyleCommand : Rhino.Commands.Command\n  {\n    public override string EnglishName\n    {\n      get { return \"csChangeDimensionStyle\"; }\n    }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      foreach (var rhino_object in doc.Objects.GetObjectList(ObjectType.Annotation))\n      {\n        var annotation_object = rhino_object as AnnotationObjectBase;\n        if (annotation_object == null) continue;\n\n        var annotation = annotation_object.Geometry as AnnotationBase;\n        if (annotation == null) continue;\n\n        if (annotation.Index == doc.DimStyles.CurrentDimensionStyleIndex) continue;\n\n        annotation.Index = doc.DimStyles.CurrentDimensionStyleIndex;\n        annotation_object.CommitChanges();\n      }\n\n      doc.Views.Redraw();\n\n      return Result.Success;\n    }\n  }\n}",
    "members": [
      ["Rhino.RhinoDoc", "DimStyleTable DimStyles"],
      ["Rhino.DocObjects.Tables.DimStyleTable", "int CurrentIndex"],
      ["Rhino.DocObjects.Tables.ObjectTable", "IEnumerable<RhinoObject> GetObjectList(Type typeFilter)"]
    ]
  },
  {
    "name": "Displayorder.cs",
    "code": "using System.Collections.Generic;\nusing System.Drawing;\nusing System.Linq;\nusing Rhino;\nusing Rhino.Commands;\nusing Rhino.Display;\nusing Rhino.Geometry;\nusing Rhino.Input;\nusing Rhino.DocObjects;\n\nnamespace examples_cs\n{\n  public class DisplayOrderCommand : Command\n  {\n    public override string EnglishName { get { return \"csDisplayOrder\"; } }\n\n    private List<RhinoObject> m_line_objects = new List<RhinoObject>(); \n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      // make lines thick so draw order can be easily seen\n      var dm = DisplayModeDescription.GetDisplayModes().Single(x => x.EnglishName == \"Wireframe\");\n      var original_thikcness = dm.DisplayAttributes.CurveThickness;\n      dm.DisplayAttributes.CurveThickness = 10;\n      DisplayModeDescription.UpdateDisplayMode(dm);\n\n      AddLine(Point3d.Origin, new Point3d(10,10,0), Color.Red, doc);\n      AddLine(new Point3d(10,0,0), new Point3d(0,10,0), Color.Blue, doc);\n      AddLine(new Point3d(8,0,0), new Point3d(8,10,0), Color.Green, doc);\n      AddLine(new Point3d(0,3,0), new Point3d(10,3,0), Color.Yellow, doc);\n      doc.Views.Redraw();\n      Pause(\"draw order: 1st line drawn in front, last line drawn in the back.  Any key to continue ...\");\n\n      //all objects have a DisplayOrder of 0 by default so changing it to 1 moves it to the front.  Here we move the 2nd line (blue) to the front\n      m_line_objects[1].Attributes.DisplayOrder = 1;\n      m_line_objects[1].CommitChanges();\n      doc.Views.Redraw();\n      Pause(\"Second (blue) line now in front.  Any key to continue ...\");\n\n      for (int i = 0; i < m_line_objects.Count; i++)\n      {\n        m_line_objects[i].Attributes.DisplayOrder = i;\n        m_line_objects[i].CommitChanges();\n      }\n      doc.Views.Redraw();\n      Pause(\"Reverse order of original lines, i.e., Yellow 1st and Red last.  Any key to continue ...\");\n\n      // restore original line thickness\n      dm.DisplayAttributes.CurveThickness = original_thikcness;\n      DisplayModeDescription.UpdateDisplayMode(dm);\n\n      doc.Views.Redraw();\n      return Result.Success;\n    }\n\n    private void Pause(string msg)\n    {\n      ObjRef obj_ref;\n      var rc = RhinoGet.GetOneObject(msg, true, ObjectType.AnyObject, out obj_ref);\n    }\n\n    private void AddLine(Point3d from, Point3d to, Color color, RhinoDoc doc)\n    {\n      var guid = doc.Objects.AddLine(from, to);\n      var obj = doc.Objects.Find(guid);\n      m_line_objects.Add(obj);\n      obj.Attributes.ObjectColor = color;\n      obj.Attributes.ColorSource = ObjectColorSource.ColorFromObject;\n      obj.CommitChanges();\n    }\n  }\n}",
    "members": [
      ["Rhino.DocObjects.ObjectAttributes", "int DisplayOrder"]
    ]
  },
  {
    "name": "Displayprecision.cs",
    "code": "using Rhino;\nusing Rhino.Input.Custom;\nusing Rhino.Commands;\n\nnamespace examples_cs\n{\n  public class DisplayPrecisionCommand : Command\n  {\n    public override string EnglishName { get { return \"csDisplayPrecision\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      var gi = new GetInteger();\n      gi.SetCommandPrompt(\"New display precision\");\n      gi.SetDefaultInteger(doc.ModelDistanceDisplayPrecision);\n      gi.SetLowerLimit(0, false);\n      gi.SetUpperLimit(7, false);\n      gi.Get();\n      if (gi.CommandResult() != Result.Success)\n        return gi.CommandResult();\n      var distance_display_precision = gi.Number();\n\n      if (distance_display_precision != doc.ModelDistanceDisplayPrecision)\n        doc.ModelDistanceDisplayPrecision = distance_display_precision;\n\n      return Result.Success;\n    }\n  }\n}",
    "members": [
      ["Rhino.RhinoDoc", "int ModelDistanceDisplayPrecision"]
    ]
  },
  {
    "name": "Dividebylength.cs",
    "code": "using Rhino.DocObjects;\n\npartial class Examples\n{\n  public static Rhino.Commands.Result DivideByLengthPoints(Rhino.RhinoDoc doc)\n  {\n    const ObjectType filter = Rhino.DocObjects.ObjectType.Curve; \n    Rhino.DocObjects.ObjRef objref;\n    Rhino.Commands.Result rc = Rhino.Input.RhinoGet.GetOneObject(\"Select curve to divide\", false, filter, out objref);\n    if (rc != Rhino.Commands.Result.Success || objref == null)\n      return rc;\n\n    Rhino.Geometry.Curve crv = objref.Curve();\n    if (crv == null || crv.IsShort(Rhino.RhinoMath.ZeroTolerance))\n      return Rhino.Commands.Result.Failure;\n\n    double crv_length = crv.GetLength();\n    string s = string.Format(\"Curve length is {0:f3}. Segment length\", crv_length);\n\n    double seg_length = crv_length / 2.0;\n    rc = Rhino.Input.RhinoGet.GetNumber(s, false, ref seg_length, 0, crv_length);\n    if (rc != Rhino.Commands.Result.Success)\n      return rc;\n\n    Rhino.Geometry.Point3d[] points;\n    crv.DivideByLength(seg_length, true, out points);\n    if (points == null)\n      return Rhino.Commands.Result.Failure;\n\n    foreach (Rhino.Geometry.Point3d point in points)\n      doc.Objects.AddPoint(point);\n\n    doc.Views.Redraw();\n    return Rhino.Commands.Result.Success;\n  }\n}\n",
    "members": [
      ["Rhino.Geometry.Curve", "static Curve[] JoinCurves(IEnumerable<Curve> inputCurves, double joinTolerance)"],
      ["Rhino.Geometry.Curve", "double[] DivideByLength(double segmentLength, bool includeEnds)"],
      ["Rhino.Geometry.Curve", "double[] DivideByLength(double segmentLength, bool includeEnds, bool reverse)"],
      ["Rhino.Geometry.Curve", "double[] DivideByLength(double segmentLength, bool includeEnds, bool reverse, out Point3d[] points)"],
      ["Rhino.Geometry.Curve", "double[] DivideByLength(double segmentLength, bool includeEnds, out Point3d[] points)"],
      ["Rhino.Geometry.Curve", "bool IsShort(double tolerance)"],
      ["Rhino.Input.RhinoGet", "static Result GetNumber(string prompt, bool acceptNothing, ref double outputNumber)"],
      ["Rhino.Input.RhinoGet", "static Result GetNumber(string prompt, bool acceptNothing, ref double outputNumber, double lowerLimit, double upperLimit)"],
      ["Rhino.Input.RhinoGet", "static Result GetOneObject(string prompt, bool acceptNothing, ObjectType filter, out ObjRef rhObject)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddPoint(Point3d point)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddPoint(Point3f point)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "bool Select(Guid objectId)"]
    ]
  },
  {
    "name": "Drawstring.cs",
    "code": "using Rhino;\nusing Rhino.DocObjects;\nusing Rhino.Geometry;\nusing Rhino.Commands;\nusing Rhino.Input.Custom;\n\nnamespace examples_cs\n{\n  public class DrawStringCommand : Command\n  {\n    public override string EnglishName { get { return \"csDrawString\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      var gp = new GetDrawStringPoint();\n      gp.SetCommandPrompt(\"Point\");\n      gp.Get();\n      return gp.CommandResult();\n    }\n  }\n\n  public class GetDrawStringPoint : GetPoint\n  {\n    protected override void OnDynamicDraw(GetPointDrawEventArgs e)\n    {\n      base.OnDynamicDraw(e);\n      var xform = e.Viewport.GetTransform(CoordinateSystem.World, CoordinateSystem.Screen);\n      var current_point = e.CurrentPoint;\n      current_point.Transform(xform);\n      var screen_point = new Point2d(current_point.X, current_point.Y);\n      var msg = string.Format(\"screen {0:F}, {1:F}\", current_point.X, current_point.Y);\n      e.Display.Draw2dText(msg, System.Drawing.Color.Blue, screen_point, false);\n    }\n  }\n}",
    "members": [
      ["Rhino.Display.DisplayPipeline", "void Draw2dText(string text, Color color, Point2d screenCoordinate, bool middleJustified)"]
    ]
  },
  {
    "name": "Dupborder.cs",
    "code": "using System;\nusing Rhino.DocObjects;\n\npartial class Examples\n{\n  public static Rhino.Commands.Result DupBorder(Rhino.RhinoDoc doc)\n  {\n    const ObjectType filter = Rhino.DocObjects.ObjectType.Surface | Rhino.DocObjects.ObjectType.PolysrfFilter;\n    Rhino.DocObjects.ObjRef objref;\n    Rhino.Commands.Result rc = Rhino.Input.RhinoGet.GetOneObject(\"Select surface or polysurface\", false, filter, out objref);\n    if (rc != Rhino.Commands.Result.Success || objref == null)\n      return rc;\n\n    Rhino.DocObjects.RhinoObject rhobj = objref.Object();\n    Rhino.Geometry.Brep brep = objref.Brep();\n    if (rhobj == null || brep == null)\n      return Rhino.Commands.Result.Failure;\n\n    rhobj.Select(false);\n    Rhino.Geometry.Curve[] curves = brep.DuplicateEdgeCurves(true);\n    double tol = doc.ModelAbsoluteTolerance * 2.1;\n    curves = Rhino.Geometry.Curve.JoinCurves(curves, tol);\n    for (int i = 0; i < curves.Length; i++)\n    {\n      Guid id = doc.Objects.AddCurve(curves[i]);\n      doc.Objects.Select(id);\n    }\n    doc.Views.Redraw();\n    return Rhino.Commands.Result.Success;\n  }\n}\n",
    "members": [
      ["Rhino.Geometry.Brep", "Curve[] DuplicateEdgeCurves(bool nakedOnly)"]
    ]
  },
  {
    "name": "Duplicateobject.cs",
    "code": "using System;\nusing Rhino;\nusing Rhino.Commands;\nusing Rhino.DocObjects;\nusing Rhino.Input;\n\nnamespace examples_cs\n{\n  public class DuplicateObjectCommand : Command\n  {\n    public override string EnglishName { get { return \"csDuplicateObject\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      ObjRef obj_ref;\n      var rc = RhinoGet.GetOneObject(\"Select object to duplicate\", false, ObjectType.AnyObject, out obj_ref);\n      if (rc != Result.Success)\n        return rc;\n      var rhino_object = obj_ref.Object();\n\n      var geometry_base = rhino_object.DuplicateGeometry();\n      if (geometry_base != null)\n        if (doc.Objects.Add(geometry_base) != Guid.Empty)\n          doc.Views.Redraw();\n\n      return Result.Success;\n    }\n  }\n}",
    "members": [
      ["Rhino.DocObjects.RhinoObject", "GeometryBase DuplicateGeometry()"]
    ]
  },
  {
    "name": "Dupmeshboundary.cs",
    "code": "using Rhino;\nusing Rhino.Commands;\nusing Rhino.Input.Custom;\nusing Rhino.DocObjects;\n\nnamespace examples_cs\n{\n  public class DupMeshBoundaryCommand : Command\n  {\n    public override string EnglishName { get { return \"csDupMeshBoundary\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      var gm = new GetObject();\n      gm.SetCommandPrompt(\"Select open mesh\");\n      gm.GeometryFilter = ObjectType.Mesh;\n      gm.GeometryAttributeFilter = GeometryAttributeFilter.OpenMesh;\n      gm.Get();\n      if (gm.CommandResult() != Result.Success)\n        return gm.CommandResult();\n      var mesh = gm.Object(0).Mesh();\n      if (mesh == null)\n        return Result.Failure;\n\n      var polylines = mesh.GetNakedEdges();\n      foreach (var polyline in polylines)\n      {\n        doc.Objects.AddPolyline(polyline);\n      }\n\n      return Result.Success;\n    }\n  }\n}",
    "members": [
      ["Rhino.Geometry.Mesh", "Polyline[] GetNakedEdges()"]
    ]
  },
  {
    "name": "Edgesrf.cs",
    "code": "using System.Linq;\nusing Rhino;\nusing Rhino.Commands;\nusing Rhino.DocObjects;\nusing Rhino.Geometry;\nusing Rhino.Input.Custom;\n\nnamespace examples_cs\n{\n  public class EdgeSrfCommand : Command\n  {\n    public override string EnglishName { get { return \"csEdgeSrf\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      var go = new GetObject();\n      go.SetCommandPrompt(\"Select 2, 3, or 4 open curves\");\n      go.GeometryFilter = ObjectType.Curve;\n      go.GeometryAttributeFilter = GeometryAttributeFilter.OpenCurve;\n      go.GetMultiple(2, 4);\n      if (go.CommandResult() != Result.Success)\n        return go.CommandResult();\n\n      var curves = go.Objects().Select(o => o.Curve());\n\n      var brep = Brep.CreateEdgeSurface(curves);\n\n      if (brep != null)\n      {\n        doc.Objects.AddBrep(brep);\n        doc.Views.Redraw();\n      }\n\n      return Result.Success;\n    }\n  }\n}",
    "members": [
      ["Rhino.Geometry.Brep", "static Brep CreateEdgeSurface(IEnumerable<Curve> curves)"]
    ]
  },
  {
    "name": "Elevation.cs",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Rhino;\nusing Rhino.Commands;\nusing Rhino.Geometry;\nusing Rhino.Geometry.Intersect;\nusing Rhino.Input;\nusing Rhino.Input.Custom;\nusing Rhino.DocObjects;\n\nnamespace examples_cs\n{\n  public class FurthestZOnSurfaceCommand : Command\n  {\n    public override string EnglishName { get { return \"csFurthestZOnSurfaceGivenXY\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      #region user input\n      // select a surface\n      var gs = new GetObject();\n      gs.SetCommandPrompt(\"select surface\");\n      gs.GeometryFilter = ObjectType.Surface;\n      gs.DisablePreSelect();\n      gs.SubObjectSelect = false;\n      gs.Get();\n      if (gs.CommandResult() != Result.Success)\n        return gs.CommandResult();\n      // get the brep\n      var brep = gs.Object(0).Brep();\n      if (brep == null)\n        return Result.Failure;\n\n      // get X and Y\n      double x = 0.0, y = 0.0;\n      var rc = RhinoGet.GetNumber(\"value of X coordinate\", true, ref x);\n      if (rc != Result.Success)\n        return rc;\n      rc = RhinoGet.GetNumber(\"value of Y coordinate\", true, ref y);\n      if (rc != Result.Success)\n        return rc;\n      #endregion\n      \n      // an earlier version of this sample used a curve-brep intersection to find Z\n      //var maxZ = maxZIntersectionMethod(brep, x, y, doc.ModelAbsoluteTolerance);\n\n      // projecting points is another way to find Z\n      var max_z = MaxZProjectionMethod(brep, x, y, doc.ModelAbsoluteTolerance);\n\n      if (max_z != null)\n      {\n        RhinoApp.WriteLine(\"Maximum surface Z coordinate at X={0}, Y={1} is {2}\", x, y, max_z);\n        doc.Objects.AddPoint(new Point3d(x, y, max_z.Value));\n        doc.Views.Redraw();\n      }\n      else\n        RhinoApp.WriteLine(\"no maximum surface Z coordinate at X={0}, Y={1} found.\", x, y);\n\n      return Result.Success;\n    }\n\n    private static double? MaxZProjectionMethod(Brep brep, double x, double y, double tolerance)\n    {\n      double? max_z = null;\n      var breps = new List<Brep> {brep};\n      var points = new List<Point3d> {new Point3d(x, y, 0)};\n      // grab all the points projected in Z dir.  Aggregate finds furthest Z from XY plane\n      try {\n        max_z = (from pt in Intersection.ProjectPointsToBreps(breps, points, new Vector3d(0, 0, 1), tolerance) select pt.Z)\n                // Here you might be tempted to use .Max() to get the largest Z value but that doesn't work because\n                // Z might be negative.  This custom aggregate returns the max Z independant of the sign.  If it had a name\n                // it could be MaxAbs()\n                .Aggregate((z1, z2) => Math.Abs(z1) > Math.Abs(z2) ? z1 : z2);\n      } catch (InvalidOperationException) {/*Sequence contains no elements*/}\n      return max_z;\n    }\n\n    private double? MaxZIntersectionMethod(Brep brep, double x, double y, double tolerance)\n    {\n      double? max_z = null;\n\n      var bbox = brep.GetBoundingBox(true);\n      var max_dist_from_xy = (from corner in bbox.GetCorners() select corner.Z)\n                              // furthest Z from XY plane.\n                              // Here you might be tempted to use .Max() to get the largest Z value but that doesn't work because\n                              // Z might be negative.  This custom aggregate returns the max Z independant of the sign.  If it had a name\n                              // it could be MaxAbs()\n                              .Aggregate((z1, z2) => Math.Abs(z1) > Math.Abs(z2) ? z1 : z2);\n      // multiply distance by 2 to make sure line intersects completely\n      var line_curve = new LineCurve(new Point3d(x, y, 0), new Point3d(x, y, max_dist_from_xy*2));\n\n      Curve[] overlap_curves;\n      Point3d[] inter_points;\n      if (Intersection.CurveBrep(line_curve, brep, tolerance, out overlap_curves, out inter_points))\n      {\n        if (overlap_curves.Length > 0 || inter_points.Length > 0)\n        {\n          // grab all the points resulting frem the intersection. \n          //    1st set: points from overlapping curves, \n          //    2nd set: points when there was no overlap\n          //    .Aggregate: furthest Z from XY plane.\n          max_z = (from c in overlap_curves select Math.Abs(c.PointAtEnd.Z) > Math.Abs(c.PointAtStart.Z) ? c.PointAtEnd.Z : c.PointAtStart.Z)\n                  .Union\n                  (from p in inter_points select p.Z)\n                   // Here you might be tempted to use .Max() to get the largest Z value but that doesn't work because\n                   // Z might be negative.  This custom aggregate returns the max Z independant of the sign.  If it had a name\n                   // it could be MaxAbs()\n                  .Aggregate((z1, z2) => Math.Abs(z1) > Math.Abs(z2) ? z1 : z2);\n        }\n      }\n      return max_z;\n    }\n  }\n}",
    "members": [
      ["Rhino.Geometry.BoundingBox", "Point3d[] GetCorners()"],
      ["Rhino.Geometry.Intersect.Intersection", "static bool CurveBrep(Curve curve, Brep brep, double tolerance, out Curve[] overlapCurves, out Point3d[] intersectionPoints)"]
    ]
  },
  {
    "name": "Evnormal.cs",
    "code": "using Rhino;\nusing Rhino.Input.Custom;\nusing Rhino.DocObjects;\nusing Rhino.Commands;\n\nnamespace examples_cs\n{\n  public class NormalDirectionOfBrepFaceCommand : Command\n  {\n    public override string EnglishName { get { return \"csDetermineNormalDirectionOfBrepFace\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      // select a surface\n      var gs = new GetObject();\n      gs.SetCommandPrompt(\"select surface\");\n      gs.GeometryFilter = ObjectType.Surface;\n      gs.DisablePreSelect();\n      gs.SubObjectSelect = false;\n      gs.Get();\n      if (gs.CommandResult() != Result.Success)\n        return gs.CommandResult();\n      // get the selected face\n      var face = gs.Object(0).Face();\n      if (face == null)\n        return Result.Failure;\n\n      // pick a point on the surface.  Constain\n      // picking to the face.\n      var gp = new GetPoint();\n      gp.SetCommandPrompt(\"select point on surface\");\n      gp.Constrain(face, false);\n      gp.Get();\n      if (gp.CommandResult() != Result.Success)\n        return gp.CommandResult();\n\n      // get the parameters of the point on the\n      // surface that is clesest to gp.Point()\n      double u, v;\n      if (face.ClosestPoint(gp.Point(), out u, out v))\n      {\n        var direction = face.NormalAt(u, v);\n        if (face.OrientationIsReversed)\n          direction.Reverse();\n        RhinoApp.WriteLine(\n          string.Format(\n            \"Surface normal at uv({0:f},{1:f}) = ({2:f},{3:f},{4:f})\", \n            u, v, direction.X, direction.Y, direction.Z));\n      }\n      return Result.Success;\n    }\n  }\n}",
    "members": [
      ["Rhino.Geometry.BrepFace", "bool OrientationIsReversed"],
      ["Rhino.Geometry.Surface", "Vector3d NormalAt(double u, double v)"]
    ]
  },
  {
    "name": "Explodehatch.cs",
    "code": "using Rhino.DocObjects;\n\npartial class Examples\n{\n  public static Rhino.Commands.Result ExplodeHatch(Rhino.RhinoDoc doc)\n  {\n    const ObjectType filter = Rhino.DocObjects.ObjectType.Hatch;\n    Rhino.DocObjects.ObjRef objref;\n    Rhino.Commands.Result rc = Rhino.Input.RhinoGet.GetOneObject(\"Select hatch to explode\", false, filter, out objref);\n    if (rc != Rhino.Commands.Result.Success || objref == null)\n      return rc;\n\n    Rhino.Geometry.Hatch hatch = objref.Geometry() as Rhino.Geometry.Hatch;\n    if (null == hatch)\n      return Rhino.Commands.Result.Failure;\n\n    Rhino.Geometry.GeometryBase[] hatch_geom = hatch.Explode();\n    if (null != hatch_geom)\n    {\n      for (int i = 0; i < hatch_geom.Length; i++)\n      {\n        Rhino.Geometry.GeometryBase geom = hatch_geom[i];\n        if (null != geom)\n        {\n          switch (geom.ObjectType)\n          {\n            case Rhino.DocObjects.ObjectType.Point:\n              {\n                Rhino.Geometry.Point point = geom as Rhino.Geometry.Point;\n                if (null != point)\n                  doc.Objects.AddPoint(point.Location);\n              }\n              break;\n            case Rhino.DocObjects.ObjectType.Curve:\n              {\n                Rhino.Geometry.Curve curve = geom as Rhino.Geometry.Curve;\n                if (null != curve)\n                  doc.Objects.AddCurve(curve);\n              }\n              break;\n            case Rhino.DocObjects.ObjectType.Brep:\n              {\n                Rhino.Geometry.Brep brep = geom as Rhino.Geometry.Brep;\n                if (null != brep)\n                  doc.Objects.AddBrep(brep);\n              }\n              break;\n          }\n        }\n      }\n    }\n\n    return Rhino.Commands.Result.Success;\n  }\n}\n",
    "members": [
      ["Rhino.Geometry.Hatch", "GeometryBase[] Explode()"]
    ]
  },
  {
    "name": "Extendcurve.cs",
    "code": "using System.Linq;\nusing Rhino;\nusing Rhino.Geometry;\nusing Rhino.DocObjects;\nusing Rhino.Commands;\nusing Rhino.Input;\nusing Rhino.Input.Custom;\n\nnamespace examples_cs\n{\n  public class ExtendCurveCommand : Command\n  {\n    public override string EnglishName { get { return \"csExtendCurve\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      ObjRef[] boundary_obj_refs;\n      var rc = RhinoGet.GetMultipleObjects(\"Select boundary objects\", false, ObjectType.AnyObject, out boundary_obj_refs);\n      if (rc != Result.Success)\n        return rc;\n      if (boundary_obj_refs == null || boundary_obj_refs.Length == 0)\n        return Result.Nothing;\n\n      var gc = new GetObject();\n      gc.SetCommandPrompt(\"Select curve to extend\");\n      gc.GeometryFilter = ObjectType.Curve;\n      gc.GeometryAttributeFilter = GeometryAttributeFilter.OpenCurve;\n      gc.Get();\n      if (gc.CommandResult() != Result.Success)\n        return gc.CommandResult();\n      var curve_obj_ref = gc.Object(0);\n\n      var curve = curve_obj_ref.Curve();\n      if (curve == null) return Result.Failure;\n      double t;\n      if (!curve.ClosestPoint(curve_obj_ref.SelectionPoint(), out t))\n        return Result.Failure;\n      var curve_end = t <= curve.Domain.Mid ? CurveEnd.Start : CurveEnd.End;\n\n      var geometry = boundary_obj_refs.Select(obj=> obj.Geometry());\n      var extended_curve = curve.Extend(curve_end, CurveExtensionStyle.Line, geometry);\n      if (extended_curve != null && extended_curve.IsValid)\n      {\n        if (!doc.Objects.Replace(curve_obj_ref.ObjectId, extended_curve))\n          return Result.Failure;\n        doc.Views.Redraw();\n      }\n      else\n      {\n        RhinoApp.WriteLine(\"No boundary object was intersected so curve not extended\");\n        return Result.Nothing;\n      }\n\n      return Result.Success;\n    }\n  }\n}",
    "members": [
      ["Rhino.Geometry.Curve", "Curve Extend(CurveEnd side, CurveExtensionStyle style, IEnumerable<GeometryBase> geometry)"],
      ["Rhino.Geometry.Interval", "double Mid"]
    ]
  },
  {
    "name": "Extractisocurve.cs",
    "code": "using Rhino;\nusing Rhino.DocObjects;\nusing Rhino.Commands;\nusing Rhino.Input;\nusing Rhino.Input.Custom;\nusing Rhino.Geometry;\n\nnamespace examples_cs\n{\n  public class ExtractIsocurveCommand : Rhino.Commands.Command\n  {\n    public override string EnglishName\n    {\n      get { return \"csExtractIsocurve\"; }\n    }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      ObjRef obj_ref;\n      var rc = RhinoGet.GetOneObject(\"Select surface\", false, ObjectType.Surface, out obj_ref);\n      if (rc != Result.Success || obj_ref == null)\n        return rc;\n      var surface = obj_ref.Surface();\n\n      var gp = new GetPoint();\n      gp.SetCommandPrompt(\"Point on surface\");\n      gp.Constrain(surface, false);\n      var option_toggle = new OptionToggle(false, \"U\", \"V\");\n      gp.AddOptionToggle(\"Direction\", ref option_toggle);\n      Point3d point = Point3d.Unset;\n      while (true)\n      {\n        var grc = gp.Get();\n        if (grc == GetResult.Option)\n          continue;\n        else if (grc == GetResult.Point)\n        {\n          point = gp.Point();\n          break;\n        }\n        else\n          return Result.Nothing;\n      }\n      if (point == Point3d.Unset)\n        return Result.Nothing;\n\n      int direction = option_toggle.CurrentValue ? 1 : 0; // V : U\n      double u_parameter, v_parameter;\n      if (!surface.ClosestPoint(point, out u_parameter, out v_parameter)) return Result.Failure;\n\n      var iso_curve = surface.IsoCurve(direction, direction == 1 ? u_parameter : v_parameter);\n      if (iso_curve == null) return Result.Failure;\n\n      doc.Objects.AddCurve(iso_curve);\n      doc.Views.Redraw();\n      return Result.Success;\n    }\n  }\n}",
    "members": [
      ["Rhino.Geometry.Surface", "Curve IsoCurve(int direction, double constantParameter)"]
    ]
  },
  {
    "name": "Extractthumbnail.cs",
    "code": "using Rhino;\nusing Rhino.Commands;\nusing Rhino.Input;\nusing Rhino.Input.Custom;\nusing System;\nusing System.Windows;\nusing System.Windows.Controls;\n\nnamespace examples_cs\n{\n  public class ExtractThumbnailCommand : Command\n  {\n    public override string EnglishName { get { return \"csExtractThumbnail\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      var gf = RhinoGet.GetFileName(GetFileNameMode.OpenImage, \"*.3dm\", \"select file\", null);\n      if (gf == string.Empty || !System.IO.File.Exists(gf))\n        return Result.Cancel;\n\n      var bitmap = Rhino.FileIO.File3dm.ReadPreviewImage(gf);\n      // convert System.Drawing.Bitmap to BitmapSource\n      var image_source = System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap(bitmap.GetHbitmap(), IntPtr.Zero,\n        Int32Rect.Empty, System.Windows.Media.Imaging.BitmapSizeOptions.FromEmptyOptions());\n\n      // show in WPF window\n      var window = new Window();\n      var image = new Image {Source = image_source};\n      window.Content = image;\n      window.Show();\n\n      return Result.Success;\n    }\n  }\n}",
    "members": [
      ["Rhino.FileIO.File3dm", "static System.Drawing.Bitmap ReadPreviewImage(string path)"],
      ["Rhino.Input.RhinoGet", "static string GetFileName(GetFileNameMode mode, string defaultName, string title, object parent)"],
      ["Rhino.Input.RhinoGet", "static string GetFileName(GetFileNameMode mode, string defaultName, string title, object parent, BitmapFileTypes fileTypes)"]
    ]
  },
  {
    "name": "Filletcurves.cs",
    "code": "using Rhino;\nusing Rhino.Commands;\nusing Rhino.Geometry;\nusing Rhino.Input;\nusing Rhino.DocObjects;\nusing Rhino.Input.Custom;\n\nnamespace examples_cs\n{\n  public class FilletCurvesCommand : Command\n  {\n    public override string EnglishName { get { return \"csFilletCurves\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      var gc1 = new GetObject();\n      gc1.DisablePreSelect();\n      gc1.SetCommandPrompt(\"Select first curve to fillet (close to the end you want to fillet)\");\n      gc1.GeometryFilter = ObjectType.Curve;\n      gc1.GeometryAttributeFilter = GeometryAttributeFilter.OpenCurve;\n      gc1.Get();\n      if (gc1.CommandResult() != Result.Success)\n        return gc1.CommandResult();\n      var curve1_obj_ref = gc1.Object(0);\n      var curve1 = curve1_obj_ref.Curve();\n      if (curve1 == null) return Result.Failure;\n      var curve1_point_near_end = curve1_obj_ref.SelectionPoint();\n      if (curve1_point_near_end == Point3d.Unset)\n        return Result.Failure;\n\n      var gc2 = new GetObject();\n      gc2.DisablePreSelect();\n      gc2.SetCommandPrompt(\"Select second curve to fillet (close to the end you want to fillet)\");\n      gc2.GeometryFilter = ObjectType.Curve;\n      gc2.GeometryAttributeFilter = GeometryAttributeFilter.OpenCurve;\n      gc2.Get();\n      if (gc2.CommandResult() != Result.Success)\n        return gc2.CommandResult();\n      var curve2_obj_ref = gc2.Object(0);\n      var curve2 = curve2_obj_ref.Curve();\n      if (curve2 == null) return Result.Failure;\n      var curve2_point_near_end = curve2_obj_ref.SelectionPoint();\n      if (curve2_point_near_end == Point3d.Unset)\n        return Result.Failure;\n\n      double radius = 0;\n      var rc = RhinoGet.GetNumber(\"fillet radius\", false, ref radius);\n      if (rc != Result.Success) return rc;\n\n      var join = false;\n      var trim = true;\n      var arc_extension = true;\n      var fillet_curves = Curve.CreateFilletCurves(curve1, curve1_point_near_end, curve2, curve2_point_near_end, radius,\n        join, trim, arc_extension, doc.ModelAbsoluteTolerance, doc.ModelAngleToleranceDegrees);\n      if (fillet_curves == null /*|| fillet_curves.Length != 3*/)\n        return Result.Failure;\n\n      foreach(var fillet_curve in fillet_curves)\n        doc.Objects.AddCurve(fillet_curve);\n      doc.Views.Redraw();\n      return rc;\n    }\n  }\n}",
    "members": [
      ["Rhino.Geometry.Curve", "static Curve[] CreateFilletCurves(Curve curve0, Point3d point0, Curve curve1, Point3d point1, double radius, bool join, bool trim, bool arcExtension, double tolerance, double angleTolerance)"]
    ]
  },
  {
    "name": "Findobjectsbyname.cs",
    "code": "using System;\n\npartial class Examples\n{\n  public static Rhino.Commands.Result FindObjectsByName(Rhino.RhinoDoc doc)\n  {\n    const string name = \"abc\";\n    Rhino.DocObjects.ObjectEnumeratorSettings settings = new Rhino.DocObjects.ObjectEnumeratorSettings();\n    settings.NameFilter = name;\n    System.Collections.Generic.List<Guid> ids = new System.Collections.Generic.List<Guid>();\n    foreach (Rhino.DocObjects.RhinoObject rhObj in doc.Objects.GetObjectList(settings))\n      ids.Add(rhObj.Id);\n\n    if (ids.Count == 0)\n    {\n      Rhino.RhinoApp.WriteLine(\"No objects with the name \" + name);\n      return Rhino.Commands.Result.Failure;\n    }\n\n    Rhino.RhinoApp.WriteLine(\"Found {0} objects\", ids.Count);\n    foreach (Guid id in ids)\n      Rhino.RhinoApp.WriteLine(\"  {0}\", id);\n\n    return Rhino.Commands.Result.Success;\n  }\n}\n",
    "members": [
      ["Rhino.DocObjects.ObjectEnumeratorSettings", "ObjectEnumeratorSettings()"],
      ["Rhino.DocObjects.ObjectEnumeratorSettings", "string NameFilter"]
    ]
  },
  {
    "name": "Getpointdynamicdraw.cs",
    "code": "using Rhino;\nusing Rhino.Geometry;\nusing Rhino.Commands;\nusing Rhino.Input.Custom;\n\nnamespace examples_cs\n{\n  public class GetPointDynamicDrawCommand : Command\n  {\n    public override string EnglishName { get { return \"csGetPointDynamicDraw\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      var gp = new GetPoint();\n      gp.SetCommandPrompt(\"Center point\");\n      gp.Get();\n      if (gp.CommandResult() != Result.Success)\n        return gp.CommandResult();\n      var center_point = gp.Point();\n      if (center_point == Point3d.Unset)\n        return Result.Failure;\n\n      var gcp = new GetCircleRadiusPoint(center_point);\n      gcp.SetCommandPrompt(\"Radius\");\n      gcp.ConstrainToConstructionPlane(false);\n      gcp.SetBasePoint(center_point, true);\n      gcp.DrawLineFromPoint(center_point, true);\n      gcp.Get();\n      if (gcp.CommandResult() != Result.Success)\n        return gcp.CommandResult();\n\n      var radius = center_point.DistanceTo(gcp.Point());\n      var cplane = doc.Views.ActiveView.ActiveViewport.ConstructionPlane();\n      doc.Objects.AddCircle(new Circle(cplane, center_point, radius));\n      doc.Views.Redraw();\n      return Result.Success;\n    }\n  }\n\n  public class GetCircleRadiusPoint : GetPoint\n  {\n    private Point3d m_center_point;\n \n    public GetCircleRadiusPoint(Point3d centerPoint)\n    {\n      m_center_point = centerPoint;\n    }\n\n    protected override void OnDynamicDraw(GetPointDrawEventArgs e)\n    {\n      base.OnDynamicDraw(e);\n      var cplane = e.RhinoDoc.Views.ActiveView.ActiveViewport.ConstructionPlane();\n      var radius = m_center_point.DistanceTo(e.CurrentPoint);\n      var circle = new Circle(cplane, m_center_point, radius);\n      e.Display.DrawCircle(circle, System.Drawing.Color.Black);\n    }\n  }\n}",
    "members": [
      ["Rhino.Display.DisplayPipeline", "void DrawCircle(Circle circle, Color color)"]
    ]
  },
  {
    "name": "Gettext.cs",
    "code": "using Rhino;\nusing Rhino.DocObjects;\nusing Rhino.Commands;\nusing Rhino.Input.Custom;\n\nnamespace examples_cs\n{\n  public class ReadDimensionTextCommand : Rhino.Commands.Command\n  {\n    public override string EnglishName\n    {\n      get { return \"csReadDimensionText\"; }\n    }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      var go = new GetObject();\n      go.SetCommandPrompt(\"Select annotation\");\n      go.GeometryFilter = ObjectType.Annotation;\n      go.Get();\n      if (go.CommandResult() != Result.Success) \n        return Result.Failure;\n      var annotation = go.Object(0).Object() as AnnotationObjectBase;\n      if (annotation == null)\n        return Result.Failure;\n\n      RhinoApp.WriteLine(\"Annotation text = {0}\", annotation.DisplayText);\n\n      return Result.Success;\n    }\n  }\n}",
    "members": [
      ["Rhino.DocObjects.AnnotationObjectBase", "string DisplayText"]
    ]
  },
  {
    "name": "Hatchcurve.cs",
    "code": "partial class Examples\n{\n  public static Rhino.Commands.Result HatchCurve(Rhino.RhinoDoc doc)\n  {\n    var go = new Rhino.Input.Custom.GetObject();\n    go.SetCommandPrompt(\"Select closed planar curve\");\n    go.GeometryFilter = Rhino.DocObjects.ObjectType.Curve;\n    go.GeometryAttributeFilter = Rhino.Input.Custom.GeometryAttributeFilter.ClosedCurve;\n    go.SubObjectSelect = false;\n    go.Get();\n    if( go.CommandResult() != Rhino.Commands.Result.Success )\n      return go.CommandResult();\n\n    var curve = go.Object(0).Curve();\n    if( curve==null || !curve.IsClosed || !curve.IsPlanar() )\n      return Rhino.Commands.Result.Failure;\n\n    string hatch_name = doc.HatchPatterns[doc.HatchPatterns.CurrentHatchPatternIndex].Name;\n    var rc = Rhino.Input.RhinoGet.GetString(\"Hatch pattern\", true, ref hatch_name);\n    if( rc!= Rhino.Commands.Result.Success )\n      return rc;\n    hatch_name = hatch_name.Trim();\n    if( string.IsNullOrWhiteSpace(hatch_name) )\n      return Rhino.Commands.Result.Nothing;\n    int index = doc.HatchPatterns.Find(hatch_name, true);\n    if( index < 0 )\n    {\n      Rhino.RhinoApp.WriteLine(\"Hatch pattern does not exist.\");\n      return Rhino.Commands.Result.Nothing;\n    }\n\n    var hatches = Rhino.Geometry.Hatch.Create( curve, index, 0, 1);\n    for( int i=0; i<hatches.Length; i++ )\n      doc.Objects.AddHatch(hatches[i]);\n    if( hatches.Length>0 )\n      doc.Views.Redraw();\n    return Rhino.Commands.Result.Success;\n  }\n}\n",
    "members": [
      ["Rhino.RhinoDoc", "HatchPatternTable HatchPatterns"],
      ["Rhino.Geometry.Hatch", "static Hatch[] Create(Curve curve, int hatchPatternIndex, double rotationRadians, double scale)"],
      ["Rhino.Geometry.Hatch", "static Hatch[] Create(Curve curve, int hatchPatternIndex, double rotationRadians, double scale, double tolerance)"],
      ["Rhino.DocObjects.ModelComponent", "string Name"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddHatch(Hatch hatch)"],
      ["Rhino.DocObjects.Tables.HatchPatternTable", "int CurrentHatchPatternIndex"],
      ["Rhino.DocObjects.Tables.HatchPatternTable", "int Find(string name, bool ignoreDeleted)"],
      ["Rhino.DocObjects.Tables.HatchPatternTable", "HatchPattern FindName(string name)"]
    ]
  },
  {
    "name": "Insertknot.cs",
    "code": "using Rhino.Commands;\nusing Rhino.DocObjects;\n\npartial class Examples\n{\n  public static Rhino.Commands.Result InsertKnot(Rhino.RhinoDoc doc)\n  {\n    const ObjectType filter = Rhino.DocObjects.ObjectType.Curve;\n    Rhino.DocObjects.ObjRef objref;\n    Result rc = Rhino.Input.RhinoGet.GetOneObject(\"Select curve for knot insertion\", false, filter, out objref);\n    if (rc != Rhino.Commands.Result.Success)\n      return rc;\n    Rhino.Geometry.Curve curve = objref.Curve();\n    if (null == curve)\n      return Rhino.Commands.Result.Failure;\n    Rhino.Geometry.NurbsCurve nurb = curve.ToNurbsCurve();\n    if (null == nurb)\n      return Rhino.Commands.Result.Failure;\n\n    Rhino.Input.Custom.GetPoint gp = new Rhino.Input.Custom.GetPoint();\n    gp.SetCommandPrompt(\"Point on curve to add knot\");\n    gp.Constrain(nurb, false);\n    gp.Get();\n    if (gp.CommandResult() == Rhino.Commands.Result.Success)\n    {\n      double t;\n      Rhino.Geometry.Curve crv = gp.PointOnCurve(out t);\n      if( crv!=null && nurb.Knots.InsertKnot(t) )\n      {\n        doc.Objects.Replace(objref, nurb);\n        doc.Views.Redraw();\n      }\n    }\n    return Rhino.Commands.Result.Success;  \n  }\n}\n",
    "members": [
      ["Rhino.Input.Custom.GetPoint", "bool Constrain(Curve curve, bool allowPickingPointOffObject)"],
      ["Rhino.Input.Custom.GetPoint", "Curve PointOnCurve(out double t)"],
      ["Rhino.Geometry.Collections.NurbsCurveKnotList", "bool InsertKnot(double value)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "bool Replace(ObjRef objref, Curve curve)"]
    ]
  },
  {
    "name": "Instancedefinitionobjects.cs",
    "code": "partial class Examples\n{\n  public static Rhino.Commands.Result InstanceDefinitionObjects(Rhino.RhinoDoc doc)\n  {\n    Rhino.DocObjects.ObjRef objref;\n    var rc = Rhino.Input.RhinoGet.GetOneObject(\"Select instance\", false, Rhino.DocObjects.ObjectType.InstanceReference, out objref);\n    if (rc != Rhino.Commands.Result.Success)\n      return rc;\n\n    var iref = objref.Object() as Rhino.DocObjects.InstanceObject;\n    if (iref != null)\n    {\n      var idef = iref.InstanceDefinition;\n      if (idef != null)\n      {\n        var rhino_objects = idef.GetObjects();\n        for (int i = 0; i < rhino_objects.Length; i++)\n          Rhino.RhinoApp.WriteLine(\"Object {0} = {1}\", i, rhino_objects[i].Id);\n      }\n    }\n    return Rhino.Commands.Result.Success;\n  }\n}\n",
    "members": [
      ["Rhino.DocObjects.InstanceObject", "InstanceDefinition InstanceDefinition"],
      ["Rhino.DocObjects.InstanceDefinition", "RhinoObject[] GetObjects()"]
    ]
  },
  {
    "name": "Intersectcurves.cs",
    "code": "partial class Examples\n{\n  public static Rhino.Commands.Result IntersectCurves(Rhino.RhinoDoc doc)\n  {\n    // Select two curves to intersect\n    var go = new Rhino.Input.Custom.GetObject();\n    go.SetCommandPrompt(\"Select two curves\");\n    go.GeometryFilter = Rhino.DocObjects.ObjectType.Curve;\n    go.GetMultiple(2, 2);\n    if (go.CommandResult() != Rhino.Commands.Result.Success)\n      return go.CommandResult();\n\n    // Validate input\n    var curveA = go.Object(0).Curve();\n    var curveB = go.Object(1).Curve();\n    if (curveA == null || curveB == null)\n      return Rhino.Commands.Result.Failure;\n\n    // Calculate the intersection\n    const double intersection_tolerance = 0.001;\n    const double overlap_tolerance = 0.0;\n    var events = Rhino.Geometry.Intersect.Intersection.CurveCurve(curveA, curveB, intersection_tolerance, overlap_tolerance);\n\n    // Process the results\n    if (events != null)\n    {\n      for (int i = 0; i < events.Count; i++)\n      {\n        var ccx_event = events[i];\n        doc.Objects.AddPoint(ccx_event.PointA);\n        if (ccx_event.PointA.DistanceTo(ccx_event.PointB) > double.Epsilon)\n        {\n          doc.Objects.AddPoint(ccx_event.PointB);\n          doc.Objects.AddLine(ccx_event.PointA, ccx_event.PointB);\n        }\n      }\n      doc.Views.Redraw();\n    }\n    return Rhino.Commands.Result.Success;\n  }\n}\n",
    "members": [
      ["Rhino.Geometry.Point3f", "double DistanceTo(Point3f other)"],
      ["Rhino.Geometry.Point3d", "double DistanceTo(Point3d other)"],
      ["Rhino.DocObjects.ObjRef", "Curve Curve()"],
      ["Rhino.Geometry.Intersect.Intersection", "static CurveIntersections CurveCurve(Curve curveA, Curve curveB, double tolerance, double overlapTolerance)"]
    ]
  },
  {
    "name": "Intersectlinecircle.cs",
    "code": "using Rhino;\nusing Rhino.Commands;\nusing Rhino.Input;\nusing Rhino.Geometry;\nusing Rhino.Geometry.Intersect;\n\nnamespace examples_cs\n{\n  public class IntersectLineCircleCommand : Command\n  {\n    public override string EnglishName { get { return \"csIntersectLineCircle\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      Circle circle;\n      var rc = RhinoGet.GetCircle(out circle);\n      if (rc != Result.Success)\n        return rc;\n      doc.Objects.AddCircle(circle);\n      doc.Views.Redraw();\n\n      Line line;\n      rc = RhinoGet.GetLine(out line);\n      if (rc != Result.Success)\n        return rc;\n      doc.Objects.AddLine(line);\n      doc.Views.Redraw();\n\n      double t1, t2;\n      Point3d point1, point2;\n      var line_circle_intersect = Intersection.LineCircle(line, circle, out t1, out point1, out t2, out point2);\n      string msg = \"\";\n      switch (line_circle_intersect) {\n        case LineCircleIntersection.None:\n          msg = \"line does not intersect circle\";\n          break;\n        case LineCircleIntersection.Single:\n          msg = string.Format(\"line intersects circle at point ({0})\", point1);\n          doc.Objects.AddPoint(point1);\n          break;\n        case LineCircleIntersection.Multiple:\n          msg = string.Format(\"line intersects circle at points ({0}) and ({1})\",\n            point1, point2);\n          doc.Objects.AddPoint(point1);\n          doc.Objects.AddPoint(point2);\n          break;\n      }\n      RhinoApp.WriteLine(msg);\n      doc.Views.Redraw();\n      return Result.Success;\n    }\n  }\n}",
    "members": [
      ["Rhino.Geometry.Intersect.Intersection", "static LineCircleIntersection LineCircle(Line line, Circle circle, out double t1, out Point3d point1, out double t2, out Point3d point2)"]
    ]
  },
  {
    "name": "Intersectlines.cs",
    "code": "using Rhino.Geometry;\n\npartial class Examples\n{\n  public static Rhino.Commands.Result IntersectLines(Rhino.RhinoDoc doc)\n  {\n    Rhino.Input.Custom.GetObject go = new Rhino.Input.Custom.GetObject();\n    go.SetCommandPrompt( \"Select lines\" );\n    go.GeometryFilter = Rhino.DocObjects.ObjectType.Curve;\n    go.GetMultiple( 2, 2);\n    if( go.CommandResult() != Rhino.Commands.Result.Success )\n      return go.CommandResult();\n    if( go.ObjectCount != 2 )\n      return Rhino.Commands.Result.Failure;\n\n    LineCurve crv0 = go.Object(0).Geometry() as LineCurve;\n    LineCurve crv1 = go.Object(1).Geometry() as LineCurve;\n    if( crv0==null || crv1==null )\n      return Rhino.Commands.Result.Failure;\n\n    Line line0 = crv0.Line;\n    Line line1 = crv1.Line;\n    Vector3d v0 = line0.Direction;\n    v0.Unitize();\n    Vector3d v1 = line1.Direction;\n    v1.Unitize();\n\n    if( v0.IsParallelTo(v1) != 0 )\n    {\n      Rhino.RhinoApp.WriteLine(\"Selected lines are parallel.\");\n      return Rhino.Commands.Result.Nothing;\n    }\n\n    double a, b;\n    if( !Rhino.Geometry.Intersect.Intersection.LineLine(line0, line1, out a, out b))\n    {\n      Rhino.RhinoApp.WriteLine(\"No intersection found.\");\n      return Rhino.Commands.Result.Nothing;\n    }\n\n    Point3d pt0 = line0.PointAt(a);\n    Point3d pt1 = line1.PointAt(b);\n    // pt0 and pt1 should be equal, so we will only add pt0 to the document\n    doc.Objects.AddPoint( pt0 );\n    doc.Views.Redraw();\n    return Rhino.Commands.Result.Success;\n  }\n}\n",
    "members": [
      ["Rhino.Geometry.Line", "Vector3d Direction"],
      ["Rhino.Geometry.Line", "Point3d PointAt(double t)"],
      ["Rhino.Geometry.Vector3d", "int IsParallelTo(Vector3d other)"],
      ["Rhino.Geometry.Intersect.Intersection", "static bool LineLine(Line lineA, Line lineB, out double a, out double b)"]
    ]
  },
  {
    "name": "Isbrepbox.cs",
    "code": "using System;\n\npartial class Examples\n{\n  public static bool IsBrepBox(Rhino.Geometry.Brep brep)\n  {\n    const double zero_tolerance = 1.0e-6; // or whatever\n    bool rc = brep.IsSolid;\n    if( rc )\n      rc = brep.Faces.Count == 6;\n\n    var N = new Rhino.Geometry.Vector3d[6];\n    for (int i = 0; rc && i < 6; i++)\n    {\n      Rhino.Geometry.Plane plane;\n      rc = brep.Faces[i].TryGetPlane(out plane, zero_tolerance);\n      if( rc )\n      {\n        N[i] = plane.ZAxis;\n        N[i].Unitize();\n      }\n    }\n \n    for (int i = 0; rc && i < 6; i++)\n    {\n      int count = 0;\n      for (int j = 0; rc && j < 6; j++)\n      {\n        double dot = Math.Abs(N[i] * N[j]);\n        if (dot <= zero_tolerance)\n          continue;\n        if (Math.Abs(dot - 1.0) <= zero_tolerance) \n          count++;\n        else\n          rc = false;\n      }\n \n      if (rc)\n      {\n        if (2 != count)\n          rc = false;\n      }\n    }\n    return rc;\n  }\n\n  public static Rhino.Commands.Result TestBrepBox(Rhino.RhinoDoc doc)\n  {\n    Rhino.DocObjects.ObjRef obj_ref;\n    var rc = Rhino.Input.RhinoGet.GetOneObject(\"Select Brep\", true, Rhino.DocObjects.ObjectType.Brep, out obj_ref);\n    if (rc == Rhino.Commands.Result.Success)\n    {\n      var brep = obj_ref.Brep();\n      if (brep != null)\n      {\n        Rhino.RhinoApp.WriteLine(IsBrepBox(brep) ? \"Yes it is a box\" : \"No it is not a box\");\n      }\n    }\n    return rc;\n  }\n}\n",
    "members": [
      ["Rhino.Geometry.Brep", "bool IsSolid"],
      ["Rhino.Geometry.Surface", "bool TryGetPlane(out Plane plane, double tolerance)"]
    ]
  },
  {
    "name": "Isocurvedensity.cs",
    "code": "partial class Examples\n{\n  public static Rhino.Commands.Result IsocurveDensity(Rhino.RhinoDoc doc)\n  {\n    Rhino.DocObjects.ObjRef objref;\n    var rc = Rhino.Input.RhinoGet.GetOneObject(\"Select surface\", false, Rhino.DocObjects.ObjectType.Surface, out objref);\n    if( rc!= Rhino.Commands.Result.Success )\n      return rc;\n\n    var brep_obj = objref.Object() as Rhino.DocObjects.BrepObject;\n    if( brep_obj!=null )\n    {\n      brep_obj.Attributes.WireDensity = 3;\n      brep_obj.CommitChanges();\n      doc.Views.Redraw();\n    }\n    return Rhino.Commands.Result.Success;\n  }\n}\n",
    "members": [
      ["Rhino.DocObjects.ObjectAttributes", "int WireDensity"]
    ]
  },
  {
    "name": "Issurfaceinplane.cs",
    "code": "using System.Linq;\nusing Rhino;\nusing Rhino.DocObjects;\nusing Rhino.Geometry;\nusing Rhino.Commands;\nusing Rhino.Input;\n\nnamespace examples_cs\n{\n  public class IsPlanarSurfaceInPlaneCommand : Command\n  {\n    public override string EnglishName { get { return \"csIsPlanarSurfaceInPlane\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      ObjRef obj_ref;\n      var rc = RhinoGet.GetOneObject(\"select surface\", true, ObjectType.Surface, out obj_ref);\n      if (rc != Result.Success)\n        return rc;\n      var surface = obj_ref.Surface();\n\n      Point3d[] corners;\n      rc = RhinoGet.GetRectangle(out corners);\n      if (rc != Result.Success)\n        return rc;\n\n      var plane = new Plane(corners[0], corners[1], corners[2]);\n\n      var is_or_isnt = \"\";\n      if (IsSurfaceInPlane(surface, plane, doc.ModelAbsoluteTolerance))\n        is_or_isnt = \" not \";\n\n      RhinoApp.WriteLine(\"Surface is{0} in plane.\", is_or_isnt);\n      return Result.Success;\n    }\n\n    private bool IsSurfaceInPlane(Surface surface, Plane plane, double tolerance)\n    {\n      if (!surface.IsPlanar(tolerance))\n        return false;\n     \n      var bbox = surface.GetBoundingBox(true);\n      return bbox.GetCorners().All(\n        corner => System.Math.Abs(plane.DistanceTo(corner)) <= tolerance);\n    }\n  }\n}",
    "members": [
      ["Rhino.Geometry.Plane", "double DistanceTo(Point3d testPoint)"],
      ["Rhino.Geometry.Surface", "bool IsPlanar()"]
    ]
  },
  {
    "name": "Leader.cs",
    "code": "using Rhino;\nusing Rhino.Geometry;\nusing Rhino.Commands;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace examples_cs\n{\n  public class LeaderCommand : Command\n  {\n    public override string EnglishName { get { return \"csLeader\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      var points = new Point3d[]\n      {\n        new Point3d(1, 1, 0),\n        new Point3d(5, 1, 0),\n        new Point3d(5, 5, 0),\n        new Point3d(9, 5, 0)\n      };\n\n      var xy_plane = Plane.WorldXY;\n\n      var points2d = new List<Point2d>();\n      foreach (var point3d in points)\n      {\n        double x, y;\n        if (xy_plane.ClosestParameter(point3d, out x, out y))\n        {\n          var point2d = new Point2d(x, y);\n          if (points2d.Count < 1 || point2d.DistanceTo(points2d.Last<Point2d>()) > RhinoMath.SqrtEpsilon)\n            points2d.Add(point2d);\n        }\n      }\n\n      doc.Objects.AddLeader(xy_plane, points2d);\n      doc.Views.Redraw();\n      return Result.Success;\n    }\n  }\n}",
    "members": [
      ["Rhino.Geometry.Point2d", "double DistanceTo(Point2d other)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddLeader(Plane plane, IEnumerable<Point2d> points)"]
    ]
  },
  {
    "name": "Locklayer.cs",
    "code": "using Rhino;\nusing Rhino.Input;\nusing Rhino.Commands;\nusing System;\nusing System.Linq;\n\nnamespace examples_cs\n{\n  public class LockLayerCommand : Command\n  {\n    public override string EnglishName { get { return \"csLockLayer\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      string layer_name = \"\";\n      var rc = RhinoGet.GetString(\"Name of layer to lock\", true, ref layer_name);\n      if (rc != Result.Success)\n        return rc;\n      if (String.IsNullOrWhiteSpace(layer_name))\n        return Result.Nothing;\n     \n      // because of sublayers it's possible that mone than one layer has the same name\n      // so simply calling doc.Layers.Find(layerName) isn't good enough.  If \"layerName\" returns\n      // more than one layer then present them to the user and let him decide.\n      var matching_layers = (from layer in doc.Layers\n                             where layer.Name == layer_name\n                             select layer).ToList<Rhino.DocObjects.Layer>();\n\n      Rhino.DocObjects.Layer layer_to_lock = null;\n      if (matching_layers.Count == 0)\n      {\n        RhinoApp.WriteLine(\"Layer '{0}' does not exist.\", layer_name);\n        return Result.Nothing;\n      }\n      else if (matching_layers.Count == 1)\n      {\n        layer_to_lock = matching_layers[0];\n      }\n      else if (matching_layers.Count > 1)\n      {\n        for (int i = 0; i < matching_layers.Count; i++)\n        {\n          RhinoApp.WriteLine(\"({0}) {1}\", i+1, matching_layers[i].FullPath.Replace(\"::\", \"->\"));\n        }\n        int selected_layer = -1;\n        rc = RhinoGet.GetInteger(\"which layer?\", true, ref selected_layer);\n        if (rc != Result.Success)\n          return rc;\n        if (selected_layer > 0 && selected_layer <= matching_layers.Count)\n          layer_to_lock = matching_layers[selected_layer - 1];\n        else return Result.Nothing;\n      }\n\n      if (layer_to_lock == null)\n        return Result.Nothing;\n\n      if (!layer_to_lock.IsLocked)\n      {\n        layer_to_lock.IsLocked = true;\n        layer_to_lock.CommitChanges();\n        return Result.Success;\n      }\n      else\n      {\n        RhinoApp.WriteLine(\"layer {0} is already locked.\", layer_to_lock.FullPath);\n        return Result.Nothing;\n      } \n    }\n  }\n}\n",
    "members": [
      ["Rhino.DocObjects.Layer", "string FullPath"],
      ["Rhino.DocObjects.Layer", "bool IsLocked"],
      ["Rhino.DocObjects.Layer", "bool CommitChanges()"]
    ]
  },
  {
    "name": "Loft.cs",
    "code": "using System.Linq;\nusing Rhino;\nusing Rhino.Input.Custom;\nusing Rhino.DocObjects;\nusing Rhino.Commands;\nusing Rhino.Geometry;\n\nnamespace examples_cs\n{\n  public class LoftCommand : Command\n  {\n    public override string EnglishName { get { return \"csLoft\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      // select curves to loft\n      var gs = new GetObject();\n      gs.SetCommandPrompt(\"select curves to loft\");\n      gs.GeometryFilter = ObjectType.Curve;\n      gs.DisablePreSelect();\n      gs.SubObjectSelect = false;\n      gs.GetMultiple(2, 0);\n      if (gs.CommandResult() != Result.Success)\n        return gs.CommandResult();\n\n      var curves = gs.Objects().Select(obj => obj.Curve()).ToList();\n\n      var breps = Brep.CreateFromLoft(curves, Point3d.Unset, Point3d.Unset, LoftType.Tight, false);\n      foreach (var brep in breps)\n        doc.Objects.AddBrep(brep);\n\n      doc.Views.Redraw();\n      return Result.Success;\n    }\n  }\n}",
    "members": [
      ["Rhino.Geometry.Brep", "static Brep[] CreateFromLoft(IEnumerable<Curve> curves, Point3d start, Point3d end, LoftType loftType, bool closed)"]
    ]
  },
  {
    "name": "Makerhinocontours.cs",
    "code": "using System;\nusing Rhino;\nusing Rhino.DocObjects;\nusing Rhino.Geometry;\nusing Rhino.Input;\nusing Rhino.Input.Custom;\nusing Rhino.Commands;\n\nnamespace examples_cs\n{\n  public class ContourCommand : Command\n  {\n    public override string EnglishName { get { return \"csContour\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      var filter = ObjectType.Surface | ObjectType.PolysrfFilter | ObjectType.Mesh;\n      ObjRef[] obj_refs;\n      var rc = RhinoGet.GetMultipleObjects(\"Select objects to contour\", false, filter, out obj_refs);\n      if (rc != Result.Success)\n        return rc;\n\n      var gp = new GetPoint();\n      gp.SetCommandPrompt(\"Contour plane base point\");\n      gp.Get();\n      if (gp.CommandResult() != Result.Success)\n        return gp.CommandResult();\n      var base_point = gp.Point();\n\n      gp.DrawLineFromPoint(base_point, true);\n      gp.SetCommandPrompt(\"Direction perpendicular to contour planes\");\n      gp.Get();\n      if (gp.CommandResult() != Result.Success)\n        return gp.CommandResult();\n      var end_point = gp.Point();\n\n      if (base_point.DistanceTo(end_point) < RhinoMath.ZeroTolerance)\n        return Result.Nothing;\n\n      double distance = 1.0;\n      rc = RhinoGet.GetNumber(\"Distance between contours\", false, ref distance);\n      if (rc != Result.Success)\n        return rc;\n\n      var interval = Math.Abs(distance);\n\n      Curve[] curves = null;\n      foreach (var obj_ref in obj_refs)\n      {\n        var geometry = obj_ref.Geometry();\n        if (geometry == null)\n          return Result.Failure;\n\n        if (geometry is Brep)\n        {\n          curves = Brep.CreateContourCurves(geometry as Brep, base_point, end_point, interval);\n        }\n        else\n        {\n          curves = Mesh.CreateContourCurves(geometry as Mesh, base_point, end_point, interval);\n        }\n\n        foreach (var curve in curves)\n        {\n          var curve_object_id = doc.Objects.AddCurve(curve);\n          doc.Objects.Select(curve_object_id);\n        }\n      }\n\n      if (curves != null)\n        doc.Views.Redraw();\n      return Result.Success;\n    }\n  }\n}",
    "members": [
      ["Rhino.Geometry.Brep", "static Curve[] CreateContourCurves(Brep brepToContour, Point3d contourStart, Point3d contourEnd, double interval)"],
      ["Rhino.Geometry.Mesh", "static Curve[] CreateContourCurves(Mesh meshToContour, Point3d contourStart, Point3d contourEnd, double interval)"]
    ]
  },
  {
    "name": "Meshdrawing.cs",
    "code": "using Rhino;\nusing Rhino.Commands;\nusing Rhino.Display;\nusing Rhino.Geometry;\nusing Rhino.Input.Custom;\nusing Rhino.DocObjects;\nusing System.Drawing;\n\nnamespace examples_cs\n{\n  public class MeshDrawingCommand : Command\n  {\n    public override string EnglishName { get { return \"csDrawMesh\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      var gs = new GetObject();\n      gs.SetCommandPrompt(\"select sphere\");\n      gs.GeometryFilter = ObjectType.Surface;\n      gs.DisablePreSelect();\n      gs.SubObjectSelect = false;\n      gs.Get();\n      if (gs.CommandResult() != Result.Success)\n        return gs.CommandResult();\n\n      Sphere sphere;\n      gs.Object(0).Surface().TryGetSphere(out sphere);\n      if (sphere.IsValid)\n      {\n        var mesh = Mesh.CreateFromSphere(sphere, 10, 10);\n        if (mesh == null)\n          return Result.Failure;\n\n        var conduit = new DrawBlueMeshConduit(mesh) {Enabled = true};\n        doc.Views.Redraw();\n\n        var in_str = \"\";\n        Rhino.Input.RhinoGet.GetString(\"press <Enter> to continue\", true, ref in_str);\n\n        conduit.Enabled = false;\n        doc.Views.Redraw();\n        return Result.Success;\n      }\n      else\n        return Result.Failure;\n    }\n  }\n\n  class DrawBlueMeshConduit : DisplayConduit\n  {\n    readonly Mesh m_mesh;\n    readonly Color m_color;\n    readonly DisplayMaterial m_material;\n    readonly BoundingBox m_bbox;\n\n    public DrawBlueMeshConduit(Mesh mesh)\n    {\n      // set up as much data as possible so we do the minimum amount of work possible inside\n      // the actual display code\n      m_mesh = mesh;\n      m_color = System.Drawing.Color.Blue;\n      m_material = new DisplayMaterial();\n      m_material.Diffuse = m_color;\n      if (m_mesh != null && m_mesh.IsValid)\n        m_bbox = m_mesh.GetBoundingBox(true);\n    }\n\n    // this is called every frame inside the drawing code so try to do as little as possible\n    // in order to not degrade display speed. Don't create new objects if you don't have to as this\n    // will incur an overhead on the heap and garbage collection.\n    protected override void CalculateBoundingBox(CalculateBoundingBoxEventArgs e)\n    {\n      base.CalculateBoundingBox(e);\n      // Since we are dynamically drawing geometry, we needed to override\n      // CalculateBoundingBox. Otherwise, there is a good chance that our\n      // dynamically drawing geometry would get clipped.\n \n      // Union the mesh's bbox with the scene's bounding box\n      e.IncludeBoundingBox(m_bbox);\n    }\n\n    protected override void PreDrawObjects(DrawEventArgs e)\n    {\n      base.PreDrawObjects(e);\n      var vp = e.Display.Viewport;\n      if (vp.DisplayMode.EnglishName.ToLower() == \"wireframe\")\n        e.Display.DrawMeshWires(m_mesh, m_color);\n      else\n        e.Display.DrawMeshShaded(m_mesh, m_material);\n    }\n  }\n}",
    "members": [
      ["Rhino.Display.DisplayPipeline", "void DrawMeshShaded(Mesh mesh, DisplayMaterial material)"],
      ["Rhino.Display.DisplayPipeline", "void DrawMeshWires(Mesh mesh, Color color)"]
    ]
  },
  {
    "name": "Meshvolume.cs",
    "code": "using Rhino;\nusing Rhino.Commands;\nusing Rhino.Input.Custom;\nusing Rhino.Geometry;\nusing Rhino.DocObjects;\n\nnamespace examples_cs\n{\n  public class MeshVolumeCommand : Command\n  {\n    public override string EnglishName { get { return \"csMeshVolume\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      var gm = new GetObject();\n      gm.SetCommandPrompt(\"Select solid meshes for volume calculation\");\n      gm.GeometryFilter = ObjectType.Mesh;\n      gm.GeometryAttributeFilter = GeometryAttributeFilter.ClosedMesh;\n      gm.SubObjectSelect = false;\n      gm.GroupSelect = true;\n      gm.GetMultiple(1, 0);\n      if (gm.CommandResult() != Result.Success)\n        return gm.CommandResult();\n\n      double volume = 0.0;\n      double volume_error = 0.0;\n      foreach (var obj_ref in gm.Objects())\n      {\n        if (obj_ref.Mesh() != null)\n        {\n          var mass_properties = VolumeMassProperties.Compute(obj_ref.Mesh());\n          if (mass_properties != null)\n          {\n            volume += mass_properties.Volume;\n            volume_error += mass_properties.VolumeError;\n          }\n        }\n      }\n\n      RhinoApp.WriteLine(\"Total volume = {0:f} (+/- {1:f})\", volume, volume_error);\n      return Result.Success;\n    }\n  }\n}",
    "members": [
      ["Rhino.Geometry.VolumeMassProperties", "double Volume"],
      ["Rhino.Geometry.VolumeMassProperties", "double VolumeError"]
    ]
  },
  {
    "name": "Modifylightcolor.cs",
    "code": "using Rhino;\nusing Rhino.DocObjects;\nusing Rhino.Commands;\nusing Rhino.Input;\nusing Rhino.UI;\n\nnamespace examples_cs\n{\n  public class ChangeLightColorCommand : Rhino.Commands.Command\n  {\n    public override string EnglishName\n    {\n      get { return \"csLightColor\"; }\n    }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      ObjRef obj_ref;\n      var rc = RhinoGet.GetOneObject(\"Select light to change color\", true,\n        ObjectType.Light, out obj_ref);\n      if (rc != Result.Success)\n        return rc;\n      var light = obj_ref.Light();\n      if (light == null)\n        return Result.Failure;\n\n      var diffuse_color = light.Diffuse;\n      if (Dialogs.ShowColorDialog(ref diffuse_color))\n      {\n        light.Diffuse = diffuse_color;\n      }\n\n      doc.Lights.Modify(obj_ref.ObjectId, light);\n      return Result.Success;\n    }\n  }\n}",
    "members": [
      ["Rhino.Geometry.Light", "Color Diffuse"],
      ["Rhino.UI.Dialogs", "static bool ShowColorDialog(ref Color color)"],
      ["Rhino.DocObjects.Tables.LightTable", "bool Modify(Guid id, Light light)"]
    ]
  },
  {
    "name": "Modifyobjectcolor.cs",
    "code": "using System.Drawing;\nusing Rhino;\nusing Rhino.DocObjects;\nusing Rhino.Geometry;\nusing Rhino.Input;\nusing Rhino.Commands;\n\nnamespace examples_cs\n{\n  public class ModifyObjectColorCommand : Command\n  {\n    public override string EnglishName { get { return \"csModifyObjectColor\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      ObjRef obj_ref;\n      var rc = RhinoGet.GetOneObject(\"Select object\", false, ObjectType.AnyObject, out obj_ref);\n      if (rc != Result.Success)\n        return rc;\n      var rhino_object = obj_ref.Object();\n      var color = rhino_object.Attributes.ObjectColor;\n      bool b = Rhino.UI.Dialogs.ShowColorDialog(ref color);\n      if (!b) return Result.Cancel;\n\n      rhino_object.Attributes.ObjectColor = color;\n      rhino_object.Attributes.ColorSource = ObjectColorSource.ColorFromObject;\n      rhino_object.CommitChanges();\n\n      // an object's color attributes can also be specified\n      // when the object is added to Rhino\n      var sphere = new Sphere(Point3d.Origin, 5.0);\n      var attributes = new ObjectAttributes();\n      attributes.ObjectColor = Color.CadetBlue;\n      attributes.ColorSource = ObjectColorSource.ColorFromObject;\n      doc.Objects.AddSphere(sphere, attributes);\n\n      doc.Views.Redraw();\n      return Result.Success;\n    }\n  }\n}",
    "members": [
      ["Rhino.DocObjects.ObjectAttributes", "ObjectColorSource ColorSource"],
      ["Rhino.DocObjects.ObjectAttributes", "Color ObjectColor"]
    ]
  },
  {
    "name": "Moveobjectstocurrentlayer.cs",
    "code": "using Rhino;\nusing Rhino.Commands;\nusing Rhino.DocObjects;\n\nnamespace examples_cs\n{\n  public class MoveSelectedObjectsToCurrentLayerCommand : Command\n  {\n    public override string EnglishName\n    {\n      get { return \"csMoveSelectedObjectsToCurrentLayer\"; }\n    }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      // all non-light objects that are selected\n      var object_enumerator_settings = new ObjectEnumeratorSettings();\n      object_enumerator_settings.IncludeLights = false;\n      object_enumerator_settings.IncludeGrips = true;\n      object_enumerator_settings.NormalObjects = true;\n      object_enumerator_settings.LockedObjects = true;\n      object_enumerator_settings.HiddenObjects = true;\n      object_enumerator_settings.ReferenceObjects = true;\n      object_enumerator_settings.SelectedObjectsFilter = true;\n      var selected_objects = doc.Objects.GetObjectList(object_enumerator_settings);\n\n      var current_layer_index = doc.Layers.CurrentLayerIndex;\n      foreach (var selected_object in selected_objects)\n      {\n        selected_object.Attributes.LayerIndex = current_layer_index;\n        selected_object.CommitChanges();\n      }\n      doc.Views.Redraw();\n      return Result.Success;\n    }\n  }\n}",
    "members": [
      ["Rhino.DocObjects.ObjectAttributes", "int LayerIndex"],
      ["Rhino.DocObjects.Tables.LayerTable", "int CurrentLayerIndex"]
    ]
  },
  {
    "name": "Nestedblock.cs",
    "code": "using System;\n\nusing Rhino;\nusing Rhino.Geometry;\n\npartial class Examples\n{\n  public static Rhino.Commands.Result AddNestedBlock(RhinoDoc doc)\n  {\n    var circle = new Circle(Point3d.Origin, 5);\n    Curve[] curveList = { new ArcCurve(circle) };\n    var circleIndex = doc.InstanceDefinitions.Add(\"Circle\", \"Circle with radius of 5\", Point3d.Origin, curveList);\n    var transform = Transform.Identity;\n    var irefId = doc.InstanceDefinitions[circleIndex].Id;\n    var iref = new InstanceReferenceGeometry(irefId, transform);\n    circle.Radius = circle.Radius * 2.0;\n    GeometryBase[] blockList = { iref, new ArcCurve(circle) };\n    var circle2Index = doc.InstanceDefinitions.Add(\"TwoCircles\", \"Nested block test\", Point3d.Origin, blockList);\n    doc.Objects.AddInstanceObject(circle2Index, transform);\n    doc.Views.Redraw();\n    return Rhino.Commands.Result.Success;\n  }\n}\n",
    "members": [
      ["Rhino.Geometry.InstanceReferenceGeometry", "InstanceReferenceGeometry(Guid instanceDefinitionId, Transform transform)"],
      ["Rhino.DocObjects.Tables.InstanceDefinitionTable", "int Add(string name, string description, Point3d basePoint, IEnumerable<GeometryBase> geometry)"]
    ]
  },
  {
    "name": "Nurbscurveincreasedegree.cs",
    "code": "using Rhino;\nusing Rhino.Commands;\nusing Rhino.Input;\nusing Rhino.DocObjects;\n\nnamespace examples_cs\n{\n  public class NurbsCurveIncreaseDegreeCommand : Command\n  {\n    public override string EnglishName { get { return \"csNurbsCrvIncreaseDegree\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      ObjRef obj_ref;\n      var rc = RhinoGet.GetOneObject(\n        \"Select curve\", false, ObjectType.Curve, out obj_ref);\n      if (rc != Result.Success) return rc;\n      if (obj_ref == null) return Result.Failure;\n      var curve = obj_ref.Curve();\n      if (curve == null) return Result.Failure;\n      var nurbs_curve = curve.ToNurbsCurve();\n\n      int new_degree = -1;\n      rc = RhinoGet.GetInteger(string.Format(\"New degree <{0}...11>\", nurbs_curve.Degree), true, ref new_degree,\n        nurbs_curve.Degree, 11);\n      if (rc != Result.Success) return rc;\n\n      rc = Result.Failure;\n      if (nurbs_curve.IncreaseDegree(new_degree))\n        if (doc.Objects.Replace(obj_ref.ObjectId, nurbs_curve))\n          rc = Result.Success;\n\n      RhinoApp.WriteLine(\"Result: {0}\", rc.ToString());\n      doc.Views.Redraw();\n      return rc;\n    }\n  }\n}",
    "members": [
      ["Rhino.Geometry.NurbsCurve", "bool IncreaseDegree(int desiredDegree)"]
    ]
  },
  {
    "name": "Nurbssurfaceincreasedegree.cs",
    "code": "using Rhino;\nusing Rhino.Commands;\nusing Rhino.Input;\nusing Rhino.DocObjects;\n\nnamespace examples_cs\n{\n  public class NurbsSurfaceIncreaseDegreeCommand : Command\n  {\n    public override string EnglishName { get { return \"csNurbsSrfIncreaseDegree\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      ObjRef obj_ref;\n      var rc = RhinoGet.GetOneObject(\n        \"Select surface\", false, ObjectType.Surface, out obj_ref);\n      if (rc != Result.Success) return rc;\n      if (obj_ref == null) return Result.Failure;\n      var surface = obj_ref.Surface();\n      if (surface == null) return Result.Failure;\n      var nurbs_surface = surface.ToNurbsSurface();\n\n      int new_u_degree = -1;\n      rc = RhinoGet.GetInteger(string.Format(\"New U degree <{0}...11>\", nurbs_surface.Degree(0)), true, ref new_u_degree,\n        nurbs_surface.Degree(0), 11);\n      if (rc != Result.Success) return rc;\n      \n      int new_v_degree = -1;\n      rc = RhinoGet.GetInteger(string.Format(\"New V degree <{0}...11>\", nurbs_surface.Degree(1)), true, ref new_v_degree,\n        nurbs_surface.Degree(1), 11);\n      if (rc != Result.Success) return rc;\n\n      rc = Result.Failure;\n      if (nurbs_surface.IncreaseDegreeU(new_u_degree))\n        if (nurbs_surface.IncreaseDegreeV(new_v_degree))\n          if (doc.Objects.Replace(obj_ref.ObjectId, nurbs_surface))\n            rc = Result.Success;\n\n      RhinoApp.WriteLine(\"Result: {0}\", rc.ToString());\n      doc.Views.Redraw();\n      return rc;\n    }\n  }\n}",
    "members": [
      ["Rhino.Geometry.NurbsSurface", "bool IncreaseDegreeU(int desiredDegree)"],
      ["Rhino.Geometry.NurbsSurface", "bool IncreaseDegreeV(int desiredDegree)"]
    ]
  },
  {
    "name": "Objectdecoration.cs",
    "code": "partial class Examples\n{\n  public static Rhino.Commands.Result ObjectDecoration(Rhino.RhinoDoc doc)\n  {\n    // Define a line\n    var line = new Rhino.Geometry.Line(new Rhino.Geometry.Point3d(0, 0, 0), new Rhino.Geometry.Point3d(10, 0, 0));\n\n    // Make a copy of Rhino's default object attributes\n    var attribs = doc.CreateDefaultAttributes();\n\n    // Modify the object decoration style\n    attribs.ObjectDecoration = Rhino.DocObjects.ObjectDecoration.BothArrowhead;\n\n    // Create a new curve object with our attributes\n    doc.Objects.AddLine(line, attribs);\n    doc.Views.Redraw();\n\n    return Rhino.Commands.Result.Success;\n  }\n}\n",
    "members": [
      ["Rhino.RhinoDoc", "DocObjects.ObjectAttributes CreateDefaultAttributes()"]
    ]
  },
  {
    "name": "Objectdisplaymode.cs",
    "code": "using System;\nusing Rhino;\nusing Rhino.Commands;\nusing Rhino.DocObjects;\n\npartial class Examples\n{\n  public static Rhino.Commands.Result ObjectDisplayMode(Rhino.RhinoDoc doc)\n  {\n    const ObjectType filter = ObjectType.Mesh | ObjectType.Brep;\n    ObjRef objref;\n    Result rc = Rhino.Input.RhinoGet.GetOneObject(\"Select mesh or surface\", true, filter, out objref);\n    if (rc != Rhino.Commands.Result.Success)\n      return rc;\n    Guid viewportId = doc.Views.ActiveView.ActiveViewportID;\n\n    ObjectAttributes attr = objref.Object().Attributes;\n    if (attr.HasDisplayModeOverride(viewportId))\n    {\n      RhinoApp.WriteLine(\"Removing display mode override from object\");\n      attr.RemoveDisplayModeOverride(viewportId);\n    }\n    else\n    {\n      Rhino.Display.DisplayModeDescription[] modes = Rhino.Display.DisplayModeDescription.GetDisplayModes();\n      Rhino.Display.DisplayModeDescription mode = null;\n      if (modes.Length == 1)\n        mode = modes[0];\n      else\n      {\n        Rhino.Input.Custom.GetOption go = new Rhino.Input.Custom.GetOption();\n        go.SetCommandPrompt(\"Select display mode\");\n        string[] str_modes = new string[modes.Length];\n        for (int i = 0; i < modes.Length; i++)\n          str_modes[i] = modes[i].EnglishName.Replace(\" \", \"\").Replace(\"-\", \"\");\n        go.AddOptionList(\"DisplayMode\", str_modes, 0);\n        if (go.Get() == Rhino.Input.GetResult.Option)\n          mode = modes[go.Option().CurrentListOptionIndex];\n      }\n      if (mode == null)\n        return Rhino.Commands.Result.Cancel;\n      attr.SetDisplayModeOverride(mode, viewportId);\n    }\n    doc.Objects.ModifyAttributes(objref, attr, false);\n    doc.Views.Redraw();\n    return Rhino.Commands.Result.Success;\n  }\n}\n",
    "members": [
      ["Rhino.DocObjects.ObjectAttributes", "bool HasDisplayModeOverride(Guid viewportId)"],
      ["Rhino.DocObjects.ObjectAttributes", "void RemoveDisplayModeOverride(Guid rhinoViewportId)"],
      ["Rhino.DocObjects.ObjectAttributes", "bool SetDisplayModeOverride(DisplayModeDescription mode, Guid rhinoViewportId)"],
      ["Rhino.Input.Custom.GetBaseClass", "int AddOptionList(LocalizeStringPair optionName, IEnumerable<LocalizeStringPair> listValues, int listCurrentIndex)"],
      ["Rhino.Input.Custom.GetBaseClass", "int AddOptionList(string englishOptionName, IEnumerable<string> listValues, int listCurrentIndex)"]
    ]
  },
  {
    "name": "Objectiterator.cs",
    "code": "using Rhino;\nusing Rhino.Commands;\nusing Rhino.DocObjects;\n\nnamespace examples_cs\n{\n  public class ObjectEnumeratorCommand : Command\n  {\n    public override string EnglishName\n    {\n      get { return \"csObjectEnumerator\"; }\n    }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      var object_enumerator_settings = new ObjectEnumeratorSettings();\n      object_enumerator_settings.IncludeLights = true;\n      object_enumerator_settings.IncludeGrips = false;\n      var rhino_objects = doc.Objects.GetObjectList(object_enumerator_settings);\n\n      int count = 0;\n      foreach (var rhino_object in rhino_objects)\n      {\n        if (rhino_object.IsSelectable() && rhino_object.IsSelected(false) == 0)\n        {\n          rhino_object.Select(true);\n          count++;\n        }\n      }\n      if (count > 0)\n      {\n        doc.Views.Redraw();\n        RhinoApp.WriteLine(\"{0} object{1} selected\", count,\n          count == 1 ? \"\" : \"s\");\n      }\n      return Result.Success;\n    }\n  }\n}",
    "members": [
      ["Rhino.DocObjects.ObjectEnumeratorSettings", "bool IncludeGrips"],
      ["Rhino.DocObjects.ObjectEnumeratorSettings", "bool IncludeLights"]
    ]
  },
  {
    "name": "Orientonsrf.cs",
    "code": "partial class Examples\n{\n  public static Rhino.Commands.Result OrientOnSrf(Rhino.RhinoDoc doc)\n  {\n    // Select objects to orient\n    Rhino.Input.Custom.GetObject go = new Rhino.Input.Custom.GetObject();\n    go.SetCommandPrompt(\"Select objects to orient\");\n    go.SubObjectSelect = false;\n    go.GroupSelect = true;\n    go.GetMultiple(1, 0);\n    if (go.CommandResult() != Rhino.Commands.Result.Success)\n      return go.CommandResult();\n\n    // Point to orient from\n    Rhino.Input.Custom.GetPoint gp = new Rhino.Input.Custom.GetPoint();\n    gp.SetCommandPrompt(\"Point to orient from\");\n    gp.Get();\n    if (gp.CommandResult() != Rhino.Commands.Result.Success)\n      return gp.CommandResult();\n\n    // Define source plane\n    Rhino.Display.RhinoView view = gp.View();\n    if (view == null)\n    {\n      view = doc.Views.ActiveView;\n      if (view == null)\n        return Rhino.Commands.Result.Failure;\n    }\n    Rhino.Geometry.Plane source_plane = view.ActiveViewport.ConstructionPlane();\n    source_plane.Origin = gp.Point();\n\n    // Surface to orient on\n    Rhino.Input.Custom.GetObject gs = new Rhino.Input.Custom.GetObject();\n    gs.SetCommandPrompt(\"Surface to orient on\");\n    gs.GeometryFilter = Rhino.DocObjects.ObjectType.Surface;\n    gs.SubObjectSelect = true;\n    gs.DeselectAllBeforePostSelect = false;\n    gs.OneByOnePostSelect = true;\n    gs.Get();\n    if (gs.CommandResult() != Rhino.Commands.Result.Success)\n      return gs.CommandResult();\n\n    Rhino.DocObjects.ObjRef objref = gs.Object(0);\n    // get selected surface object\n    Rhino.DocObjects.RhinoObject obj = objref.Object();\n    if (obj == null)\n      return Rhino.Commands.Result.Failure;\n    // get selected surface (face)\n    Rhino.Geometry.Surface surface = objref.Surface();\n    if (surface == null)\n      return Rhino.Commands.Result.Failure;\n    // Unselect surface\n    obj.Select(false);\n\n    // Point on surface to orient to\n    gp.SetCommandPrompt(\"Point on surface to orient to\");\n    gp.Constrain(surface, false);\n    gp.Get();\n    if (gp.CommandResult() != Rhino.Commands.Result.Success)\n      return gp.CommandResult();\n\n    // Do transformation\n    Rhino.Commands.Result rc = Rhino.Commands.Result.Failure;\n    double u, v;\n    if (surface.ClosestPoint(gp.Point(), out u, out v))\n    {\n      Rhino.Geometry.Plane target_plane;\n      if (surface.FrameAt(u, v, out target_plane))\n      {\n        // Build transformation\n        Rhino.Geometry.Transform xform = Rhino.Geometry.Transform.PlaneToPlane(source_plane, target_plane);\n\n        // Do the transformation. In this example, we will copy the original objects\n        const bool delete_original = false;\n        for (int i = 0; i < go.ObjectCount; i++)\n          doc.Objects.Transform(go.Object(i), xform, delete_original);\n\n        doc.Views.Redraw();\n        rc = Rhino.Commands.Result.Success;\n      }\n    }\n    return rc;\n  }\n}\n",
    "members": [
      ["Rhino.Geometry.Surface", "bool ClosestPoint(Point3d testPoint, out double u, out double v)"],
      ["Rhino.Geometry.Surface", "bool FrameAt(double u, double v, out Plane frame)"],
      ["Rhino.DocObjects.RhinoObject", "int Select(bool on)"],
      ["Rhino.DocObjects.ObjRef", "RhinoObject Object()"],
      ["Rhino.DocObjects.ObjRef", "Surface Surface()"],
      ["Rhino.Input.Custom.GetObject", "bool DeselectAllBeforePostSelect"],
      ["Rhino.Input.Custom.GetObject", "ObjectType GeometryFilter"],
      ["Rhino.Input.Custom.GetObject", "bool GroupSelect"],
      ["Rhino.Input.Custom.GetObject", "bool OneByOnePostSelect"],
      ["Rhino.Input.Custom.GetObject", "bool SubObjectSelect"],
      ["Rhino.Input.Custom.GetObject", "ObjRef Object(int index)"],
      ["Rhino.Input.Custom.GetPoint", "bool Constrain(Surface surface, bool allowPickingPointOffObject)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid Transform(ObjRef objref, Transform xform, bool deleteOriginal)"]
    ]
  },
  {
    "name": "Ortho.cs",
    "code": "using Rhino;\nusing Rhino.ApplicationSettings;\nusing Rhino.Commands;\nusing Rhino.Input.Custom;\n\nnamespace examples_cs\n{\n  public class OrthoCommand : Command\n  {\n    public override string EnglishName\n    {\n      get { return \"csOrtho\"; }\n    }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      var gp = new GetPoint();\n      gp.SetCommandPrompt(\"Start of line\");\n      gp.Get();\n      if (gp.CommandResult() != Result.Success)\n        return gp.CommandResult();\n      var start_point = gp.Point();\n  \n      var original_ortho = ModelAidSettings.Ortho;\n      if (!original_ortho)\n        ModelAidSettings.Ortho = true;\n\n      gp.SetCommandPrompt(\"End of line\");\n      gp.SetBasePoint(start_point, false);\n      gp.DrawLineFromPoint(start_point, true);\n      gp.Get();\n      if (gp.CommandResult() != Result.Success)\n        return gp.CommandResult();\n      var end_point = gp.Point();\n\n      if (ModelAidSettings.Ortho != original_ortho)\n        ModelAidSettings.Ortho = original_ortho;\n\n      doc.Objects.AddLine(start_point, end_point);\n      doc.Views.Redraw();\n      return Result.Success;\n    }\n  }\n}",
    "members": [
      ["Rhino.ApplicationSettings.ModelAidSettings", "static bool Ortho"]
    ]
  },
  {
    "name": "Planesurface.cs",
    "code": "using Rhino;\nusing Rhino.Geometry;\nusing Rhino.Commands;\n\nnamespace examples_cs\n{\n  public class PlaneSurfaceCommand : Command\n  {\n    public override string EnglishName { get { return \"csPlaneSurface\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      Point3d[] corners;\n      var rc = Rhino.Input.RhinoGet.GetRectangle(out corners);\n      if (rc != Result.Success)\n        return rc;\n\n      var plane = new Plane(corners[0], corners[1], corners[2]);\n\n      var plane_surface = new PlaneSurface(plane, \n        new Interval(0, corners[0].DistanceTo(corners[1])), \n        new Interval(0, corners[1].DistanceTo(corners[2])));\n\n      doc.Objects.Add(plane_surface);\n      doc.Views.Redraw();\n      return Result.Success;\n    }\n  }\n}",
    "members": [
      ["Rhino.Geometry.PlaneSurface", "PlaneSurface(Plane plane, Interval xExtents, Interval yExtents)"]
    ]
  },
  {
    "name": "Pointatcursor.cs",
    "code": "using Rhino;\nusing Rhino.Commands;\nusing Rhino.DocObjects;\nusing System;\n\nnamespace examples_cs\n{\n  public class PointAtCursorCommand : Command\n  {\n    public override string EnglishName { get { return \"csPointAtCursor\"; } }\n\n    [System.Runtime.InteropServices.DllImport(\"user32.dll\")]\n    public static extern bool GetCursorPos(out System.Drawing.Point point);\n \n    [System.Runtime.InteropServices.DllImport(\"user32.dll\")]\n    public static extern bool ScreenToClient(IntPtr hWnd, ref System.Drawing.Point point);\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      var result = Result.Failure;\n      var view = doc.Views.ActiveView;\n      if (view == null) return result;\n\n      System.Drawing.Point windows_drawing_point;\n      if (!GetCursorPos(out windows_drawing_point) || !ScreenToClient(view.Handle, ref windows_drawing_point))\n        return result;\n\n      var xform = view.ActiveViewport.GetTransform(CoordinateSystem.Screen, CoordinateSystem.World);\n      var point = new Rhino.Geometry.Point3d(windows_drawing_point.X, windows_drawing_point.Y, 0.0);\n      RhinoApp.WriteLine(\"screen point: ({0})\", point);\n      point.Transform(xform);\n      RhinoApp.WriteLine(\"world point: ({0})\", point);\n      result = Result.Success;\n      return result;\n    }\n  }\n}",
    "members": [
      ["Rhino.Geometry.Point3d", "void Transform(Transform xform)"],
      ["Rhino.Display.RhinoViewport", "Transform GetTransform(CoordinateSystem sourceSystem, CoordinateSystem destinationSystem)"]
    ]
  },
  {
    "name": "Principalcurvature.cs",
    "code": "using Rhino;\nusing Rhino.DocObjects;\nusing Rhino.Input;\nusing Rhino.Commands;\n\nnamespace examples_cs\n{\n  public class PrincipalCurvatureCommand : Command\n  {\n    public override string EnglishName { get { return \"csPrincipalCurvature\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      ObjRef obj_ref;\n      var rc = RhinoGet.GetOneObject(\"Select surface for curvature measurement\", true, \n        ObjectType.Surface, out obj_ref);\n      if (rc != Result.Success)\n        return rc;\n      var surface = obj_ref.Surface();\n\n      var gp = new Rhino.Input.Custom.GetPoint();\n      gp.SetCommandPrompt(\"Select point on surface for curvature measurement\");\n      gp.Constrain(surface, false);\n      gp.Get();\n      if (gp.CommandResult() != Result.Success)\n        return gp.CommandResult();\n      var point_on_surface = gp.Point();\n\n      double u, v;\n      if (!surface.ClosestPoint(point_on_surface, out u, out v))\n        return Result.Failure;\n\n      var surface_curvature = surface.CurvatureAt(u, v);\n      if (surface_curvature == null)\n        return Result.Failure;\n\n      RhinoApp.WriteLine(\"Surface curvature evaluation at parameter: ({0}, {1})\", u, v);\n\n      RhinoApp.WriteLine(\"  3-D Point: ({0}, {1}, {2})\",\n        surface_curvature.Point.X,\n        surface_curvature.Point.Y,\n        surface_curvature.Point.Z);\n\n      RhinoApp.WriteLine(\"  3-D Normal: ({0}, {1}, {2})\",\n        surface_curvature.Normal.X,\n        surface_curvature.Normal.Y,\n        surface_curvature.Normal.Z);\n\n      RhinoApp.WriteLine(string.Format(\"  Maximum principal curvature: {0} ({1}, {2}, {3})\", \n        surface_curvature.Kappa(0), \n        surface_curvature.Direction(0).X, \n        surface_curvature.Direction(0).Y, \n        surface_curvature.Direction(0).Z));\n\n      RhinoApp.WriteLine(string.Format(\"  Minimum principal curvature: {0} ({1}, {2}, {3})\", \n        surface_curvature.Kappa(1), \n        surface_curvature.Direction(1).X, \n        surface_curvature.Direction(1).Y, \n        surface_curvature.Direction(1).Z));\n\n      RhinoApp.WriteLine(\"  Gaussian curvature: {0}\", surface_curvature.Gaussian);\n      RhinoApp.WriteLine(\"  Mean curvature: {0}\", surface_curvature.Mean);\n\n      return Result.Success;\n    }\n  }\n}",
    "members": [
      ["Rhino.Geometry.SurfaceCurvature", "double Gaussian"],
      ["Rhino.Geometry.SurfaceCurvature", "double Mean"],
      ["Rhino.Geometry.SurfaceCurvature", "Vector3d Normal"],
      ["Rhino.Geometry.SurfaceCurvature", "Point3d Point"],
      ["Rhino.Geometry.SurfaceCurvature", "Vector3d Direction(int direction)"],
      ["Rhino.Geometry.SurfaceCurvature", "double Kappa(int direction)"],
      ["Rhino.Geometry.Surface", "SurfaceCurvature CurvatureAt(double u, double v)"]
    ]
  },
  {
    "name": "Printinstancedefinitiontree.cs",
    "code": "using Rhino;\nusing Rhino.DocObjects;\nusing Rhino.FileIO;\nusing Rhino.Commands;\n\nnamespace examples_cs\n{\n  public class InstanceDefinitionTreeCommand : Command\n  {\n    public override string EnglishName { get { return \"csInstanceDefinitionTree\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      var instance_definitions = doc.InstanceDefinitions;\n      var instance_definition_count = instance_definitions.Count;\n\n      if (instance_definition_count == 0)\n      {\n        RhinoApp.WriteLine(\"Document contains no instance definitions.\");\n        return Result.Nothing;\n      }\n\n      var dump = new TextLog();\n      dump.IndentSize = 4;\n\n      for (int i = 0; i < instance_definition_count; i++)\n        DumpInstanceDefinition(instance_definitions[i], ref dump, true);\n\n      RhinoApp.WriteLine(dump.ToString());\n\n      return Result.Success;\n    }\n\n    private void DumpInstanceDefinition(InstanceDefinition instanceDefinition, ref TextLog dump, bool isRoot)\n    {\n      if (instanceDefinition != null && !instanceDefinition.IsDeleted)\n      {\n        string node = isRoot ? \"─\" : \"└\";\n        dump.Print(string.Format(\"{0} Instance definition {1} = {2}\\n\", node, instanceDefinition.Index, instanceDefinition.Name));\n\n        if (instanceDefinition.ObjectCount  > 0)\n        {\n          dump.PushIndent();\n          for (int i = 0; i < instanceDefinition.ObjectCount ; i++)\n          {\n            var obj = instanceDefinition.Object(i);\n            if (obj == null) continue;\n            if (obj is InstanceObject)\n              DumpInstanceDefinition((obj as InstanceObject).InstanceDefinition, ref dump, false); // Recursive...\n            else\n              dump.Print(\"\\u2514 Object {0} = {1}\\n\", i, obj.ShortDescription(false));\n          }\n          dump.PopIndent();\n        }\n      }\n    }\n  }\n}\n\n",
    "members": [
      ["Rhino.RhinoDoc", "InstanceDefinitionTable InstanceDefinitions"],
      ["Rhino.FileIO.TextLog", "void PopIndent()"],
      ["Rhino.FileIO.TextLog", "void Print(string text)"],
      ["Rhino.FileIO.TextLog", "void PushIndent()"]
    ]
  },
  {
    "name": "Projectpointstobreps.cs",
    "code": "using Rhino;\nusing Rhino.DocObjects;\nusing Rhino.Input.Custom;\nusing Rhino.Commands;\nusing System.Collections.Generic;\nusing Rhino.Geometry;\nusing Rhino.Geometry.Intersect;\n\nnamespace examples_cs\n{\n  public class ProjectPointsToBrepsCommand : Command\n  {\n    public override string EnglishName { get { return \"csProjectPtointsToBreps\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      var gs = new GetObject();\n      gs.SetCommandPrompt(\"select surface\");\n      gs.GeometryFilter = ObjectType.Surface | ObjectType.PolysrfFilter;\n      gs.DisablePreSelect();\n      gs.SubObjectSelect = false;\n      gs.Get();\n      if (gs.CommandResult() != Result.Success)\n        return gs.CommandResult();\n      var brep = gs.Object(0).Brep();\n      if (brep == null)\n        return Result.Failure;\n\n      var points = Intersection.ProjectPointsToBreps(\n                   new List<Brep> {brep}, // brep on which to project\n                   new List<Point3d> {new Point3d(0, 0, 0), new Point3d(3,0,3), new Point3d(-2,0,-2)}, // some random points to project\n                   new Vector3d(0, 1, 0), // project on Y axis\n                   doc.ModelAbsoluteTolerance);\n\n      if (points != null && points.Length > 0)\n      {\n        foreach (var point in points)\n        {\n          doc.Objects.AddPoint(point);\n        }\n      }\n      doc.Views.Redraw();\n      return Result.Success;\n    }\n  }\n}",
    "members": [
      ["Rhino.Geometry.Intersect.Intersection", "static Point3d[] ProjectPointsToBreps(IEnumerable<Brep> breps, IEnumerable<Point3d> points, Vector3d direction, double tolerance)"]
    ]
  },
  {
    "name": "Projectpointstomeshesex.cs",
    "code": "using System.Collections.Generic;\nusing Rhino;\nusing Rhino.Commands;\nusing Rhino.Geometry;\nusing Rhino.Geometry.Intersect;\nusing Rhino.Input;\nusing Rhino.DocObjects;\n\nnamespace examples_cs\n{\n  public class ProjectPointsToMeshesExCommand : Command\n  {\n    public override string EnglishName { get { return \"csProjectPointsToMeshesEx\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      ObjRef obj_ref;\n      var rc = RhinoGet.GetOneObject(\"mesh\", false, ObjectType.Mesh, out obj_ref);\n      if (rc != Result.Success) return rc;\n      var mesh = obj_ref.Mesh();\n\n      ObjRef[] obj_ref_pts;\n      rc = RhinoGet.GetMultipleObjects(\"points\", false, ObjectType.Point, out obj_ref_pts);\n      if (rc != Result.Success) return rc;\n      var points = new List<Point3d>();\n      foreach (var obj_ref_pt in obj_ref_pts)\n      {\n        var pt = obj_ref_pt.Point().Location;\n        points.Add(pt);\n      }\n\n      int[] indices;\n      var prj_points = Intersection.ProjectPointsToMeshesEx(new[] {mesh}, points, new Vector3d(0, 1, 0), 0, out indices);\n      foreach (var prj_pt in prj_points) doc.Objects.AddPoint(prj_pt);\n      doc.Views.Redraw();\n      return Result.Success;\n    }\n  }\n}",
    "members": [
      ["Rhino.Geometry.Intersect.Intersection", "static Point3d[] ProjectPointsToMeshesEx(IEnumerable<Mesh> meshes, IEnumerable<Point3d> points, Vector3d direction, double tolerance, out int[] indices)"]
    ]
  },
  {
    "name": "Renameblock.cs",
    "code": "using Rhino;\nusing Rhino.Input;\nusing Rhino.Commands;\n\nnamespace examples_cs\n{\n  public class RenameBlockCommand : Command\n  {\n    public override string EnglishName { get { return \"csRenameBlock\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      // Get the name of the insance definition to rename\n      var instance_definition_name = \"\";\n      var rc = RhinoGet.GetString(\"Name of block to rename\", true, ref instance_definition_name);\n      if (rc != Result.Success)\n        return rc;\n      if (string.IsNullOrWhiteSpace(instance_definition_name))\n        return Result.Nothing;\n     \n      // Verify instance definition exists\n      var instance_definition = doc.InstanceDefinitions.Find(instance_definition_name, true);\n      if (instance_definition == null) {\n        RhinoApp.WriteLine(\"Block '{0}' not found.\", instance_definition_name);\n        return Result.Nothing;\n      }\n\n      // Verify instance definition is rename-able\n      if (instance_definition.IsDeleted || instance_definition.IsReference) {\n        RhinoApp.WriteLine(\"Unable to rename block '{0}'.\", instance_definition_name);\n        return Result.Nothing;\n      }\n     \n      // Get the new instance definition name\n      string instance_definition_new_name = \"\";\n      rc = RhinoGet.GetString(\"Name of block to rename\", true, ref instance_definition_new_name);\n      if (rc != Result.Success)\n        return rc;\n      if (string.IsNullOrWhiteSpace(instance_definition_new_name))\n        return Result.Nothing;\n\n      // Verify the new instance definition name is not already in use\n      var existing_instance_definition = doc.InstanceDefinitions.Find(instance_definition_new_name, true);\n      if (existing_instance_definition != null && !existing_instance_definition.IsDeleted) {\n        RhinoApp.WriteLine(\"Block '{0}' already exists.\", existing_instance_definition);\n        return Result.Nothing;\n      }\n     \n      // change the block name\n      if (!doc.InstanceDefinitions.Modify(instance_definition.Index, instance_definition_new_name, instance_definition.Description, true)) {\n        RhinoApp.WriteLine(\"Could not rename {0} to {1}\", instance_definition.Name, instance_definition_new_name);\n        return Result.Failure;\n      }\n\n      return Result.Success;\n    }\n  }\n}\n",
    "members": [
      ["Rhino.DocObjects.InstanceDefinition", "bool IsDeleted"],
      ["Rhino.DocObjects.InstanceDefinition", "bool IsReference"],
      ["Rhino.DocObjects.Tables.InstanceDefinitionTable", "bool Modify(int idefIndex, string newName, string newDescription, bool quiet)"]
    ]
  },
  {
    "name": "Replacecolordialog.cs",
    "code": "using Rhino;\nusing Rhino.Commands;\nusing Rhino.UI;\nusing System.Windows.Forms;\n\nnamespace examples_cs\n{\n  public class ReplaceColorDialogCommand : Command\n  {\n    public override string EnglishName { get { return \"csReplaceColorDialog\"; } }\n\n    private ColorDialog m_dlg = null;\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      Dialogs.SetCustomColorDialog(OnSetCustomColorDialog);\n      return Result.Success;\n    }\n\n    void OnSetCustomColorDialog(object sender, GetColorEventArgs e)\n    {\n      m_dlg = new ColorDialog();\n      if (m_dlg.ShowDialog(null) == DialogResult.OK)\n      {\n        var c = m_dlg.Color;\n        e.SelectedColor = c;\n      }\n    }\n  }\n}",
    "members": [
      ["Rhino.UI.Dialogs", "static void SetCustomColorDialog(EventHandler<GetColorEventArgs> handler)"]
    ]
  },
  {
    "name": "Replacehatchpattern.cs",
    "code": "using Rhino;\nusing Rhino.DocObjects;\nusing Rhino.Commands;\nusing Rhino.Input;\nusing Rhino.Input.Custom;\n\nnamespace examples_cs\n{\n  public class ReplaceHatchPatternCommand : Rhino.Commands.Command\n  {\n    public override string EnglishName\n    {\n      get { return \"csReplaceHatchPattern\"; }\n    }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      ObjRef[] obj_refs;\n      var rc = RhinoGet.GetMultipleObjects(\"Select hatches to replace\", false, ObjectType.Hatch, out obj_refs);\n      if (rc != Result.Success || obj_refs == null)\n        return rc;\n\n      var gs = new GetString();\n      gs.SetCommandPrompt(\"Name of replacement hatch pattern\");\n      gs.AcceptNothing(false);\n      gs.Get();\n      if (gs.CommandResult() != Result.Success)\n        return gs.CommandResult();\n      var hatch_name = gs.StringResult();\n\n      var pattern_index = doc.HatchPatterns.Find(hatch_name, true);\n\n      if (pattern_index < 0)\n      {\n        RhinoApp.WriteLine(\"The hatch pattern '{0}' not found  in the document.\", hatch_name);\n        return Result.Nothing;\n      }\n\n      foreach (var obj_ref in obj_refs)\n      {\n        var hatch_object = obj_ref.Object() as HatchObject;\n        if (hatch_object.HatchGeometry.PatternIndex != pattern_index)\n        {\n          hatch_object.HatchGeometry.PatternIndex = pattern_index;\n          hatch_object.CommitChanges();\n        }\n      }\n      doc.Views.Redraw();\n      return Result.Success;\n    }\n  }\n}\n",
    "members": [
      ["Rhino.Geometry.Hatch", "int PatternIndex"],
      ["Rhino.DocObjects.HatchObject", "Hatch HatchGeometry"]
    ]
  },
  {
    "name": "Rhinogettransform.cs",
    "code": "using Rhino;\nusing Rhino.DocObjects;\nusing Rhino.Geometry;\nusing Rhino.Commands;\nusing Rhino.Input.Custom;\nusing Rhino.Display;\n\nnamespace examples_cs\n{\n  public class GetTranslation : GetTransform\n  {\n    public override Transform CalculateTransform(RhinoViewport viewport, Point3d point)\n    {\n      var xform = Transform.Identity;\n      Point3d base_point;\n      if (TryGetBasePoint(out base_point))\n      {\n        var v = point - base_point;\n        if (!v.IsZero)\n        {\n          xform = Transform.Translation(v);\n          if (!xform.IsValid)\n            xform = Transform.Identity;\n        }\n      }\n      return xform;\n    }\n  }\n\n  public class RhinoGetTransformCommand : TransformCommand\n  {\n    public RhinoGetTransformCommand()\n    {\n      // simple example of handling the BeforeTransformObjects event\n      RhinoDoc.BeforeTransformObjects += RhinoDocOnBeforeTransformObjects;\n    }\n\n    private void RhinoDocOnBeforeTransformObjects(object sender, RhinoTransformObjectsEventArgs ea)\n    {\n      RhinoApp.WriteLine(\"Transform Objects Count: {0}\", ea.ObjectCount);\n    }\n\n    public override string EnglishName { get { return \"csGetTranslation\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      var list = new Rhino.Collections.TransformObjectList();\n      var rc = SelectObjects(\"Select objects to move\", list);\n      if (rc != Rhino.Commands.Result.Success)\n        return rc;\n\n      var gp = new GetPoint();\n      gp.SetCommandPrompt(\"Point to move from\");\n      gp.Get();\n      if (gp.CommandResult() != Result.Success)\n        return gp.CommandResult();\n\n\n      var gt = new GetTranslation();\n      gt.SetCommandPrompt(\"Point to move to\");\n      gt.SetBasePoint(gp.Point(), true);\n      gt.DrawLineFromPoint(gp.Point(), true);\n      gt.AddTransformObjects(list);\n      gt.GetXform();\n      if (gt.CommandResult() != Result.Success)\n        return gt.CommandResult();\n\n      var xform = gt.CalculateTransform(gt.View().ActiveViewport, gt.Point());\n      TransformObjects(list, xform, false, false);\n      doc.Views.Redraw();\n      return Result.Success;\n    }\n  }\n}\n",
    "members": [
      ["Rhino.RhinoDoc", "static BeforeTransformObjects"]
    ]
  },
  {
    "name": "Rhinopageviewwidthheight.cs",
    "code": "using Rhino;\nusing Rhino.Commands;\nusing Rhino.Input;\n\nnamespace examples_cs\n{\n  public class RhinoPageViewWidthHeightCommand : Command\n  {\n    public override string EnglishName { get { return \"csSetRhinoPageViewWidthAndHeight\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      var width = 1189;\n      var height = 841;\n      var page_views = doc.Views.GetPageViews();\n      int page_number = (page_views==null) ? 1 : page_views.Length + 1;\n      var pageview = doc.Views.AddPageView(string.Format(\"A0_{0}\",page_number), width, height);\n\n      int new_width = width;\n      var rc = RhinoGet.GetInteger(\"new width\", false, ref new_width);\n      if (rc != Result.Success || new_width <= 0) return rc;\n\n      int new_height = height;\n      rc = RhinoGet.GetInteger(\"new height\", false, ref new_height);\n      if (rc != Result.Success || new_height <= 0) return rc;\n\n      pageview.PageWidth = new_width;\n      pageview.PageHeight = new_height;\n      doc.Views.Redraw();\n      return Result.Success;\n    }\n  }\n}",
    "members": [
      ["Rhino.Display.RhinoPageView", "double PageHeight"],
      ["Rhino.Display.RhinoPageView", "double PageWidth"]
    ]
  },
  {
    "name": "Screencaptureview.cs",
    "code": "using System;\nusing System.Windows.Forms;\nusing Rhino;\nusing Rhino.Commands;\n\nnamespace examples_cs\n{\n  public class CaptureViewToBitmapCommand : Rhino.Commands.Command\n  {\n    public override string EnglishName\n    {\n      get { return \"csCaptureViewToBitmap\"; }\n    }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      var file_name = \"\";\n\n      var bitmap = doc.Views.ActiveView.CaptureToBitmap(true, true, true);\n      bitmap.MakeTransparent();\n\n      // copy bitmap to clipboard\n      Clipboard.SetImage(bitmap);\n\n      // save bitmap to file\n      var save_file_dialog = new Rhino.UI.SaveFileDialog\n      {\n        Filter = \"*.bmp\",\n        InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)\n      };\n      if (save_file_dialog.ShowDialog() == DialogResult.OK)\n      {\n        file_name = save_file_dialog.FileName;\n      }\n\n      if (file_name != \"\")\n        bitmap.Save(file_name);\n\n      return Rhino.Commands.Result.Success;\n    }\n  }\n}\n",
    "members": [
      ["Rhino.Display.RhinoView", "System.Drawing.Bitmap CaptureToBitmap(bool grid, bool worldAxes, bool cplaneAxes)"],
      ["Rhino.UI.SaveFileDialog", "SaveFileDialog()"],
      ["Rhino.UI.SaveFileDialog", "string FileName"],
      ["Rhino.UI.SaveFileDialog", "string Filter"],
      ["Rhino.UI.SaveFileDialog", "string InitialDirectory"],
      ["Rhino.UI.SaveFileDialog", "bool ShowSaveDialog()"]
    ]
  },
  {
    "name": "Sellayer.cs",
    "code": "using Rhino.Commands;\n\npartial class Examples\n{\n  public static Rhino.Commands.Result SelLayer(Rhino.RhinoDoc doc)\n  {\n    // Prompt for a layer name\n    string layername = doc.Layers.CurrentLayer.Name;\n    Result rc = Rhino.Input.RhinoGet.GetString(\"Name of layer to select objects\", true, ref layername);\n    if (rc != Rhino.Commands.Result.Success)\n      return rc;\n\n    // Get all of the objects on the layer. If layername is bogus, you will\n    // just get an empty list back\n    Rhino.DocObjects.RhinoObject[] rhobjs = doc.Objects.FindByLayer(layername);\n    if (rhobjs == null || rhobjs.Length < 1)\n      return Rhino.Commands.Result.Cancel;\n\n    for (int i = 0; i < rhobjs.Length; i++)\n      rhobjs[i].Select(true);\n    doc.Views.Redraw();\n    return Rhino.Commands.Result.Success;\n  }\n}\n",
    "members": [
      ["Rhino.DocObjects.Layer", "string Name"],
      ["Rhino.DocObjects.Tables.ObjectTable", "RhinoObject[] FindByLayer(string layerName)"],
      ["Rhino.DocObjects.Tables.LayerTable", "Layer CurrentLayer"]
    ]
  },
  {
    "name": "Splitbrepwithplane.cs",
    "code": "using Rhino;\nusing Rhino.DocObjects;\nusing Rhino.Commands;\nusing Rhino.Input;\nusing Rhino.Geometry;\n\nnamespace examples_cs\n{\n  public class SplitBrepsWithPlaneCommand : Rhino.Commands.Command\n  {\n    public override string EnglishName\n    {\n      get { return \"csSplitBrepsWithPlane\"; }\n    }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      //First, collect all the breps to split\n      ObjRef[] obj_refs;\n      var rc = RhinoGet.GetMultipleObjects(\"Select breps to split\", false, ObjectType.Brep, out obj_refs);\n      if (rc != Result.Success || obj_refs == null)\n        return rc;\n\n      // Get the final plane\n      Plane plane;\n      rc = RhinoGet.GetPlane(out plane);\n      if (rc != Result.Success)\n        return rc;\n\n      //Iterate over all object references\n      foreach (var obj_ref in obj_refs)\n      {\n        var brep = obj_ref.Brep();\n        var bbox = brep.GetBoundingBox(false);\n\n        //Grow the boundingbox in all directions\n        //If the boundingbox is flat (zero volume or even zero area) \n        //then the CreateThroughBox method will fail.\n        var min_point = bbox.Min;\n        min_point.X -= 1.0;\n        min_point.Y -= 1.0;\n        min_point.Z -= 1.0;\n        bbox.Min = min_point;\n        var max_point = bbox.Max;\n        max_point.X += 1.0;\n        max_point.Y += 1.0;\n        max_point.Z += 1.0;\n        bbox.Max = max_point;\n\n        var plane_surface = PlaneSurface.CreateThroughBox(plane, bbox);\n        if (plane_surface == null)\n        {\n          //This is rare, it will most likely not happen unless either the plane or the boundingbox are invalid\n          RhinoApp.WriteLine(\"Cutting plane could not be constructed.\");\n        }\n        else\n        {\n          var breps = brep.Split(plane_surface.ToBrep(), doc.ModelAbsoluteTolerance);\n          if (breps == null || breps.Length == 0)\n          {\n            RhinoApp.Write(\"Plane does not intersect brep (id:{0})\", obj_ref.ObjectId);\n            continue;\n          }\n          foreach (var brep_piece in breps)\n          {\n            doc.Objects.AddBrep(brep_piece);\n          }\n          doc.Objects.AddSurface(plane_surface);\n          doc.Objects.Delete(obj_ref, false);\n        }\n      }\n\n      doc.Views.Redraw();\n      return Result.Success;\n    }\n  }\n}",
    "members": [
      ["Rhino.Geometry.PlaneSurface", "static PlaneSurface CreateThroughBox(Plane plane, BoundingBox box)"],
      ["Rhino.Input.RhinoGet", "static Result GetPlane(out Plane plane)"]
    ]
  },
  {
    "name": "Srfpt.cs",
    "code": "using Rhino;\nusing Rhino.Geometry;\nusing Rhino.Commands;\n\nnamespace examples_cs\n{\n  public class SurfaceFromCornersCommand : Rhino.Commands.Command\n  {\n    public override string EnglishName\n    {\n      get { return \"csSurfaceFromCorners\"; }\n    }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      var surface = NurbsSurface.CreateFromCorners(\n        new Point3d(5, 0, 0),\n        new Point3d(5, 5, 5),\n        new Point3d(0, 5, 0),\n        new Point3d(0, 0, 0));\n\n      doc.Objects.AddSurface(surface);\n      doc.Views.Redraw();\n\n      return Rhino.Commands.Result.Success;\n    }\n  }\n}",
    "members": [
      ["Rhino.Geometry.NurbsSurface", "static NurbsSurface CreateFromCorners(Point3d corner1, Point3d corner2, Point3d corner3, Point3d corner4)"]
    ]
  },
  {
    "name": "Sweep1.cs",
    "code": "using Rhino.Input;\nusing System.Collections.Generic;\n\npartial class Examples\n{\n  public static Rhino.Commands.Result Sweep1(Rhino.RhinoDoc doc)\n  {\n    Rhino.DocObjects.ObjRef rail_ref;\n    var rc = RhinoGet.GetOneObject(\"Select rail curve\", false, Rhino.DocObjects.ObjectType.Curve, out rail_ref);\n    if(rc!=Rhino.Commands.Result.Success)\n      return rc;\n\n    var rail_crv = rail_ref.Curve();\n    if( rail_crv==null )\n      return Rhino.Commands.Result.Failure;\n\n    var gx = new Rhino.Input.Custom.GetObject();\n    gx.SetCommandPrompt(\"Select cross section curves\");\n    gx.GeometryFilter = Rhino.DocObjects.ObjectType.Curve;\n    gx.EnablePreSelect(false, true);\n    gx.GetMultiple(1,0);\n    if( gx.CommandResult() != Rhino.Commands.Result.Success )\n      return gx.CommandResult();\n    \n    var cross_sections = new List<Rhino.Geometry.Curve>();\n    for( int i=0; i<gx.ObjectCount; i++ )\n    {\n      var crv = gx.Object(i).Curve();\n      if( crv!= null)\n        cross_sections.Add(crv);\n    }\n    if( cross_sections.Count<1 )\n      return Rhino.Commands.Result.Failure;\n\n    var sweep = new Rhino.Geometry.SweepOneRail();\n    sweep.AngleToleranceRadians = doc.ModelAngleToleranceRadians;\n    sweep.ClosedSweep = false;\n    sweep.SweepTolerance = doc.ModelAbsoluteTolerance;\n    sweep.SetToRoadlikeTop();\n    var breps = sweep.PerformSweep(rail_crv, cross_sections);\n    for( int i=0; i<breps.Length; i++ )\n      doc.Objects.AddBrep(breps[i]);\n    doc.Views.Redraw();\n    return Rhino.Commands.Result.Success;\n  }\n}\n",
    "members": [
      ["Rhino.Geometry.SweepOneRail", "SweepOneRail()"],
      ["Rhino.Geometry.SweepOneRail", "Brep[] PerformSweep(Curve rail, IEnumerable<Curve> crossSections)"]
    ]
  },
  {
    "name": "Textjustify.cs",
    "code": "using Rhino;\nusing Rhino.Commands;\nusing Rhino.Geometry;\n\nnamespace examples_cs\n{\n  public class TextJustifyCommand : Command\n  {\n    public override string EnglishName { get { return \"csTextJustify\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      var text_entity = new TextEntity\n      {\n        Plane = Plane.WorldXY,\n        Text = \"Hello Rhino!\",\n        Justification = TextJustification.MiddleCenter,\n        FontIndex = doc.Fonts.FindOrCreate(\"Arial\", false, false)\n      };\n\n      doc.Objects.AddText(text_entity);\n      doc.Views.Redraw();\n\n      return Result.Success;\n    }\n  }\n}",
    "members": [
      ["Rhino.Geometry.TextEntity", "TextEntity()"],
      ["Rhino.Geometry.TextEntity", "TextJustification Justification"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddText(Text3d text3d)"],
      ["Rhino.DocObjects.Tables.FontTable", "int FindOrCreate(string face, bool bold, bool italic)"]
    ]
  },
  {
    "name": "Tightboundingbox.cs",
    "code": "using Rhino;\nusing Rhino.Commands;\nusing System.Linq;\nusing Rhino.Geometry;\nusing Rhino.Input;\nusing Rhino.DocObjects;\nusing System.Collections.Generic;\n\nnamespace examples_cs\n{\n  public class TightBoundingBoxCommand : Command\n  {\n    public override string EnglishName { get { return \"csTightBoundingBox\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      ObjRef obj_ref;\n      var rc = RhinoGet.GetOneObject(\n        \"Select surface to split\", true, ObjectType.Surface, out obj_ref);\n      if (rc != Result.Success)\n        return rc;\n      var surface = obj_ref.Surface();\n      if (surface == null)\n        return Result.Failure;\n\n      obj_ref = null;\n      rc = RhinoGet.GetOneObject(\n        \"Select cutting curve\", true, ObjectType.Curve, out obj_ref);\n      if (rc != Result.Success)\n        return rc;\n      var curve = obj_ref.Curve();\n      if (curve == null)\n        return Result.Failure;\n\n      var brep_face = surface as BrepFace;\n      if (brep_face == null)\n        return Result.Failure;\n\n      var split_brep = brep_face.Split(\n        new List<Curve> {curve}, doc.ModelAbsoluteTolerance);\n      if (split_brep == null)\n      {\n        RhinoApp.WriteLine(\"Unable to split surface.\");\n        return Result.Nothing;\n      }\n\n      var meshes = Mesh.CreateFromBrep(split_brep);\n\n      foreach (var mesh in meshes)\n      {\n        var bbox = mesh.GetBoundingBox(true);\n        switch (bbox.IsDegenerate(doc.ModelAbsoluteTolerance))\n        {\n          case 3:\n          case 2:\n            return Result.Failure;\n          case 1:\n            // rectangle\n            // box with 8 corners flattened to rectangle with 4 corners\n            var rectangle_corners = bbox.GetCorners().Distinct().ToList();\n            // add 1st point as last to close the loop\n            rectangle_corners.Add(rectangle_corners[0]);\n            doc.Objects.AddPolyline(rectangle_corners);\n            doc.Views.Redraw();\n            break;\n          case 0: \n            // box\n            var brep_box = new Box(bbox).ToBrep();\n            doc.Objects.AddBrep(brep_box);\n            doc.Views.Redraw();\n            break;\n        }\n      }\n\n      return Result.Success;\n    }\n  }\n}",
    "members": [
      ["Rhino.Geometry.BrepFace", "Brep Split(IEnumerable<Curve> curves, double tolerance)"],
      ["Rhino.Geometry.Mesh", "static Mesh[] CreateFromBrep(Brep brep)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddPolyline(IEnumerable<Point3d> points)"]
    ]
  },
  {
    "name": "Transformbrep.cs",
    "code": "using Rhino.Input;\n\npartial class Examples\n{\n  public static Rhino.Commands.Result TransformBrep(Rhino.RhinoDoc doc)\n  {\n    Rhino.DocObjects.ObjRef rhobj;\n    var rc = RhinoGet.GetOneObject(\"Select brep\", true, Rhino.DocObjects.ObjectType.Brep, out rhobj);\n    if(rc!= Rhino.Commands.Result.Success)\n      return rc;\n\n    // Simple translation transformation\n    var xform = Rhino.Geometry.Transform.Translation(18,-18,25);\n    doc.Objects.Transform(rhobj, xform, true);\n    doc.Views.Redraw();\n    return Rhino.Commands.Result.Success;\n  }\n}\n",
    "members": [
      ["Rhino.Geometry.Transform", "static Transform Translation(double dx, double dy, double dz)"]
    ]
  },
  {
    "name": "Viewportresolution.cs",
    "code": "using Rhino;\nusing Rhino.Commands;\n\nnamespace examples_cs\n{\n  public class ViewportResolutionCommand : Command\n  {\n    public override string EnglishName { get { return \"csViewportResolution\"; } }\n\n    protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n    {\n      var active_viewport = doc.Views.ActiveView.ActiveViewport;\n      RhinoApp.WriteLine(\"Name = {0}: Width = {1}, Height = {2}\", \n        active_viewport.Name, active_viewport.Size.Width, active_viewport.Size.Height);\n      return Result.Success;\n    }\n  }\n}",
    "members": [
      ["Rhino.Display.RhinoViewport", "Size Size"]
    ]
  },
  {
    "name": "Activeviewport.py",
    "code": "import Rhino\nimport scriptcontext\n\ndef ActiveViewport():\n    view = scriptcontext.doc.Views.ActiveView\n    if view is None: return\n    if isinstance(view, Rhino.Display.RhinoPageView):\n        if view.PageIsActive:\n            print \"The layout\", view.PageName, \"is active\"\n        else:\n            detail_name = view.ActiveViewport.Name\n            print \"The detail\", detail_name, \"on layout\", view.PageName, \"is active\"\n    else:\n        print \"The viewport\", view.MainViewport.Name, \"is active\"\n\n\nif __name__ == \"__main__\":\n    ActiveViewport()\n",
    "members": [
      ["Rhino.Display.RhinoPageView", "bool PageIsActive"],
      ["Rhino.Display.RhinoPageView", "string PageName"]
    ]
  },
  {
    "name": "Addbackgroundbitmap.py",
    "code": "import Rhino\nimport scriptcontext\nimport System.Windows.Forms.DialogResult\nimport System.Drawing.Image\n\ndef AddBackgroundBitmap():\n    # Allow the user to select a bitmap file\n    fd = Rhino.UI.OpenFileDialog()\n    fd.Filter = \"Image Files (*.bmp;*.png;*.jpg)|*.bmp;*.png;*.jpg\"\n    if fd.ShowDialog()!=System.Windows.Forms.DialogResult.OK:\n        return Rhino.Commands.Result.Cancel\n\n    # Verify the file that was selected\n    image = None\n    try:\n        image = System.Drawing.Image.FromFile(fd.FileName)\n    except:\n        return Rhino.Commands.Result.Failure\n\n    # Allow the user to pick the bitmap origin\n    gp = Rhino.Input.Custom.GetPoint()\n    gp.SetCommandPrompt(\"Bitmap Origin\")\n    gp.ConstrainToConstructionPlane(True)\n    gp.Get()\n    if gp.CommandResult()!=Rhino.Commands.Result.Success:\n        return gp.CommandResult()\n\n    # Get the view that the point was picked in.\n    # This will be the view that the bitmap appears in.\n    view = gp.View()\n    if view is None:\n        view = scriptcontext.doc.Views.ActiveView\n        if view is None: return Rhino.Commands.Result.Failure\n\n    # Allow the user to specify the bitmap with in model units\n    gn = Rhino.Input.Custom.GetNumber()\n    gn.SetCommandPrompt(\"Bitmap width\")\n    gn.SetLowerLimit(1.0, False)\n    gn.Get()\n    if gn.CommandResult()!=Rhino.Commands.Result.Success:\n        return gn.CommandResult()\n\n    # Cook up some scale factors\n    w = gn.Number()\n    h = w * (image.Width / image.Height)\n\n    plane = view.ActiveViewport.ConstructionPlane()\n    plane.Origin = gp.Point()\n    view.ActiveViewport.SetTraceImage(fd.FileName, plane, w, h, False, False)\n    view.Redraw()\n    return Rhino.Commands.Result.Success\n\nif __name__==\"__main__\":\n    AddBackgroundBitmap()\n",
    "members": [
      ["Rhino.Display.RhinoView", "RhinoViewport ActiveViewport"],
      ["Rhino.Display.RhinoView", "void Redraw()"],
      ["Rhino.Display.RhinoViewport", "Plane ConstructionPlane()"],
      ["Rhino.Display.RhinoViewport", "bool SetTraceImage(string bitmapFileName, Plane plane, double width, double height, bool grayscale, bool filtered)"],
      ["Rhino.UI.OpenFileDialog", "OpenFileDialog()"],
      ["Rhino.UI.OpenFileDialog", "string FileName"],
      ["Rhino.UI.OpenFileDialog", "string Filter"],
      ["Rhino.UI.OpenFileDialog", "bool ShowOpenDialog()"],
      ["Rhino.Input.Custom.GetBaseClass", "Result CommandResult()"],
      ["Rhino.Input.Custom.GetBaseClass", "double Number()"],
      ["Rhino.Input.Custom.GetBaseClass", "RhinoView View()"],
      ["Rhino.Input.Custom.GetPoint", "bool ConstrainToConstructionPlane(bool throughBasePoint)"],
      ["Rhino.Input.Custom.GetNumber", "GetNumber()"],
      ["Rhino.Input.Custom.GetNumber", "GetResult Get()"],
      ["Rhino.Input.Custom.GetNumber", "void SetLowerLimit(double lowerLimit, bool strictlyGreaterThan)"],
      ["Rhino.DocObjects.Tables.ViewTable", "RhinoView ActiveView"]
    ]
  },
  {
    "name": "Addbrepbox.py",
    "code": "import Rhino\nimport scriptcontext\nimport System.Guid\n\ndef AddBrepBox():\n    pt0 = Rhino.Geometry.Point3d(0, 0, 0)\n    pt1 = Rhino.Geometry.Point3d(10, 10, 10)\n    box = Rhino.Geometry.BoundingBox(pt0, pt1)\n    brep = box.ToBrep()\n    rc = Rhino.Commands.Result.Failure\n    if( scriptcontext.doc.Objects.AddBrep(brep) != System.Guid.Empty ):\n        rc = Rhino.Commands.Result.Success\n        scriptcontext.doc.Views.Redraw()\n    return rc\n\nif( __name__ == \"__main__\" ):\n    AddBrepBox()\n",
    "members": [
      ["Rhino.Geometry.BoundingBox", "BoundingBox(Point3d min, Point3d max)"],
      ["Rhino.Geometry.BoundingBox", "Brep ToBrep()"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddBrep(Brep brep)"]
    ]
  },
  {
    "name": "Addchildlayer.py",
    "code": "import Rhino\nimport scriptcontext\nimport System.Drawing.Color\n\ndef AddChildLayer():\n    # Get an existing layer\n    default_name = scriptcontext.doc.Layers.CurrentLayer.Name\n    # Prompt the user to enter a layer name\n    gs = Rhino.Input.Custom.GetString()\n    gs.SetCommandPrompt(\"Name of existing layer\")\n    gs.SetDefaultString(default_name)\n    gs.AcceptNothing(True)\n    gs.Get()\n    if gs.CommandResult()!=Rhino.Commands.Result.Success:\n        return gs.CommandResult()\n\n    # Was a layer named entered?\n    layer_name = gs.StringResult().Trim()\n    index = scriptcontext.doc.Layers.Find(layer_name, True)\n    if index<0: return Rhino.Commands.Result.Cancel\n\n    parent_layer = scriptcontext.doc.Layers[index]\n\n    # Create a child layer\n    child_name = parent_layer.Name + \"_child\"\n    childlayer = Rhino.DocObjects.Layer()\n    childlayer.ParentLayerId = parent_layer.Id\n    childlayer.Name = child_name\n    childlayer.Color = System.Drawing.Color.Red\n\n    index = scriptcontext.doc.Layers.Add(childlayer)\n    if index<0:\n      print \"Unable to add\", child_name, \"layer.\"\n      return Rhino.Commands.Result.Failure\n    return Rhino.Commands.Result.Success\n\nif __name__==\"__main__\":\n    AddChildLayer()",
    "members": [
      ["Rhino.DocObjects.Layer", "Guid ParentLayerId"],
      ["Rhino.DocObjects.Tables.LayerTable", "int Add(Layer layer)"]
    ]
  },
  {
    "name": "Addcircle.py",
    "code": "import Rhino\nimport scriptcontext\nimport System.Guid\n\ndef AddCircle():\n    center = Rhino.Geometry.Point3d(0, 0, 0)\n    radius = 10.0\n    c = Rhino.Geometry.Circle(center, radius)\n    if scriptcontext.doc.Objects.AddCircle(c)!=System.Guid.Empty:\n        scriptcontext.doc.Views.Redraw()\n        return Rhino.Commands.Result.Success\n    return Rhino.Commands.Result.Failure\n\nif __name__==\"__main__\":\n    AddCircle()\n",
    "members": [
      ["Rhino.Geometry.Circle", "Circle(Plane plane, double radius)"],
      ["Rhino.Geometry.Point3d", "Point3d(double x, double y, double z)"],
      ["Rhino.DocObjects.Tables.ViewTable", "void Redraw()"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddCircle(Circle circle)"]
    ]
  },
  {
    "name": "Addclippingplane.py",
    "code": "import Rhino\nimport scriptcontext\nimport System.Guid\n\ndef AddClippingPlane():\n    # Define the corners of the clipping plane\n    rc, corners = Rhino.Input.RhinoGet.GetRectangle()\n    if rc!=Rhino.Commands.Result.Success: return rc\n\n    # Get the active view\n    view = scriptcontext.doc.Views.ActiveView\n    if view is None: return Rhino.Commands.Result.Failure\n\n    p0, p1, p2, p3 = corners\n    # Create a plane from the corner points\n    plane = Rhino.Geometry.Plane(p0, p1, p3)\n\n    # Add a clipping plane object to the document\n    id = scriptcontext.doc.Objects.AddClippingPlane(plane, p0.DistanceTo(p1), p0.DistanceTo(p3), view.ActiveViewportID)\n    if id!=System.Guid.Empty:\n        scriptcontext.doc.Views.Redraw()\n        return Rhino.Commands.Result.Success\n    return Rhino.Commands.Result.Failure\n\nif __name__==\"__main__\":\n    AddClippingPlane()\n",
    "members": [
      ["Rhino.Geometry.Plane", "Plane(Point3d origin, Point3d xPoint, Point3d yPoint)"],
      ["Rhino.FileIO.File3dmObjectTable", "Guid AddClippingPlane(Plane plane, double uMagnitude, double vMagnitude, Guid clippedViewportId)"],
      ["Rhino.Input.RhinoGet", "static Result GetRectangle(out Point3d[] corners)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddClippingPlane(Plane plane, double uMagnitude, double vMagnitude, Guid clippedViewportId)"]
    ]
  },
  {
    "name": "Addcylinder.py",
    "code": "import Rhino\nimport scriptcontext\nimport System.Guid\n\ndef AddCylinder():\n    center_point = Rhino.Geometry.Point3d(0, 0, 0)\n    height_point = Rhino.Geometry.Point3d(0, 0, 10)\n    zaxis = height_point-center_point\n    plane = Rhino.Geometry.Plane(center_point, zaxis)\n    radius = 5\n    circle = Rhino.Geometry.Circle(plane, radius)\n    cylinder = Rhino.Geometry.Cylinder(circle, zaxis.Length)\n    brep = cylinder.ToBrep(True, True)\n    if brep:\n        if scriptcontext.doc.Objects.AddBrep(brep)!=System.Guid.Empty:\n            scriptcontext.doc.Views.Redraw()\n            return Rhino.Commands.Result.Success\n    return Rhino.Commands.Result.Failure\n\nif __name__==\"__main__\":\n    AddCylinder()\n",
    "members": [
      ["Rhino.Geometry.Cylinder", "Cylinder(Circle baseCircle, double height)"],
      ["Rhino.Geometry.Cylinder", "Brep ToBrep(bool capBottom, bool capTop)"],
      ["Rhino.Geometry.Plane", "Plane(Point3d origin, Vector3d normal)"]
    ]
  },
  {
    "name": "Addlayer.py",
    "code": "import Rhino\nimport scriptcontext\nimport System.Guid, System.Drawing.Color\n\ndef AddLayer():\n    # Cook up an unused layer name\n    unused_name = scriptcontext.doc.Layers.GetUnusedLayerName(False)\n\n    # Prompt the user to enter a layer name\n    gs = Rhino.Input.Custom.GetString()\n    gs.SetCommandPrompt(\"Name of layer to add\")\n    gs.SetDefaultString(unused_name)\n    gs.AcceptNothing(True)\n    gs.Get()\n    if gs.CommandResult()!=Rhino.Commands.Result.Success:\n        return gs.CommandResult()\n\n    # Was a layer named entered?\n    layer_name = gs.StringResult().Trim()\n    if not layer_name:\n        print \"Layer name cannot be blank.\"\n        return Rhino.Commands.Result.Cancel\n\n    # Is the layer name valid?\n    if not Rhino.DocObjects.Layer.IsValidName(layer_name):\n        print layer_name, \"is not a valid layer name.\"\n        return Rhino.Commands.Result.Cancel\n\n    # Does a layer with the same name already exist?\n    layer_index = scriptcontext.doc.Layers.Find(layer_name, True)\n    if layer_index>=0:\n        print \"A layer with the name\", layer_name, \"already exists.\"\n        return Rhino.Commands.Result.Cancel\n\n    # Add a new layer to the document\n    layer_index = scriptcontext.doc.Layers.Add(layer_name, System.Drawing.Color.Black)\n    if layer_index<0:\n        print \"Unable to add\", layer_name, \"layer.\"\n        return Rhino.Commands.Result.Failure\n\n    return Rhino.Commands.Result.Success\n\n\nif __name__==\"__main__\":\n    AddLayer()\n",
    "members": [
      ["Rhino.RhinoApp", "static void WriteLine(string message)"],
      ["Rhino.RhinoApp", "static void WriteLine(string format, object arg0)"],
      ["Rhino.DocObjects.Layer", "static bool IsValidName(string name)"],
      ["Rhino.Input.Custom.GetBaseClass", "void AcceptNothing(bool enable)"],
      ["Rhino.Input.Custom.GetBaseClass", "void SetDefaultString(string defaultValue)"],
      ["Rhino.Input.Custom.GetBaseClass", "string StringResult()"],
      ["Rhino.Input.Custom.GetString", "GetString()"],
      ["Rhino.Input.Custom.GetString", "GetResult Get()"],
      ["Rhino.DocObjects.Tables.LayerTable", "int Add(string layerName, Color layerColor)"],
      ["Rhino.DocObjects.Tables.LayerTable", "int Find(string layerName, bool ignoreDeletedLayers)"],
      ["Rhino.DocObjects.Tables.LayerTable", "Layer FindName(string layerName)"],
      ["Rhino.DocObjects.Tables.LayerTable", "string GetUnusedLayerName()"],
      ["Rhino.DocObjects.Tables.LayerTable", "string GetUnusedLayerName(bool ignoreDeleted)"]
    ]
  },
  {
    "name": "Addlayout.py",
    "code": "import Rhino\nimport scriptcontext\n\n# Generate a layout with a single detail view that zooms\n# to a list of objects\ndef AddLayout():\n    scriptcontext.doc.PageUnitSystem = Rhino.UnitSystem.Millimeters\n    page_views = scriptcontext.doc.Views.GetPageViews()\n    page_number = 1\n    if page_views: page_number = len(page_views) + 1\n    pageview = scriptcontext.doc.Views.AddPageView(\"A0_{0}\".format(page_number), 1189, 841)\n    if pageview:\n        top_left = Rhino.Geometry.Point2d(20,821)\n        bottom_right = Rhino.Geometry.Point2d(1169, 20)\n        detail = pageview.AddDetailView(\"ModelView\", top_left, bottom_right, Rhino.Display.DefinedViewportProjection.Top)\n        if detail:\n            pageview.SetActiveDetail(detail.Id)\n            detail.Viewport.ZoomExtents()\n            detail.DetailGeometry.IsProjectionLocked = True\n            detail.DetailGeometry.SetScale(1, scriptcontext.doc.ModelUnitSystem, 10, scriptcontext.doc.PageUnitSystem)\n            # Commit changes tells the document to replace the document's detail object\n            # with the modified one that we just adjusted\n            detail.CommitChanges()\n        pageview.SetPageAsActive()\n        scriptcontext.doc.Views.ActiveView = pageview\n        scriptcontext.doc.Views.Redraw()\n\nif __name__==\"__main__\":\n    AddLayout()",
    "members": [
      ["Rhino.RhinoDoc", "UnitSystem PageUnitSystem"],
      ["Rhino.Geometry.DetailView", "bool IsProjectionLocked"],
      ["Rhino.Geometry.DetailView", "bool SetScale(double modelLength, UnitSystem modelUnits, double pageLength, UnitSystem pageUnits)"],
      ["Rhino.DocObjects.RhinoObject", "bool CommitChanges()"],
      ["Rhino.Display.RhinoPageView", "DetailViewObject AddDetailView(string title, Point2d corner0, Point2d corner1, DefinedViewportProjection initialProjection)"],
      ["Rhino.Display.RhinoPageView", "bool SetActiveDetail(Guid detailId)"],
      ["Rhino.Display.RhinoPageView", "void SetPageAsActive()"],
      ["Rhino.Display.RhinoViewport", "bool ZoomExtents()"],
      ["Rhino.DocObjects.Tables.ViewTable", "RhinoPageView AddPageView(string title, double pageWidth, double pageHeight)"],
      ["Rhino.DocObjects.Tables.ViewTable", "RhinoPageView[] GetPageViews()"]
    ]
  },
  {
    "name": "Addline.py",
    "code": "import Rhino\nimport scriptcontext\nimport System.Guid\n\ndef AddLine():\n    gp = Rhino.Input.Custom.GetPoint()\n    gp.SetCommandPrompt(\"Start of line\")\n    gp.Get()\n    if gp.CommandResult()!=Rhino.Commands.Result.Success:\n        return gp.CommandResult()\n    pt_start = gp.Point()\n\n    gp.SetCommandPrompt(\"End of line\")\n    gp.SetBasePoint(pt_start, False)\n    gp.DrawLineFromPoint(pt_start, True)\n    gp.Get()\n    if gp.CommandResult() != Rhino.Commands.Result.Success:\n        return gp.CommandResult()\n    pt_end = gp.Point()\n    v = pt_end - pt_start\n    if v.IsTiny(Rhino.RhinoMath.ZeroTolerance):\n        return Rhino.Commands.Result.Nothing\n    \n    id = scriptcontext.doc.Objects.AddLine(pt_start, pt_end)\n    if id!=System.Guid.Empty:\n        scriptcontext.doc.Views.Redraw()\n        return Rhino.Commands.Result.Success\n    return Rhino.Commands.Result.Failure\n\nif __name__==\"__main__\":\n    AddLine()\n",
    "members": [
      ["Rhino.Geometry.Vector2d", "bool IsTiny(double tolerance)"],
      ["Rhino.Geometry.Vector3d", "bool IsTiny(double tolerance)"],
      ["Rhino.Input.Custom.GetBaseClass", "Point3d Point()"],
      ["Rhino.Input.Custom.GetBaseClass", "void SetCommandPrompt(string prompt)"],
      ["Rhino.Input.Custom.GetPoint", "GetPoint()"],
      ["Rhino.Input.Custom.GetPoint", "void DrawLineFromPoint(Point3d startPoint, bool showDistanceInStatusBar)"],
      ["Rhino.Input.Custom.GetPoint", "GetResult Get()"],
      ["Rhino.Input.Custom.GetPoint", "void SetBasePoint(Point3d basePoint, bool showDistanceInStatusBar)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddLine(Point3d from, Point3d to)"]
    ]
  },
  {
    "name": "Addlineardimension.py",
    "code": "import Rhino\nimport scriptcontext\nimport System.Guid\n\ndef AddLinearDimension():\n    rc, dimension = Rhino.Input.RhinoGet.GetLinearDimension()\n    if rc==Rhino.Commands.Result.Success:\n        if scriptcontext.doc.Objects.AddLinearDimension(dimension)==System.Guid.Empty:\n            rc = Rhino.Commands.Result.Failure\n        else:\n            scriptcontext.doc.Views.Redraw()\n    return rc\n\n\nif __name__==\"__main__\":\n    AddLinearDimension()\n",
    "members": [
      ["Rhino.Input.RhinoGet", "static Result GetLinearDimension(out LinearDimension dimension)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddLinearDimension(LinearDimension dimension)"]
    ]
  },
  {
    "name": "Addlineardimension2.py",
    "code": "import Rhino\nimport scriptcontext\nimport System.Guid\n\ndef AddLinearDimension2():\n    origin = Rhino.Geometry.Point3d(1,1,0)\n    offset = Rhino.Geometry.Point3d(11,1,0)\n    pt = Rhino.Geometry.Point3d((offset.X-origin.X)/2.0,3,0)\n    plane = Rhino.Geometry.Plane.WorldXY\n    plane.Origin = origin\n    \n    rc, u, v = plane.ClosestParameter(origin)\n    ext1 = Rhino.Geometry.Point2d(u,v)\n    rc, u, v = plane.ClosestParameter(offset)\n    ext2 = Rhino.Geometry.Point2d(u,v)\n    rc, u, v = plane.ClosestParameter(pt)\n    linePt = Rhino.Geometry.Point2d(u,v)\n    \n    dimension = Rhino.Geometry.LinearDimension(plane, ext1, ext2, linePt)\n    if scriptcontext.doc.Objects.AddLinearDimension(dimension)!=System.Guid.Empty:\n        scriptcontext.doc.Views.Redraw()\n        return Rhino.Commands.Result.Success\n    return Rhino.Commands.Result.Failure\n\nif __name__==\"__main__\":\n    AddLinearDimension2()\n",
    "members": [
      ["Rhino.Geometry.LinearDimension", "LinearDimension(Plane dimensionPlane, Point2d extensionLine1End, Point2d extensionLine2End, Point2d pointOnDimensionLine)"],
      ["Rhino.Geometry.Plane", "bool ClosestParameter(Point3d testPoint, out double s, out double t)"]
    ]
  },
  {
    "name": "Addmesh.py",
    "code": "import Rhino\nimport scriptcontext\nimport System.Guid\n\ndef AddMesh():\n    mesh = Rhino.Geometry.Mesh()\n    mesh.Vertices.Add(0.0, 0.0, 1.0) #0\n    mesh.Vertices.Add(1.0, 0.0, 1.0) #1\n    mesh.Vertices.Add(2.0, 0.0, 1.0) #2\n    mesh.Vertices.Add(3.0, 0.0, 0.0) #3\n    mesh.Vertices.Add(0.0, 1.0, 1.0) #4\n    mesh.Vertices.Add(1.0, 1.0, 2.0) #5\n    mesh.Vertices.Add(2.0, 1.0, 1.0) #6\n    mesh.Vertices.Add(3.0, 1.0, 0.0) #7\n    mesh.Vertices.Add(0.0, 2.0, 1.0) #8\n    mesh.Vertices.Add(1.0, 2.0, 1.0) #9\n    mesh.Vertices.Add(2.0, 2.0, 1.0) #10\n    mesh.Vertices.Add(3.0, 2.0, 1.0) #11\n    \n    mesh.Faces.AddFace(0, 1, 5, 4)\n    mesh.Faces.AddFace(1, 2, 6, 5)\n    mesh.Faces.AddFace(2, 3, 7, 6)\n    mesh.Faces.AddFace(4, 5, 9, 8)\n    mesh.Faces.AddFace(5, 6, 10, 9)\n    mesh.Faces.AddFace(6, 7, 11, 10)\n    mesh.Normals.ComputeNormals()\n    mesh.Compact()\n    if scriptcontext.doc.Objects.AddMesh(mesh)!=System.Guid.Empty:\n        scriptcontext.doc.Views.Redraw()\n        return Rhino.Commands.Result.Success\n    return Rhino.Commands.Result.Failure\n\n\nif __name__==\"__main__\":\n    AddMesh()\n",
    "members": [
      ["Rhino.Geometry.Mesh", "Mesh()"],
      ["Rhino.Geometry.Mesh", "MeshFaceList Faces"],
      ["Rhino.Geometry.Mesh", "MeshVertexNormalList Normals"],
      ["Rhino.Geometry.Mesh", "MeshVertexList Vertices"],
      ["Rhino.Geometry.Mesh", "bool Compact()"],
      ["Rhino.Geometry.Collections.MeshVertexList", "int Add(double x, double y, double z)"],
      ["Rhino.Geometry.Collections.MeshVertexList", "int Add(float x, float y, float z)"],
      ["Rhino.Geometry.Collections.MeshVertexNormalList", "bool ComputeNormals()"],
      ["Rhino.Geometry.Collections.MeshFaceList", "int AddFace(int vertex1, int vertex2, int vertex3, int vertex4)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddMesh(Mesh mesh)"]
    ]
  },
  {
    "name": "Addnamedview.py",
    "code": "import Rhino\nimport scriptcontext\nimport System.Guid\n\ndef AddNamedView():\n    rc, view = Rhino.Input.RhinoGet.GetView(\"Select view to adjust\")\n    if rc!=Rhino.Commands.Result.Success: return rc\n\n    rc, location = Rhino.Input.RhinoGet.GetPoint(\"Camera Location\", False)\n    if rc!=Rhino.Commands.Result.Success: return rc\n    \n    gp = Rhino.Input.Custom.GetPoint()\n    gp.SetCommandPrompt(\"Look At Location\")\n    gp.DrawLineFromPoint(location, False)\n    gp.Get()\n    if gp.CommandResult()!=Rhino.Commands.Result.Success:\n        return gp.CommandResult()\n    lookat = gp.Point()\n\n    name = view.ActiveViewport.Name\n    rc, name = Rhino.Input.RhinoGet.GetString(\"Name\", True, name)\n    if rc!=Rhino.Commands.Result.Success: return rc\n\n    vp = view.ActiveViewport\n    # save the current viewport projection\n    vp.PushViewProjection()\n    vp.CameraUp = Rhino.Geometry.Vector3d.ZAxis\n    vp.SetCameraLocation(location, False)\n    vp.SetCameraDirection(lookat - location, True)\n    vp.Name = name\n    \n    scriptcontext.doc.NamedViews.Add(name, vp.Id)\n    view.Redraw()\n    return Rhino.Commands.Result.Success\n\nif __name__==\"__main__\":\n    AddNamedView()\n",
    "members": [
      ["Rhino.RhinoDoc", "NamedViewTable NamedViews"],
      ["Rhino.Display.RhinoViewport", "Vector3d CameraUp"],
      ["Rhino.Display.RhinoViewport", "string Name"],
      ["Rhino.Display.RhinoViewport", "bool PopViewProjection()"],
      ["Rhino.Display.RhinoViewport", "void PushViewProjection()"],
      ["Rhino.Display.RhinoViewport", "void SetCameraDirection(Vector3d cameraDirection, bool updateTargetLocation)"],
      ["Rhino.Display.RhinoViewport", "void SetCameraLocation(Point3d cameraLocation, bool updateTargetLocation)"],
      ["Rhino.Input.RhinoGet", "static Result GetPoint(string prompt, bool acceptNothing, out Point3d point)"],
      ["Rhino.Input.RhinoGet", "static Result GetString(string prompt, bool acceptNothing, ref string outputString)"],
      ["Rhino.Input.RhinoGet", "static Result GetView(string commandPrompt, out RhinoView view)"],
      ["Rhino.DocObjects.Tables.NamedViewTable", "int Add(string name, Guid viewportId)"]
    ]
  },
  {
    "name": "Addnurbscircle.py",
    "code": "using System;\n\npartial class Examples\n{\n  public static Rhino.Commands.Result AddNurbsCircle(Rhino.RhinoDoc doc)\n  {\n    // The easy way to get a NURBS curve from a circle is with\n    // the following two lines of code.\n    //\n    // Rhino.Geometry.Circle c = new Rhino.Geometry.Circle(20);\n    // Rhino.Geometry.NurbsCurve nc = c.ToNurbsCurve();\n    //\n    // This sample demonstrates creating a NURBS curve from scratch.\n    int dimension = 3;\n    bool isRational = true;\n    int order = 3;\n    int cv_count = 9;\n    Rhino.Geometry.NurbsCurve nc = new Rhino.Geometry.NurbsCurve(dimension, isRational, order, cv_count);\n    nc.Points.SetPoint(0, 1.0, 0.0, 0.0, 1.0);\n    nc.Points.SetPoint(1, 0.707107, 0.707107, 0.0, 0.707107);\n    nc.Points.SetPoint(2, 0.0, 1.0, 0.0, 1.0);\n    nc.Points.SetPoint(3, -0.707107, 0.707107, 0.0, 0.707107);\n    nc.Points.SetPoint(4, -1.0, 0.0, 0.0, 1.0);\n    nc.Points.SetPoint(5, -0.707107, -0.707107, 0.0, 0.707107);\n    nc.Points.SetPoint(6, 0.0, -1.0, 0.0, 1.0);\n    nc.Points.SetPoint(7, 0.707107, -0.707107, 0.0, 0.707107);\n    nc.Points.SetPoint(8, 1.0, 0.0, 0.0, 1.0);\n    nc.Knots[0] = 0.0;\n    nc.Knots[1] = 0.0;\n    nc.Knots[2] = 0.5 * Math.PI;\n    nc.Knots[3] = 0.5 * Math.PI;\n    nc.Knots[4] = Math.PI;\n    nc.Knots[5] = Math.PI;\n    nc.Knots[6] = 1.5 * Math.PI;\n    nc.Knots[7] = 1.5 * Math.PI;\n    nc.Knots[8] = 2.0 * Math.PI;\n    nc.Knots[9] = 2.0 * Math.PI;\n    if (nc.IsValid)\n    {\n      doc.Objects.AddCurve(nc);\n      doc.Views.Redraw();\n      return Rhino.Commands.Result.Success;\n    }\n    return Rhino.Commands.Result.Failure;\n  }\n}\n",
    "members": [
      ["Rhino.Geometry.NurbsCurve", "NurbsCurve(int dimension, bool rational, int order, int pointCount)"],
      ["Rhino.Geometry.NurbsCurve", "NurbsCurveKnotList Knots"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddCurve(Curve curve)"]
    ]
  },
  {
    "name": "Addnurbscurve.py",
    "code": "import Rhino\nimport scriptcontext\nimport System.Guid\n\ndef AddNurbsCurve():\n    points = Rhino.Collections.Point3dList(5)\n    points.Add(0, 0, 0)\n    points.Add(0, 2, 0)\n    points.Add(2, 3, 0)\n    points.Add(4, 2, 0)\n    points.Add(4, 0, 0)\n\n    nc = Rhino.Geometry.NurbsCurve.Create(False, 3, points)\n    rc = Rhino.Commands.Result.Failure\n    if nc and nc.IsValid:\n        if scriptcontext.doc.Objects.AddCurve(nc)!=System.Guid.Empty:\n            scriptcontext.doc.Views.Redraw()\n            rc = Rhino.Commands.Result.Success\n    return rc\n\nif __name__==\"__main__\":\n    AddNurbsCurve()\n",
    "members": [
      ["Rhino.Geometry.NurbsCurve", "static NurbsCurve Create(bool periodic, int degree, IEnumerable<Point3d> points)"],
      ["Rhino.Collections.Point3dList", "Point3dList(int initialCapacity)"],
      ["Rhino.Collections.Point3dList", "void Add(double x, double y, double z)"]
    ]
  },
  {
    "name": "Addobjectstogroup.py",
    "code": "import Rhino\nimport scriptcontext\n\ndef AddObjectsToGroup():\n    go = Rhino.Input.Custom.GetObject()\n    go.SetCommandPrompt(\"Select objects to group\")\n    go.GroupSelect = True\n    go.GetMultiple(1, 0)\n    if go.CommandResult()!=Rhino.Commands.Result.Success:\n        return go.CommandResult()\n    \n    ids = [go.Object(i).ObjectId for i in range(go.ObjectCount)]\n    index = scriptcontext.doc.Groups.Add(ids)\n    scriptcontext.doc.Views.Redraw()\n    if index>=0: return Rhino.Commands.Result.Success\n    return Rhino.Commands.Result.Failure\n\n\nif __name__ == \"__main__\":\n    AddObjectsToGroup()\n",
    "members": [
      ["Rhino.RhinoDoc", "GroupTable Groups"],
      ["Rhino.Input.Custom.GetObject", "GetObject()"],
      ["Rhino.Input.Custom.GetObject", "GetResult GetMultiple(int minimumNumber, int maximumNumber)"],
      ["Rhino.DocObjects.Tables.GroupTable", "int Add(IEnumerable<Guid> objectIds)"]
    ]
  },
  {
    "name": "Addradialdimension.py",
    "code": "from Rhino import *\nfrom Rhino.DocObjects import *\nfrom Rhino.Commands import *\nfrom Rhino.Geometry import *\nfrom Rhino.Input import *\nfrom scriptcontext import doc\n\ndef RunCommand():\n  rc, obj_ref = RhinoGet.GetOneObject(\"Select curve for radius dimension\", \n    True, ObjectType.Curve)\n  if rc != Result.Success:\n    return rc\n  curve, curve_parameter = obj_ref.CurveParameter()\n  if curve == None:\n    return Result.Failure\n\n  if curve.IsLinear() or curve.IsPolyline():\n    print \"Curve must be non-linear.\"\n    return Result.Nothing\n\n  # in this example just deal with planar curves\n  if not curve.IsPlanar():\n    print \"Curve must be planar.\"\n    return Result.Nothing\n\n  point_on_curve = curve.PointAt(curve_parameter)\n  curvature_vector = curve.CurvatureAt(curve_parameter)\n  len = curvature_vector.Length\n  if len < RhinoMath.SqrtEpsilon:\n    print \"Curve is almost linear and therefore has no curvature.\"\n    return Result.Nothing\n\n  center = point_on_curve + (curvature_vector/(len*len))\n  _, plane = curve.TryGetPlane()\n  radial_dimension = \\\n    RadialDimension(center, point_on_curve, plane.XAxis, plane.Normal, 5.0)\n  doc.Objects.AddRadialDimension(radial_dimension)\n  doc.Views.Redraw()\n  return Result.Success\n\nif __name__==\"__main__\":\n  RunCommand()",
    "members": [
      ["Rhino.Geometry.Curve", "Vector3d CurvatureAt(double t)"],
      ["Rhino.Geometry.Curve", "bool IsLinear()"],
      ["Rhino.Geometry.Curve", "bool IsPlanar()"],
      ["Rhino.Geometry.Curve", "bool IsPolyline()"],
      ["Rhino.Geometry.Curve", "Point3d PointAt(double t)"],
      ["Rhino.DocObjects.ObjRef", "Curve CurveParameter(out double parameter)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddRadialDimension(RadialDimension dimension)"]
    ]
  },
  {
    "name": "Addsphere.py",
    "code": "import Rhino\nimport scriptcontext\nimport System.Guid\n\ndef AddSphere():\n    center = Rhino.Geometry.Point3d(0, 0, 0)\n    radius = 5.0\n    sphere = Rhino.Geometry.Sphere(center, radius)\n    if scriptcontext.doc.Objects.AddSphere(sphere)!=System.Guid.Empty:\n        scriptcontext.doc.Views.Redraw()\n        return Rhino.Commands.Result.Success\n    return Rhino.Commands.Result.Failure\n\n\nif __name__ == \"__main__\":\n    AddSphere()\n",
    "members": [
      ["Rhino.Geometry.Sphere", "Sphere(Point3d center, double radius)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddSphere(Sphere sphere)"]
    ]
  },
  {
    "name": "Addtext.py",
    "code": "import Rhino\nimport scriptcontext\nimport System.Guid\n\ndef AddAnnotationText():\n    pt = Rhino.Geometry.Point3d(10, 0, 0)\n    text = \"Hello RhinoCommon\"\n    height = 2.0\n    font = \"Arial\"\n    plane = scriptcontext.doc.Views.ActiveView.ActiveViewport.ConstructionPlane()\n    plane.Origin = pt\n    id = scriptcontext.doc.Objects.AddText(text, plane, height, font, False, False)\n    if id!=System.Guid.Empty:\n        scriptcontext.doc.Views.Redraw()\n        return Rhino.Commands.Result.Success\n    return Rhino.Commands.Result.Failure\n\n\nif __name__==\"__main__\":\n    AddAnnotationText()\n",
    "members": [
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddText(string text, Plane plane, double height, string fontName, bool bold, bool italic)"]
    ]
  },
  {
    "name": "Addtorus.py",
    "code": "import Rhino\nimport scriptcontext\nimport System.Guid\n\ndef AddTorus():\n    major_radius = 4.0\n    minor_radius = 2.0\n\n    plane = Rhino.Geometry.Plane.WorldXY\n    torus = Rhino.Geometry.Torus(plane, major_radius, minor_radius)\n    revsrf = torus.ToRevSurface()\n\n    if scriptcontext.doc.Objects.AddSurface(revsrf)!=System.Guid.Empty:\n        scriptcontext.doc.Views.Redraw()\n        return Rhino.Commands.Result.Success\n    return Rhino.Commands.Result.Failure\n\n\nif __name__==\"__main__\":\n    AddTorus()\n",
    "members": [
      ["Rhino.Geometry.Torus", "Torus(Plane basePlane, double majorRadius, double minorRadius)"],
      ["Rhino.Geometry.Torus", "RevSurface ToRevSurface()"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddSurface(Surface surface)"]
    ]
  },
  {
    "name": "Addtruncatedcone.py",
    "code": "import Rhino\nimport scriptcontext\nimport System.Guid\n\ndef AddTruncatedCone():\n    bottom_pt = Rhino.Geometry.Point3d(0,0,0)\n    bottom_radius = 2\n    bottom_circle = Rhino.Geometry.Circle(bottom_pt, bottom_radius)\n\n    top_pt = Rhino.Geometry.Point3d(0,0,10)\n    top_radius = 6\n    top_circle = Rhino.Geometry.Circle(top_pt, top_radius)\n\n    shapeCurve = Rhino.Geometry.LineCurve(bottom_circle.PointAt(0), top_circle.PointAt(0))\n    axis = Rhino.Geometry.Line(bottom_circle.Center, top_circle.Center)\n    revsrf = Rhino.Geometry.RevSurface.Create(shapeCurve, axis)\n    tcone_brep = Rhino.Geometry.Brep.CreateFromRevSurface(revsrf, True, True)\n\n    if scriptcontext.doc.Objects.AddBrep(tcone_brep)!=System.Guid.Empty:\n        scriptcontext.doc.Views.Redraw()\n        return Rhino.Commands.Result.Success\n    return Rhino.Commands.Result.Failure\n\n\nif __name__==\"__main__\":\n    AddTruncatedCone()\n",
    "members": [
      ["Rhino.Geometry.Brep", "static Brep CreateFromRevSurface(RevSurface surface, bool capStart, bool capEnd)"],
      ["Rhino.Geometry.Circle", "Circle(Point3d center, double radius)"],
      ["Rhino.Geometry.LineCurve", "LineCurve(Point3d from, Point3d to)"],
      ["Rhino.Geometry.RevSurface", "static RevSurface Create(Curve revoluteCurve, Line axisOfRevolution)"]
    ]
  },
  {
    "name": "Advanceddisplay.py",
    "code": "import Rhino\nimport scriptcontext\n\n# The following example demonstrates how to modify advanced display settings\n# using RhinoCommon. In this example, a display mode's mesh wireframe thickness\n# (in pixels) will be modified.\ndef AdvancedDisplay():\n    # Use the display attributes manager to build a list of display modes.\n    # Note, these are copies of the originals...\n    display_modes = Rhino.Display.DisplayModeDescription.GetDisplayModes()\n    if not display_modes: return Rhino.Commands.Result.Failure\n    \n    # Construct an options picker so the user can pick which\n    # display mode they want modified\n    go = Rhino.Input.Custom.GetOption()\n    go.SetCommandPrompt(\"Display mode to modify mesh thickness\")\n    opt_list = []\n    for i, mode in enumerate(display_modes):\n        english_name = mode.EnglishName\n        english_name = english_name.translate(None, \"_ -,.\")\n        opt_list.append( go.AddOption(english_name) )\n    \n    # Get the command option\n    go.Get()\n    if go.CommandResult()!=Rhino.Commands.Result.Success:\n      return go.CommandResult();\n\n    selected_index = go.Option().Index\n    selected_description = None\n    for i,option in enumerate(opt_list):\n        if option==selected_index:\n            selected_description = display_modes[i]\n            break\n    # Validate...\n    if not selected_description: return Rhino.Commands.Result.Failure\n    \n    # Modify the desired display mode. In this case, we\n    # will just set the mesh wireframe thickness to zero.\n    selected_description.DisplayAttributes.MeshSpecificAttributes.MeshWireThickness = 0\n    # Use the display attributes manager to update the display mode.\n    Rhino.Display.DisplayModeDescription.UpdateDisplayMode(selected_description)\n    # Force the document to regenerate.\n    scriptcontext.doc.Views.Redraw()\n    return Rhino.Commands.Result.Success\n\nif __name__==\"__main__\":\n    AdvancedDisplay()\n",
    "members": [
      ["Rhino.Display.DisplayModeDescription", "DisplayPipelineAttributes DisplayAttributes"],
      ["Rhino.Display.DisplayModeDescription", "static DisplayModeDescription[] GetDisplayModes()"],
      ["Rhino.Display.DisplayModeDescription", "static bool UpdateDisplayMode(DisplayModeDescription displayMode)"],
      ["Rhino.Input.Custom.GetBaseClass", "int AddOption(string englishOption)"]
    ]
  },
  {
    "name": "Arclengthpoint.py",
    "code": "import Rhino\nimport scriptcontext\n\ndef ArcLengthPoint():\n    rc, objref = Rhino.Input.RhinoGet.GetOneObject(\"Select curve\", True, Rhino.DocObjects.ObjectType.Curve)\n    if rc!=Rhino.Commands.Result.Success: return rc\n    crv = objref.Curve()\n    if not crv: return Rhino.Commands.Result.Failure\n    crv_length = crv.GetLength()\n    length = 0\n    rc, length = Rhino.Input.RhinoGet.GetNumber(\"Length from start\", True, length, 0, crv_length)\n    if rc!=Rhino.Commands.Result.Success: return rc\n    pt = crv.PointAtLength(length)\n    if pt.IsValid:\n        scriptcontext.doc.Objects.AddPoint(pt)\n        scriptcontext.doc.Views.Redraw()\n    return Rhino.Commands.Result.Success\n\nif __name__==\"__main__\":\n    ArcLengthPoint()\n",
    "members": [
      ["Rhino.Geometry.Curve", "double GetLength()"],
      ["Rhino.Geometry.Curve", "Point3d PointAtLength(double length)"]
    ]
  },
  {
    "name": "Arraybydistance.py",
    "code": "import Rhino\nimport scriptcontext\n\ndef dynamic_array():\n    rc, objref = Rhino.Input.RhinoGet.GetOneObject(\"Select object\", True, Rhino.DocObjects.ObjectType.AnyObject)\n    if rc!=Rhino.Commands.Result.Success: return\n    \n    rc, pt_start = Rhino.Input.RhinoGet.GetPoint(\"Start point\", False)\n    if rc!=Rhino.Commands.Result.Success: return\n    \n    obj = objref.Object()\n    if not obj: return\n    \n    dist = 1\n    if scriptcontext.sticky.has_key(\"dynamic_array_distance\"):\n        dist = scriptcontext.sticky[\"dynamic_array_distance\"]\n    # This is a function that is called whenever the GetPoint's\n    # DynamicDraw event occurs\n    def ArrayByDistanceDraw( sender, args ):\n        rhobj = args.Source.Tag\n        if not rhobj: return\n        vec = args.CurrentPoint - pt_start\n        length = vec.Length\n        vec.Unitize()\n        count = int(length / dist)\n        for i in range(1,count):\n            translate = vec * (i*dist)\n            xf = Rhino.Geometry.Transform.Translation(translate)\n            args.Display.DrawObject(rhobj, xf)\n\n    # Create an instance of a GetPoint class and add a delegate\n    # for the DynamicDraw event\n    gp = Rhino.Input.Custom.GetPoint()\n    gp.DrawLineFromPoint(pt_start, True)\n    optdouble = Rhino.Input.Custom.OptionDouble(dist)\n    constrain = False\n    optconstrain = Rhino.Input.Custom.OptionToggle(constrain,\"Off\", \"On\")\n    gp.AddOptionDouble(\"Distance\", optdouble)\n    gp.AddOptionToggle(\"Constrain\", optconstrain)\n    gp.DynamicDraw += ArrayByDistanceDraw\n    gp.Tag = obj\n    while gp.Get()==Rhino.Input.GetResult.Option:\n        dist = optdouble.CurrentValue\n        if constrain!=optconstrain.CurrentValue:\n            constrain = optconstrain.CurrentValue\n            if constrain:\n                gp2 = Rhino.Input.Custom.GetPoint()\n                gp2.DrawLineFromPoint(pt_start, True)\n                gp2.SetCommandPrompt(\"Second point on constraint line\")\n                if gp2.Get()==Rhino.Input.GetResult.Point:\n                    gp.Constrain(pt_start, gp2.Point())\n                else:\n                    gp.ClearCommandOptions()\n                    optconstrain.CurrentValue = False\n                    constrain = False\n                    gp.AddOptionDouble(\"Distance\", optdouble)\n                    gp.AddOptionToggle(\"Constrain\", optconstrain)\n            else:\n                gp.ClearConstraints()\n        continue\n    if gp.CommandResult()==Rhino.Commands.Result.Success:\n        scriptcontext.sticky[\"dynamic_array_distance\"] = dist\n        pt = gp.Point()\n        vec = pt - pt_start\n        length = vec.Length\n        vec.Unitize()\n        count = int(length / dist)\n        for i in range(1, count):\n            translate = vec * (i*dist)\n            xf = Rhino.Geometry.Transform.Translation(translate)\n            scriptcontext.doc.Objects.Transform(obj,xf,False)\n        scriptcontext.doc.Views.Redraw()\n\n\nif( __name__ == \"__main__\" ):\n    dynamic_array()",
    "members": [
      ["Rhino.Display.DisplayPipeline", "void DrawObject(RhinoObject rhinoObject, Transform xform)"],
      ["Rhino.Input.Custom.GetBaseClass", "void ClearCommandOptions()"],
      ["Rhino.Input.Custom.GetPoint", "object Tag"],
      ["Rhino.Input.Custom.GetPoint", "void ClearConstraints()"],
      ["Rhino.Input.Custom.GetPoint", "bool Constrain(Point3d from, Point3d to)"],
      ["Rhino.Input.Custom.GetPointDrawEventArgs", "GetPoint Source"]
    ]
  },
  {
    "name": "Blockinsertionpoint.py",
    "code": "import Rhino\nimport scriptcontext\n\ndef BlockInsertionPoint():\n    rc, objref = Rhino.Input.RhinoGet.GetOneObject(\"Select instance\", True, Rhino.DocObjects.ObjectType.InstanceReference)\n    if rc!=Rhino.Commands.Result.Success: return rc;\n    instance = objref.Object()\n    if instance:\n        pt = instance.InsertionPoint\n        scriptcontext.doc.Objects.AddPoint(pt)\n        scriptcontext.doc.Views.Redraw()\n        return Rhino.Commands.Result.Success\n    return Rhino.Commands.Result.Failure\n\nif __name__==\"__main__\":\n    BlockInsertionPoint()\n",
    "members": [
      ["Rhino.DocObjects.InstanceObject", "Point3d InsertionPoint"]
    ]
  },
  {
    "name": "Booleandifference.py",
    "code": "import Rhino\nimport scriptcontext\n\ndef BooleanDifference():\n    filter = Rhino.DocObjects.ObjectType.PolysrfFilter\n    rc, objrefs = Rhino.Input.RhinoGet.GetMultipleObjects(\"Select first set of polysurfaces\", False, filter)\n    if rc != Rhino.Commands.Result.Success: return rc\n    if not objrefs: return Rhino.Commands.Result.Failure\n\n    in_breps0 = []\n    for objref in objrefs:\n        brep = objref.Brep()\n        if brep: in_breps0.append(brep)\n\n    scriptcontext.doc.Objects.UnselectAll()\n    rc, objrefs = Rhino.Input.RhinoGet.GetMultipleObjects(\"Select second set of polysurfaces\", False, filter)\n    if rc != Rhino.Commands.Result.Success: return rc\n    if not objrefs: return Rhino.Commands.Result.Failure\n\n    in_breps1 = []\n    for objref in objrefs:\n        brep = objref.Brep()\n        if brep: in_breps1.append(brep)\n\n    tolerance = scriptcontext.doc.ModelAbsoluteTolerance\n    breps = Rhino.Geometry.Brep.CreateBooleanDifference(in_breps0, in_breps1, tolerance)\n    if not breps: return Rhino.Commands.Result.Nothing\n    for brep in breps: scriptcontext.doc.Objects.AddBrep(brep)\n    scriptcontext.doc.Views.Redraw()\n    return Rhino.Commands.Result.Success\n\nif __name__==\"__main__\":\n    BooleanDifference()",
    "members": [
      ["Rhino.Geometry.Brep", "static Brep[] CreateBooleanDifference(IEnumerable<Brep> firstSet, IEnumerable<Brep> secondSet, double tolerance)"],
      ["Rhino.Geometry.Brep", "static Brep[] CreateBooleanDifference(IEnumerable<Brep> firstSet, IEnumerable<Brep> secondSet, double tolerance, bool manifoldOnly)"],
      ["Rhino.DocObjects.ObjRef", "Brep Brep()"],
      ["Rhino.Input.RhinoGet", "static Result GetMultipleObjects(string prompt, bool acceptNothing, ObjectType filter, out ObjRef[] rhObjects)"]
    ]
  },
  {
    "name": "Circlecenter.py",
    "code": "import Rhino\nimport scriptcontext\n\ndef CircleCenter():\n    go = Rhino.Input.Custom.GetObject()\n    go.SetCommandPrompt(\"Select objects\")\n    go.GeometryFilter = Rhino.DocObjects.ObjectType.Curve\n    go.GeometryAttributeFilter = Rhino.Input.Custom.GeometryAttributeFilter.ClosedCurve\n    go.GetMultiple(1, 0)\n    if go.CommandResult()!=Rhino.Commands.Result.Success:\n        return go.CommandResult()\n\n    objrefs = go.Objects()\n    if not objrefs: return Rhino.Commands.Result.Nothing\n\n    tolerance = scriptcontext.doc.ModelAbsoluteTolerance\n    for i, objref in enumerate(objrefs):\n        # get the curve geometry\n        curve = objref.Curve()\n        if not curve: continue\n        rc, circle = curve.TryGetCircle( tolerance )\n        if rc:\n            print \"Circle\", i+1, \": center = \", circle.Center\n    return Rhino.Commands.Result.Success\n\nif __name__==\"__main__\":\n    CircleCenter()",
    "members": [
      ["Rhino.Geometry.Curve", "bool TryGetCircle(out Circle circle, double tolerance)"],
      ["Rhino.Input.Custom.GetObject", "GeometryAttributeFilter GeometryAttributeFilter"]
    ]
  },
  {
    "name": "Closestpoint.py",
    "code": "import Rhino\nimport rhinoscriptsyntax as rs\n\n# data passed to the RTree's SearchCallback function that\n# we can use for recording what is going on\nclass SearchData:\n    def __init__(self, mesh, point):\n        self.HitCount = 0\n        self.Mesh = mesh\n        self.Point = point\n        self.Index = -1\n        self.Distance = 0\n        \n\ndef SearchCallback(sender, e):\n    data = e.Tag\n    data.HitCount += 1\n    vertex = data.Mesh.Vertices[e.Id]\n    distance = data.Point.DistanceTo(vertex)\n    if data.Index == -1 or data.Distance > distance:\n        # shrink the sphere to help improve the test\n        e.SearchSphere = Rhino.Geometry.Sphere(data.Point, distance)\n        data.Index = e.Id\n        data.Distance = distance\n\ndef RunSearch():\n    id = rs.GetObject(\"select mesh\", rs.filter.mesh)\n    mesh = rs.coercemesh(id)\n    if mesh:\n        rs.UnselectObject(id)\n        tree = Rhino.Geometry.RTree()\n        # I can add a RhinoCommon function that just builds an rtree from the\n        # vertices in one quick shot, but for now...\n        for i,vertex in enumerate(mesh.Vertices): tree.Insert(vertex, i)\n        \n        while(True):\n            point = rs.GetPoint(\"test point\")\n            if not point: break\n            \n            data = SearchData(mesh, point)\n            # Use the first vertex in the mesh to define a start sphere\n            distance = point.DistanceTo(mesh.Vertices[0])\n            sphere = Rhino.Geometry.Sphere(point, distance * 1.1)\n            if tree.Search(sphere, SearchCallback, data):\n                rs.AddPoint(mesh.Vertices[data.Index])\n                print \"Found point in {0} tests\".format(data.HitCount)\n\nif __name__==\"__main__\":\n    RunSearch()\n",
    "members": [
      ["Rhino.Geometry.RTree", "RTree()"],
      ["Rhino.Geometry.RTree", "bool Insert(Point3d point, int elementId)"],
      ["Rhino.Geometry.RTree", "bool Search(Sphere sphere, EventHandler<RTreeEventArgs> callback, object tag)"]
    ]
  },
  {
    "name": "Commandlineoptions.py",
    "code": "import Rhino\nimport scriptcontext\n\ndef CommandLineOptions():\n    # For this example we will use a GetPoint class, but all of the custom\n    # \"Get\" classes support command line options.\n    gp = Rhino.Input.Custom.GetPoint()\n    gp.SetCommandPrompt(\"GetPoint with options\")\n    \n    # set up the options\n    intOption = Rhino.Input.Custom.OptionInteger(1, 1, 99)\n    dblOption = Rhino.Input.Custom.OptionDouble(2.2, 0, 99.9)\n    boolOption = Rhino.Input.Custom.OptionToggle(True, \"Off\", \"On\")\n    listValues = \"Item0\", \"Item1\", \"Item2\", \"Item3\", \"Item4\"\n    \n    gp.AddOptionInteger(\"Integer\", intOption)\n    gp.AddOptionDouble(\"Double\", dblOption)\n    gp.AddOptionToggle(\"Boolean\", boolOption)\n    listIndex = 3\n    opList = gp.AddOptionList(\"List\", listValues, listIndex)\n    while True:\n        # perform the get operation. This will prompt the user to\n        # input a point, but also allow for command line options\n        # defined above\n        get_rc = gp.Get()\n        if gp.CommandResult()!=Rhino.Commands.Result.Success:\n            return gp.CommandResult()\n        if get_rc==Rhino.Input.GetResult.Point:\n            point = gp.Point()\n            scriptcontext.doc.Objects.AddPoint(point)\n            scriptcontext.doc.Views.Redraw()\n            print \"Command line option values are\"\n            print \" Integer =\", intOption.CurrentValue\n            print \" Double =\", dblOption.CurrentValue\n            print \" Boolean =\", boolOption.CurrentValue\n            print \" List =\", listValues[listIndex]\n        elif get_rc==Rhino.Input.GetResult.Option:\n            if gp.OptionIndex()==opList:\n              listIndex = gp.Option().CurrentListOptionIndex\n            continue\n        break\n    return Rhino.Commands.Result.Success\n\n\nif __name__ == \"__main__\":\n    CommandLineOptions()\n\n",
    "members": [
      ["Rhino.Input.Custom.GetBaseClass", "int AddOptionDouble(LocalizeStringPair optionName, ref OptionDouble numberValue)"],
      ["Rhino.Input.Custom.GetBaseClass", "int AddOptionDouble(string englishName, ref OptionDouble numberValue)"],
      ["Rhino.Input.Custom.GetBaseClass", "int AddOptionInteger(LocalizeStringPair optionName, ref OptionInteger intValue)"],
      ["Rhino.Input.Custom.GetBaseClass", "int AddOptionInteger(string englishName, ref OptionInteger intValue)"],
      ["Rhino.Input.Custom.GetBaseClass", "int AddOptionToggle(LocalizeStringPair optionName, ref OptionToggle toggleValue)"],
      ["Rhino.Input.Custom.GetBaseClass", "int AddOptionToggle(string englishName, ref OptionToggle toggleValue)"],
      ["Rhino.Input.Custom.CommandLineOption", "int CurrentListOptionIndex"],
      ["Rhino.Input.Custom.OptionToggle", "OptionToggle(bool initialValue, string offValue, string onValue)"],
      ["Rhino.Input.Custom.OptionToggle", "bool CurrentValue"],
      ["Rhino.Input.Custom.OptionDouble", "OptionDouble(double initialValue, double lowerLimit, double upperLimit)"],
      ["Rhino.Input.Custom.OptionDouble", "double CurrentValue"],
      ["Rhino.Input.Custom.OptionInteger", "OptionInteger(int initialValue, int lowerLimit, int upperLimit)"],
      ["Rhino.Input.Custom.OptionInteger", "int CurrentValue"]
    ]
  },
  {
    "name": "Conduitarrowheads.py",
    "code": "import Rhino\nimport System.Drawing\nimport scriptcontext\nimport rhinoscriptsyntax as rs\n\nclass DrawArrowHeadsConduit(Rhino.Display.DisplayConduit):\n  def __init__(self, line, screenSize, worldSize):\n    self.line = line\n    self.screenSize = screenSize\n    self.worldSize = worldSize\n\n  def DrawForeground(self, e):\n    e.Display.DrawArrow(self.line, System.Drawing.Color.Black, self.screenSize, self.worldSize)\n\ndef RunCommand():\n  # get arrow head size\n  go = Rhino.Input.Custom.GetOption()\n  go.SetCommandPrompt(\"ArrowHead length in screen size (pixles) or world size (percentage of arrow lenght)?\")\n  go.AddOption(\"screen\")\n  go.AddOption(\"world\")\n  go.Get()\n  if (go.CommandResult() != Rhino.Commands.Result.Success):\n    return go.CommandResult()\n\n  screenSize = 0\n  worldSize = 0.0\n  if (go.Option().EnglishName == \"screen\"):\n    gi = Rhino.Input.Custom.GetInteger()\n    gi.SetLowerLimit(0,True)\n    gi.SetCommandPrompt(\"Length of arrow head in pixels\")\n    gi.Get()\n    if (gi.CommandResult() != Rhino.Commands.Result.Success):\n      return gi.CommandResult()\n    screenSize = gi.Number()\n  else:\n    gi = Rhino.Input.Custom.GetInteger()\n    gi.SetLowerLimit(0, True)\n    gi.SetUpperLimit(100, False)\n    gi.SetCommandPrompt(\"Lenght of arrow head in percentage of total arrow lenght\")\n    gi.Get()\n    if (gi.CommandResult() != Rhino.Commands.Result.Success):\n      return gi.CommandResult()\n    worldSize = gi.Number()/100.0\n\n\n  # get arrow start and end points\n  gp = Rhino.Input.Custom.GetPoint()\n  gp.SetCommandPrompt(\"Start of line\")\n  gp.Get()\n  if (gp.CommandResult() != Rhino.Commands.Result.Success):\n    return gp.CommandResult()\n  ptStart = gp.Point()\n\n  gp.SetCommandPrompt(\"End of line\")\n  gp.SetBasePoint(ptStart, False)\n  gp.DrawLineFromPoint(ptStart, True)\n  gp.Get()\n  if (gp.CommandResult() != Rhino.Commands.Result.Success):\n    return gp.CommandResult()\n  ptEnd = gp.Point()\n\n\n  v = ptEnd - ptStart\n  if (v.IsTiny(Rhino.RhinoMath.ZeroTolerance)):\n    return Rhino.Commands.Result.Nothing\n\n  line = Rhino.Geometry.Line(ptStart, ptEnd)\n\n  conduit = DrawArrowHeadsConduit(line, screenSize, worldSize)\n  conduit.Enabled = True\n  scriptcontext.doc.Views.Redraw()\n  rs.GetString(\"Pausing for user input\")\n  conduit.Enabled = False\n  scriptcontext.doc.Views.Redraw()\n\n  return Rhino.Commands.Result.Success\n\nif __name__==\"__main__\":\n  RunCommand()\n",
    "members": [
      ["Rhino.Display.DisplayPipeline", "void DrawArrow(Line line, Color color, double screenSize, double relativeSize)"]
    ]
  },
  {
    "name": "Conduitbitmap.py",
    "code": "import Rhino\nfrom Rhino.Geometry import *\nimport System.Drawing\nimport Rhino.Display\nimport scriptcontext\nimport rhinoscriptsyntax as rs\n\nclass CustomConduit(Rhino.Display.DisplayConduit):\n    def __init__(self):\n      flag = System.Drawing.Bitmap(100,100)\n      for x in range(0,100):\n        for y in range(0,100):\n          flag.SetPixel(x, y, System.Drawing.Color.Red)\n      g = System.Drawing.Graphics.FromImage(flag)\n      g.FillEllipse(System.Drawing.Brushes.Blue, 25, 25, 50, 50)\n      self.display_bitmap = Rhino.Display.DisplayBitmap(flag)\n\n    def DrawForeground(self, e):\n      e.Display.DrawBitmap(self.display_bitmap, 50, 50, System.Drawing.Color.Red)\n\nif __name__== \"__main__\":\n    conduit = CustomConduit()\n    conduit.Enabled = True\n    scriptcontext.doc.Views.Redraw()\n    rs.GetString(\"Pausing for user input\")\n    conduit.Enabled = False\n    scriptcontext.doc.Views.Redraw()",
    "members": [
      ["Rhino.Display.DisplayPipeline", "void DrawBitmap(DisplayBitmap bitmap, int left, int top)"]
    ]
  },
  {
    "name": "Constrainedcopy.py",
    "code": "import Rhino\nimport scriptcontext\n\ndef constrainedcopy():\n    #get a single closed curve\n    go = Rhino.Input.Custom.GetObject()\n    go.SetCommandPrompt(\"Select curve\")\n    go.GeometryFilter = Rhino.DocObjects.ObjectType.Curve\n    go.GeometryAttributeFilter = Rhino.Input.Custom.GeometryAttributeFilter.ClosedCurve\n    go.Get()\n    if go.CommandResult() != Rhino.Commands.Result.Success: return\n    objref = go.Object(0)\n    base_curve = objref.Curve()\n    first_point = objref.SelectionPoint()\n    if not base_curve or not first_point.IsValid:\n        return\n    isplanar, plane = base_curve.TryGetPlane()\n    if not isplanar: return\n    \n    gp = Rhino.Input.Custom.GetPoint()\n    gp.SetCommandPrompt(\"Offset point\")\n    gp.DrawLineFromPoint(first_point, True)\n    line = Rhino.Geometry.Line(first_point, first_point + plane.Normal)\n    gp.Constrain(line)\n    gp.Get()\n    if gp.CommandResult() != Rhino.Commands.Result.Success:\n        return\n    second_point = gp.Point()\n    vec = second_point - first_point\n    if vec.Length > 0.001:\n        xf = Rhino.Geometry.Transform.Translation(vec)\n        id = scriptcontext.doc.Objects.Transform(objref, xf, False)\n        scriptcontext.doc.Views.Redraw()\n        return id\n\nif __name__==\"__main__\":\n    constrainedcopy()\n",
    "members": [
      ["Rhino.Geometry.Curve", "bool TryGetPlane(out Plane plane)"],
      ["Rhino.Geometry.Transform", "static Transform Translation(Vector3d motion)"],
      ["Rhino.DocObjects.ObjRef", "Point3d SelectionPoint()"],
      ["Rhino.Input.Custom.GetPoint", "bool Constrain(Line line)"]
    ]
  },
  {
    "name": "Createblock.py",
    "code": "import Rhino\nimport scriptcontext\n\ndef CreateBlock():\n    # Select objects to define block\n    go = Rhino.Input.Custom.GetObject()\n    go.SetCommandPrompt( \"Select objects to define block\" )\n    go.ReferenceObjectSelect = False\n    go.SubObjectSelect = False\n    go.GroupSelect = True\n\n    # Phantoms, grips, lights, etc., cannot be in blocks.\n    forbidden_geometry_filter = Rhino.DocObjects.ObjectType.Light | Rhino.DocObjects.ObjectType.Grip | Rhino.DocObjects.ObjectType.Phantom\n    geometry_filter = forbidden_geometry_filter ^ Rhino.DocObjects.ObjectType.AnyObject\n    go.GeometryFilter = geometry_filter\n    go.GetMultiple(1, 0)\n    if go.CommandResult() != Rhino.Commands.Result.Success:\n        return go.CommandResult()\n\n    # Block base point\n    rc, base_point = Rhino.Input.RhinoGet.GetPoint(\"Block base point\", False)\n    if rc != Rhino.Commands.Result.Success: return rc\n\n    # Block definition name\n    rc, idef_name = Rhino.Input.RhinoGet.GetString(\"Block definition name\", False, \"\")\n    if rc != Rhino.Commands.Result.Success: return rc\n    # Validate block name\n    idef_name = idef_name.strip()\n    if not idef_name: return Rhino.Commands.Result.Nothing\n\n    # See if block name already exists\n    existing_idef = scriptcontext.doc.InstanceDefinitions.Find(idef_name, True)\n    if existing_idef:\n        print \"Block definition\", idef_name, \"already exists\"\n        return Rhino.Commands.Result.Nothing\n\n    # Gather all of the selected objects\n    objrefs = go.Objects()\n    geometry = [item.Object().Geometry for item in objrefs]\n    attributes = [item.Object().Attributes for item in objrefs]\n\n    # Add the instance definition\n    idef_index = scriptcontext.doc.InstanceDefinitions.Add(idef_name, \"\", base_point, geometry, attributes)\n\n    if idef_index<0:\n        print \"Unable to create block definition\", idef_name\n        return Rhino.Commands.Result.Failure\n    return Rhino.Commands.Result.Failure\n\n\nif __name__==\"__main__\":\n    CreateBlock()\n",
    "members": [
      ["Rhino.Input.Custom.GetObject", "bool ReferenceObjectSelect"],
      ["Rhino.DocObjects.Tables.InstanceDefinitionTable", "int Add(string name, string description, Point3d basePoint, IEnumerable<GeometryBase> geometry, IEnumerable<ObjectAttributes> attributes)"],
      ["Rhino.DocObjects.Tables.InstanceDefinitionTable", "InstanceDefinition Find(string instanceDefinitionName)"],
      ["Rhino.DocObjects.Tables.InstanceDefinitionTable", "InstanceDefinition Find(string instanceDefinitionName, bool ignoreDeletedInstanceDefinitions)"]
    ]
  },
  {
    "name": "Createmeshfrombrep.py",
    "code": "import Rhino\nfrom Rhino.Geometry import *\nfrom Rhino.Input import RhinoGet\nfrom Rhino.Commands import Result\nfrom Rhino.DocObjects import ObjectType\nimport rhinoscriptsyntax as rs\nfrom scriptcontext import doc\n\ndef RunCommand():\n  rc, objRef = RhinoGet.GetOneObject(\"Select surface or polysurface to mesh\", True, \n                                     ObjectType.Surface | ObjectType.PolysrfFilter)\n  if rc <> Result.Success:\n    return rc\n  brep = objRef.Brep()\n  if None == brep:\n    return Result.Failure\n\n  jaggedAndFaster = MeshingParameters.Coarse\n  smoothAndSlower = MeshingParameters.Smooth\n  defaultMeshParams = MeshingParameters.Default\n  minimal = MeshingParameters.Minimal\n\n  meshes = Mesh.CreateFromBrep(brep, smoothAndSlower)\n  if meshes == None or meshes.Length == 0:\n    return Result.Failure\n\n  brepMesh = Mesh()\n  for mesh in meshes:\n    brepMesh.Append(mesh)\n  doc.Objects.AddMesh(brepMesh)\n  doc.Views.Redraw()\n\nif __name__ == \"__main__\":\n  RunCommand()\n",
    "members": [
      ["Rhino.Geometry.MeshingParameters", "static MeshingParameters Coarse"],
      ["Rhino.Geometry.MeshingParameters", "static MeshingParameters Default"],
      ["Rhino.Geometry.MeshingParameters", "static MeshingParameters Minimal"],
      ["Rhino.Geometry.MeshingParameters", "static MeshingParameters Smooth"],
      ["Rhino.Geometry.Mesh", "static Mesh[] CreateFromBrep(Brep brep, MeshingParameters meshingParameters)"],
      ["Rhino.Geometry.Mesh", "void Append(Mesh other)"]
    ]
  },
  {
    "name": "Createsurfaceexample.py",
    "code": "from Rhino.Geometry import Point3d, NurbsSurface, ControlPoint\nfrom scriptcontext import doc\n\ndef RunCommand():\n  bIsRational = False\n  dim = 3\n  u_degree = 2\n  v_degree = 3\n  u_cv_count = 3\n  v_cv_count = 5\n \n  # make up a quadratic knot vector with no interior knots\n  u_knot = [0.0, 0.0, 1.0, 1.0] \n \n  # make up a cubic knot vector with one simple interior knot\n  v_knot = [0.0, 0.0, 0.0, 1.5, 2.0, 2.0, 2.0]\n \n  # Rational control points can be in either homogeneous\n  # or euclidean form. Non-rational control points do not\n  # need to specify a weight.  \n  CV = dict( ((i,j),None) for i in range(2) for j in range(3) )\n  for i in range(0, u_cv_count):\n    for j in range(0, v_cv_count):\n      CV[i,j] = Point3d(i, j, i-j)\n \n  # creates internal uninitialized arrays for \n  # control points and knots\n  nurbs_surface = NurbsSurface.Create(\n    dim,\n    bIsRational,\n    u_degree + 1,\n    v_degree + 1,\n    u_cv_count,\n    v_cv_count\n    )\n \n  # add the knots\n  for i in range(0, nurbs_surface.KnotsU.Count):\n    nurbs_surface.KnotsU[i] = u_knot[i]\n  for j in range(0, nurbs_surface.KnotsV.Count):\n    nurbs_surface.KnotsV[j] = v_knot[j]\n\n  # add the control points\n  for i in range(0, nurbs_surface.Points.CountU):\n    for j in range(0, nurbs_surface.Points.CountV):\n      nurbs_surface.Points.SetControlPoint(i, j, ControlPoint(CV[i, j]))\n\n  if nurbs_surface.IsValid:\n    doc.Objects.AddSurface(nurbs_surface)\n    doc.Views.Redraw()\n\nif __name__ == \"__main__\":\n  RunCommand()",
    "members": [
      ["Rhino.Geometry.NurbsSurface", "NurbsSurfaceKnotList KnotsU"],
      ["Rhino.Geometry.NurbsSurface", "NurbsSurfaceKnotList KnotsV"],
      ["Rhino.Geometry.NurbsSurface", "NurbsSurfacePointList Points"],
      ["Rhino.Geometry.NurbsSurface", "static NurbsSurface Create(int dimension, bool isRational, int order0, int order1, int controlPointCount0, int controlPointCount1)"]
    ]
  },
  {
    "name": "Crvdeviation.py",
    "code": "import rhinoscriptsyntax as rs\nimport scriptcontext\nimport Rhino\n\ndef RunCommand():\n  crvA = rs.GetCurveObject(\"first curve\")[0]\n  crvA = rs.coercecurve(crvA)\n  crvB = rs.GetCurveObject(\"second curve\")[0]\n  crvB = rs.coercecurve(crvB)\n  if crvA == None or crvB == None:\n      return Rhino.Commands.Result.Failure\n      \n  maxa, maxb, maxd, mina, minb, mind = rs.CurveDeviation(crvA, crvB)\n  \n  if mind <= Rhino.RhinoMath.ZeroTolerance:\n      mind = 0.0;\n  maxDistPtA = crvA.PointAt(maxa)\n  maxDistPtB = crvB.PointAt(maxb)\n  minDistPtA = crvA.PointAt(mina)\n  minDistPtB = crvB.PointAt(minb)\n\n  print \"Minimum deviation = {0}   pointA({1}, {2}, {3}), pointB({4}, {5}, {6})\".format(\n    mind, minDistPtA.X, minDistPtA.Y, minDistPtA.Z, minDistPtB.X, minDistPtB.Y, minDistPtB.Z)\n  print \"Maximum deviation = {0}   pointA({1}, {2}, {3}), pointB({4}, {5}, {6})\".format(\n    maxd, maxDistPtA.X, maxDistPtA.Y, maxDistPtA.Z, maxDistPtB.X, maxDistPtB.Y, maxDistPtB.Z)\n\nif __name__==\"__main__\":\n  RunCommand()\n",
    "members": [
      ["Rhino.Geometry.Curve", "static bool GetDistancesBetweenCurves(Curve curveA, Curve curveB, double tolerance, out double maxDistance, out double maxDistanceParameterA, out double maxDistanceParameterB, out double minDistance, out double minDistanceParameterA, out double minDistanceParameterB)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "int UnselectAll()"]
    ]
  },
  {
    "name": "Curveboundingbox.py",
    "code": "import Rhino\nimport scriptcontext\n\ndef CurveBoundingBox():\n    # Select a curve object\n    rc, rhobject = Rhino.Input.RhinoGet.GetOneObject(\"Select curve\", False, Rhino.DocObjects.ObjectType.Curve)\n    if rc!=Rhino.Commands.Result.Success: return\n\n    # Validate selection\n    curve = rhobject.Curve()\n    if not curve: return\n\n    ## Get the active view's construction plane\n    view = scriptcontext.doc.Views.ActiveView\n    if not view: return\n    plane = view.ActiveViewport.ConstructionPlane()\n\n    # Compute the tight bounding box of the curve in world coordinates\n    bbox = curve.GetBoundingBox(True)\n    if not bbox.IsValid: return\n\n    # Print the min and max box coordinates in world coordinates\n    print \"World min:\", bbox.Min\n    print \"World max:\", bbox.Max\n\n    # Compute the tight bounding box of the curve based on the \n    # active view's construction plane\n    bbox = curve.GetBoundingBox(plane)\n\n    # Print the min and max box coordinates in cplane coordinates\n    print \"CPlane min:\", bbox.Min\n    print \"CPlane max:\", bbox.Max\n\nif __name__==\"__main__\":\n    CurveBoundingBox()",
    "members": [
      ["Rhino.Geometry.GeometryBase", "BoundingBox GetBoundingBox(bool accurate)"],
      ["Rhino.Geometry.GeometryBase", "BoundingBox GetBoundingBox(Plane plane)"]
    ]
  },
  {
    "name": "Curvebrepbox.py",
    "code": "import Rhino\nfrom Rhino.Geometry import *\nfrom Rhino.Commands import Result\nfrom Rhino.Input import RhinoGet\nfrom Rhino.DocObjects import ObjectType\nimport rhinoscriptsyntax as rs\nfrom scriptcontext import doc\n\ndef RunCommand():\n  rc, objRef = RhinoGet.GetOneObject(\"Select curve\", False, ObjectType.Curve)\n  if rc <> Result.Success:\n    return rc\n  curve = objRef.Curve()\n  if None == curve:\n    return Result.Failure\n\n  view = doc.Views.ActiveView\n  plane = view.ActiveViewport.ConstructionPlane()\n  # Create a construction plane aligned bounding box\n  bbox = curve.GetBoundingBox(plane)\n\n  if bbox.IsDegenerate(doc.ModelAbsoluteTolerance) > 0:\n    print \"the curve's bounding box is degenerate (flat) in at least one direction so a box cannot be created.\"\n    return Result.Failure\n\n  brep = Brep.CreateFromBox(bbox)\n  doc.Objects.AddBrep(brep)\n  doc.Views.Redraw()\n\n  return Result.Success\n\nif __name__ == \"__main__\":\n  print RunCommand()\n",
    "members": [
      ["Rhino.Geometry.BoundingBox", "int IsDegenerate(double tolerance)"],
      ["Rhino.Geometry.Brep", "static Brep CreateFromBox(BoundingBox box)"]
    ]
  },
  {
    "name": "Curvereverse.py",
    "code": "import rhinoscriptsyntax as rs\nfrom scriptcontext import *\nimport Rhino\n\ndef ReverseCurves():\n    crvs = rs.GetObjects(\"Select curves to reverse\", rs.filter.curve)\n    if not crvs: return\n    \n    for crvid in crvs:\n        crv = rs.coercecurve(crvid)\n        if not crv: continue\n        dup = crv.DuplicateCurve()\n        if dup:\n            dup.Reverse()\n        doc.Objects.Replace(crvid, dup)\n\nif __name__ == \"__main__\":\n    ReverseCurves()",
    "members": [
      ["Rhino.Geometry.Curve", "Curve DuplicateCurve()"],
      ["Rhino.Geometry.Curve", "bool Reverse()"]
    ]
  },
  {
    "name": "Curvesurfaceintersect.py",
    "code": "import rhinoscriptsyntax as rs\nfrom scriptcontext import *\nimport Rhino\nimport System.Collections.Generic as scg\nimport System as s\n\ndef RunCommand():\n  srfid = rs.GetObject(\"select surface\", rs.filter.surface | rs.filter.polysurface)\n  if not srfid: return\n \n  crvid = rs.GetObject(\"select curve\", rs.filter.curve)\n  if not crvid: return\n\n  result = rs.CurveBrepIntersect(crvid, srfid)\n  if result == None:\n    print \"no intersection\"\n    return\n  \n  curves, points = result\n  for curve in curves:\n    doc.Objects.AddCurve(rs.coercecurve(curve))\n  for point in points:\n    rs.AddPoint(point)\n\n  doc.Views.Redraw()\n\nif __name__ == \"__main__\":\n  RunCommand()\n",
    "members": [
      ["Rhino.Geometry.Intersect.Intersection", "static CurveIntersections CurveSurface(Curve curve, Surface surface, double tolerance, double overlapTolerance)"],
      ["Rhino.Geometry.Intersect.IntersectionEvent", "bool IsOverlap"],
      ["Rhino.DocObjects.Tables.ObjectTable", "int Select(IEnumerable<Guid> objectIds)"]
    ]
  },
  {
    "name": "Customgeometryfilter.py",
    "code": "import rhinoscriptsyntax as rs\nfrom scriptcontext import *\nimport Rhino\n\ndef circleWithRadiusOf10GeometryFilter (rhObject, geometry, componentIndex):\n  isCircleWithRadiusOf10 = False\n  c = rs.coercecurve(geometry)\n  if c:\n    b, circle = c.TryGetCircle()\n  if b:\n    isCircleWithRadiusOf10 = circle.Radius <= 10.0 + Rhino.RhinoMath.ZeroTolerance and circle.Radius >= 10.0 - Rhino.RhinoMath.ZeroTolerance\n  return isCircleWithRadiusOf10\n\ndef RunCommand():\n  # only use a custom geometry filter if no simpler filter does the job\n\n  # for curves - only a simple filter is needed\n  if rs.GetObject(\"select curve\", rs.filter.curve): #Rhino.DocObjects.ObjectType.Curve):\n    print \"curve vas selected\"\n\n  # for circles with a radius of 10 - a custom geometry filter is needed\n  if rs.GetObject(\"select circle with radius of 10\", rs.filter.curve, False, False, circleWithRadiusOf10GeometryFilter):\n      print \"circle with radius of 10 was selected\"\n\nif __name__==\"__main__\":\n  RunCommand()",
    "members": [
      ["Rhino.Geometry.Curve", "bool TryGetCircle(out Circle circle)"],
      ["Rhino.Input.Custom.GetObject", "void SetCustomGeometryFilter(GetObjectGeometryFilter filter)"]
    ]
  },
  {
    "name": "Customundo.py",
    "code": "import Rhino\nimport scriptcontext\n\n\ndef OnUndoFavoriteNumber(sender, e):\n    \"\"\"!!!!!!!!!!\n    NEVER change any setting in the Rhino document or application.  Rhino\n    handles ALL changes to the application and document and you will break\n    the Undo/Redo commands if you make any changes to the application or\n    document. This is meant only for your own private plug-in data\n    !!!!!!!!!!\n\n    This function can be called either by undo or redo\n    In order to get redo to work, add another custom undo event with the\n    current value.  If you don't want redo to work, just skip adding\n    a custom undo event here\n    \"\"\"\n    current_value = scriptcontext.sticky[\"FavoriteNumber\"]\n    e.Document.AddCustomUndoEvent(\"Favorite Number\", OnUndoFavoriteNumber, current_value)\n\n    old_value = e.Tag\n    print \"Going back to your favorite =\", old_value\n    scriptcontext.sticky[\"FavoriteNumber\"]= old_value;\n\n\ndef TestCustomUndo():\n    \"\"\"Rhino automatically sets up an undo record when a command is run,\n       but... the undo record is not saved if nothing changes in the\n       document (objects added/deleted, layers changed,...)\n    \n       If we have a command that doesn't change things in the document,\n       but we want to have our own custom undo called then we need to do\n       a little extra work\n    \"\"\"\n    current_value = 0\n    if scriptcontext.sticky.has_key(\"FavoriteNumber\"):\n        current_value = scriptcontext.sticky[\"FavoriteNumber\"]\n    rc, new_value = Rhino.Input.RhinoGet.GetNumber(\"Favorite number\", True, current_value)\n    if rc!=Rhino.Commands.Result.Success: return\n\n    scriptcontext.doc.AddCustomUndoEvent(\"Favorite Number\", OnUndoFavoriteNumber, current_value);\n    scriptcontext.sticky[\"FavoriteNumber\"] = new_value\n\nif __name__==\"__main__\":\n    TestCustomUndo()\n\n",
    "members": [
      ["Rhino.RhinoDoc", "bool AddCustomUndoEvent(string description, EventHandler<CustomUndoEventArgs> handler, object tag)"]
    ]
  },
  {
    "name": "Dimstyle.py",
    "code": "from Rhino import *\nfrom Rhino.DocObjects import *\nfrom Rhino.Commands import *\nfrom Rhino.Geometry import *\nfrom scriptcontext import doc\n\ndef RunCommand():\n  for annotation_object in doc.Objects.GetObjectList(ObjectType.Annotation):\n    if not isinstance (annotation_object, AnnotationObjectBase):\n      continue\n\n    annotation = annotation_object.Geometry\n\n    if annotation.Index == doc.DimStyles.CurrentDimensionStyleIndex:\n      continue\n\n    annotation.Index = doc.DimStyles.CurrentDimensionStyleIndex\n    annotation_object.CommitChanges()\n\n  doc.Views.Redraw()\n  return Result.Success\n\nif __name__ == \"__main__\":\n  RunCommand()",
    "members": [
      ["Rhino.RhinoDoc", "DimStyleTable DimStyles"],
      ["Rhino.DocObjects.Tables.DimStyleTable", "int CurrentIndex"],
      ["Rhino.DocObjects.Tables.ObjectTable", "IEnumerable<RhinoObject> GetObjectList(Type typeFilter)"]
    ]
  },
  {
    "name": "Displayorder.py",
    "code": "from System.Collections.Generic import *\nfrom System.Drawing import *\nfrom Rhino import *\nfrom Rhino.Commands import *\nfrom Rhino.Display import *\nfrom Rhino.Geometry import *\nfrom Rhino.Input import *\nfrom Rhino.DocObjects import *\nfrom scriptcontext import doc\n\nm_line_objects = []\n\ndef RunCommand():\n  # make lines thick so draw order can be easily seen\n  wfdm = [dm for dm in DisplayModeDescription.GetDisplayModes() if dm.EnglishName == \"Wireframe\"][0]\n  original_thikcness = wfdm.DisplayAttributes.CurveThickness\n  wfdm.DisplayAttributes.CurveThickness = 10\n  DisplayModeDescription.UpdateDisplayMode(wfdm)\n\n  AddLine(Point3d.Origin, Point3d(10,10,0), Color.Red, doc)\n  AddLine(Point3d(10,0,0), Point3d(0,10,0), Color.Blue, doc)\n  AddLine(Point3d(8,0,0), Point3d(8,10,0), Color.Green, doc)\n  AddLine(Point3d(0,3,0), Point3d(10,3,0), Color.Yellow, doc)\n  doc.Views.Redraw()\n  Pause(\"draw order: 1st line drawn in front, last line drawn in the back.  Any key to continue ...\")\n\n  #all objects have a DisplayOrder of 0 by default so changing it to 1 moves it to the front.  Here we move the 2nd line (blue) to the front\n  m_line_objects[1].Attributes.DisplayOrder = 1\n  m_line_objects[1].CommitChanges()\n  doc.Views.Redraw()\n  Pause(\"Second (blue) line now in front.  Any key to continue ...\")\n\n  for i in range(0, m_line_objects.Count - 1):\n    m_line_objects[i].Attributes.DisplayOrder = i\n    m_line_objects[i].CommitChanges()\n\n  doc.Views.Redraw()\n  Pause(\"Reverse order of original lines, i.e., Yellow 1st and Red last.  Any key to continue ...\")\n\n  # restore original line thickness\n  wfdm.DisplayAttributes.CurveThickness = original_thikcness\n  DisplayModeDescription.UpdateDisplayMode(wfdm)\n\n  doc.Views.Redraw()\n  return Result.Success\n\ndef Pause(msg):\n  rc, obj_ref = RhinoGet.GetOneObject(msg, True, ObjectType.AnyObject)\n\ndef AddLine(from_pt, to_pt, color, doc):\n  guid = doc.Objects.AddLine(from_pt, to_pt)\n  obj = doc.Objects.Find(guid)\n  m_line_objects.Add(obj)\n  obj.Attributes.ObjectColor = color\n  obj.Attributes.ColorSource = ObjectColorSource.ColorFromObject\n  obj.CommitChanges()\n\nif __name__ == \"__main__\":\n  RunCommand()",
    "members": [
      ["Rhino.DocObjects.ObjectAttributes", "int DisplayOrder"]
    ]
  },
  {
    "name": "Displayprecision.py",
    "code": "from Rhino import *\nfrom Rhino.Input.Custom import *\nfrom Rhino.Commands import *\nfrom scriptcontext import doc\nimport rhinoscriptsyntax as rs\n\ndef RunCommand():\n  distance_display_precision = rs.GetInteger(\"Display precision\",\n    doc.ModelDistanceDisplayPrecision, 0, 7)\n  if distance_display_precision == None: return Result.Nothing\n\n  if distance_display_precision <> doc.ModelDistanceDisplayPrecision:\n    doc.ModelDistanceDisplayPrecision = distance_display_precision\n\n  return Result.Success\n\nif __name__ ==  \"__main__\":\n  RunCommand()",
    "members": [
      ["Rhino.RhinoDoc", "int ModelDistanceDisplayPrecision"]
    ]
  },
  {
    "name": "Dividebylength.py",
    "code": "import Rhino\nimport scriptcontext\n\ndef DivideByLengthPoints():\n    filter = Rhino.DocObjects.ObjectType.Curve\n    rc, objref = Rhino.Input.RhinoGet.GetOneObject(\"Select curve to divide\", False, filter)\n    if not objref or rc!=Rhino.Commands.Result.Success: return rc\n    \n    crv = objref.Curve()\n    if not crv or crv.IsShort(Rhino.RhinoMath.ZeroTolerance):\n        return Rhino.Commands.Result.Failure\n    \n    crv_length = crv.GetLength()\n    s = \"Curve length is {0:.3f}. Segment length\".format(crv_length)\n    seg_length = crv_length / 2.0\n    rc, length = Rhino.Input.RhinoGet.GetNumber(s, False, seg_length, 0, crv_length)\n    if rc!=Rhino.Commands.Result.Success: return rc\n    t_vals = crv.DivideByLength(length, True)\n    if not t_vals:\n        return Rhino.Commands.Result.Failure\n    \n    [scriptcontext.doc.Objects.AddPoint(crv.PointAt(t)) for t in t_vals]\n    scriptcontext.doc.Views.Redraw()\n    return Rhino.Commands.Result.Success\n\nif __name__==\"__main__\":\n    DivideByLengthPoints()\n",
    "members": [
      ["Rhino.Geometry.Curve", "static Curve[] JoinCurves(IEnumerable<Curve> inputCurves, double joinTolerance)"],
      ["Rhino.Geometry.Curve", "double[] DivideByLength(double segmentLength, bool includeEnds)"],
      ["Rhino.Geometry.Curve", "double[] DivideByLength(double segmentLength, bool includeEnds, bool reverse)"],
      ["Rhino.Geometry.Curve", "double[] DivideByLength(double segmentLength, bool includeEnds, bool reverse, out Point3d[] points)"],
      ["Rhino.Geometry.Curve", "double[] DivideByLength(double segmentLength, bool includeEnds, out Point3d[] points)"],
      ["Rhino.Geometry.Curve", "bool IsShort(double tolerance)"],
      ["Rhino.Input.RhinoGet", "static Result GetNumber(string prompt, bool acceptNothing, ref double outputNumber)"],
      ["Rhino.Input.RhinoGet", "static Result GetNumber(string prompt, bool acceptNothing, ref double outputNumber, double lowerLimit, double upperLimit)"],
      ["Rhino.Input.RhinoGet", "static Result GetOneObject(string prompt, bool acceptNothing, ObjectType filter, out ObjRef rhObject)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddPoint(Point3d point)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddPoint(Point3f point)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "bool Select(Guid objectId)"]
    ]
  },
  {
    "name": "Drawstring.py",
    "code": "from Rhino import *\nfrom Rhino.DocObjects import *\nfrom Rhino.Geometry import *\nfrom Rhino.Commands import *\nfrom Rhino.Input.Custom import *\nfrom System.Drawing import Color\n\ndef RunCommand():\n  gp = GetDrawStringPoint()\n  gp.SetCommandPrompt(\"Point\")\n  gp.Get()\n  return gp.CommandResult()\n\nclass GetDrawStringPoint(GetPoint):\n  def OnDynamicDraw(self, e):\n    xform = e.Viewport.GetTransform(\n      CoordinateSystem.World, CoordinateSystem.Screen)    \n\n    current_point = e.CurrentPoint\n    current_point.Transform(xform)\n    screen_point = Point2d(current_point.X, current_point.Y)\n\n    msg = \"screen {0}, {1}\".format(screen_point.X, screen_point.Y)\n    e.Display.Draw2dText(msg, Color.Blue, screen_point, False)\n\nif __name__ == \"__main__\":\n  RunCommand()",
    "members": [
      ["Rhino.Display.DisplayPipeline", "void Draw2dText(string text, Color color, Point2d screenCoordinate, bool middleJustified)"]
    ]
  },
  {
    "name": "Dupborder.py",
    "code": "import Rhino\nimport scriptcontext\n\ndef DupBorder():\n    filter = Rhino.DocObjects.ObjectType.Surface | Rhino.DocObjects.ObjectType.PolysrfFilter\n    rc, objref = Rhino.Input.RhinoGet.GetOneObject(\"Select surface or polysurface\", False, filter)\n    if rc != Rhino.Commands.Result.Success: return rc\n\n    rhobj = objref.Object()\n    brep = objref.Brep()\n    if not rhobj or not brep: return Rhino.Commands.Result.Failure\n    rhobj.Select(False)\n    curves = brep.DuplicateEdgeCurves(True)\n    tol = scriptcontext.doc.ModelAbsoluteTolerance * 2.1\n    curves = Rhino.Geometry.Curve.JoinCurves(curves, tol)\n    for curve in curves:\n        id = scriptcontext.doc.Objects.AddCurve(curve)\n        scriptcontext.doc.Objects.Select(id)\n    scriptcontext.doc.Views.Redraw()\n    return Rhino.Commands.Result.Success\n\nif __name__==\"__main__\":\n    DupBorder()",
    "members": [
      ["Rhino.Geometry.Brep", "Curve[] DuplicateEdgeCurves(bool nakedOnly)"]
    ]
  },
  {
    "name": "Duplicateobject.py",
    "code": "from System import *\nfrom Rhino import *\nfrom Rhino.Commands import *\nfrom Rhino.DocObjects import *\nfrom Rhino.Input import *\nfrom scriptcontext import doc\n\ndef RunCommand():\n  \n  rc, obj_ref = RhinoGet.GetOneObject(\"Select object to duplicate\", False, ObjectType.AnyObject)\n  if rc <> Result.Success:\n    return rc\n  rhino_object = obj_ref.Object()\n\n  geometry_base = rhino_object.DuplicateGeometry()\n  if geometry_base <> None:\n    if doc.Objects.Add(geometry_base) <> Guid.Empty:\n      doc.Views.Redraw()\n\n  return Result.Success\n\nif __name__ == \"__main__\":\n  RunCommand()",
    "members": [
      ["Rhino.DocObjects.RhinoObject", "GeometryBase DuplicateGeometry()"]
    ]
  },
  {
    "name": "Dupmeshboundary.py",
    "code": "from Rhino.Commands import *\nfrom Rhino.Input.Custom import *\nfrom Rhino.DocObjects import *\nfrom scriptcontext import doc\n\ndef RunCommand():\n  gm = GetObject()\n  gm.SetCommandPrompt(\"Select open mesh\")\n  gm.GeometryFilter = ObjectType.Mesh\n  gm.GeometryAttributeFilter = GeometryAttributeFilter.OpenMesh\n  gm.Get()\n  if gm.CommandResult() != Result.Success:\n    return gm.CommandResult()\n  mesh = gm.Object(0).Mesh()\n  if mesh == None:\n    return Result.Failure\n\n  polylines = mesh.GetNakedEdges()\n  for polyline in polylines:\n    doc.Objects.AddPolyline(polyline)\n  doc.Views.Redraw()\n  return Result.Success\n\nif __name__ == \"__main__\":\n    RunCommand()",
    "members": [
      ["Rhino.Geometry.Mesh", "Polyline[] GetNakedEdges()"]
    ]
  },
  {
    "name": "Edgesrf.py",
    "code": "from Rhino import *\nfrom Rhino.Commands import *\nfrom Rhino.DocObjects import *\nfrom Rhino.Geometry import *\nfrom Rhino.Input.Custom import *\nfrom scriptcontext import doc\n\ndef RunCommand():\n  go = GetObject()\n  go.SetCommandPrompt(\"Select 2, 3, or 4 open curves\")\n  go.GeometryFilter = ObjectType.Curve\n  go.GeometryAttributeFilter = GeometryAttributeFilter.OpenCurve\n  go.GetMultiple(2, 4)\n  if go.CommandResult() <> Result.Success:\n    return go.CommandResult()\n\n  curves = [o.Curve() for o in go.Objects()]\n\n  brep = Brep.CreateEdgeSurface(curves)\n\n  if brep <> None:\n    doc.Objects.AddBrep(brep)\n    doc.Views.Redraw()\n\n  return Result.Success\n\nif __name__ == \"__main__\":\n  RunCommand()",
    "members": [
      ["Rhino.Geometry.Brep", "static Brep CreateEdgeSurface(IEnumerable<Curve> curves)"]
    ]
  },
  {
    "name": "Elevation.py",
    "code": "import rhinoscriptsyntax as rs\nfrom Rhino.Geometry import Intersect, Point3d, Vector3d\nfrom scriptcontext import doc\n\ndef RunCommand():\n  # select a surface\n  srfid = rs.GetObject(\"select serface\", rs.filter.surface | rs.filter.polysurface)\n  if not srfid: return\n  # get the brep\n  brep = rs.coercebrep(srfid)\n  if not brep: return\n\n  x = rs.GetReal(\"value of x\", 0)\n  y = rs.GetReal(\"value of y\", 0)\n\n  pts = [(abs(point.Z), point.Z) for point in Intersect.Intersection.ProjectPointsToBreps(\n           [brep], [Point3d(x, y, 0)], Vector3d(0, 0, 1), doc.ModelAbsoluteTolerance)]\n           \n  pts.sort(reverse=True)\n  \n  if pts == []:\n    print \"no Z for given X, Y\"\n  else:\n    rs.AddPoint(Point3d(x, y, pts[0][1]))\n\nif __name__ == \"__main__\":\n  RunCommand()",
    "members": [
      ["Rhino.Geometry.BoundingBox", "Point3d[] GetCorners()"],
      ["Rhino.Geometry.Intersect.Intersection", "static bool CurveBrep(Curve curve, Brep brep, double tolerance, out Curve[] overlapCurves, out Point3d[] intersectionPoints)"]
    ]
  },
  {
    "name": "Evnormal.py",
    "code": "import rhinoscriptsyntax as rs\nfrom scriptcontext import *\nimport Rhino\nfrom Rhino.Commands import Result\n\ndef RunCommand():\n  # select a surface\n  gs = Rhino.Input.Custom.GetObject()\n  gs.SetCommandPrompt(\"select surface\")\n  gs.GeometryFilter = Rhino.DocObjects.ObjectType.Surface\n  gs.DisablePreSelect()\n  gs.SubObjectSelect = False\n  gs.Get()\n  if gs.CommandResult() != Result.Success:\n    return gs.CommandResult()\n\n  # get the selected face\n  face = gs.Object(0).Face()\n  if face == None:\n    return\n\n  # pick a point on the surface.  Constain\n  # picking to the face.\n  gp = Rhino.Input.Custom.GetPoint()\n  gp.SetCommandPrompt(\"select point on surface\")\n  gp.Constrain(face, False)\n  gp.Get()\n  if gp.CommandResult() != Result.Success:\n    return gp.CommandResult()\n\n  # get the parameters of the point on the\n  # surface that is clesest to gp.Point()\n  b, u, v = face.ClosestPoint(gp.Point())\n  if b:\n    dir = face.NormalAt(u, v)\n    if face.OrientationIsReversed:\n      dir.Reverse()\n    print \"Surface normal at uv({0:f},{1:f}) = ({2:f},{3:f},{4:f})\".format(\n        u, v, dir.X, dir.Y, dir.Z)\n\nif __name__ == \"__main__\":\n  RunCommand()\n",
    "members": [
      ["Rhino.Geometry.BrepFace", "bool OrientationIsReversed"],
      ["Rhino.Geometry.Surface", "Vector3d NormalAt(double u, double v)"]
    ]
  },
  {
    "name": "Explodehatch.py",
    "code": "import Rhino\nimport scriptcontext\n\ndef ExplodeHatch():\n    filter = Rhino.DocObjects.ObjectType.Hatch\n    rc, objref = Rhino.Input.RhinoGet.GetOneObject(\"Select hatch to explode\", False, filter)\n    if rc != Rhino.Commands.Result.Success: return\n\n    hatch = objref.Geometry()\n    if not hatch: return\n\n    hatch_geom = hatch.Explode()\n    if hatch_geom:\n      for geom in hatch_geom:\n          if geom.ObjectType == Rhino.DocObjects.ObjectType.Point:\n              scriptcontext.doc.Objects.AddPoint(geom)\n          elif geom.ObjectType == Rhino.DocObjects.ObjectType.Curve:\n              scriptcontext.doc.Objects.AddCurve(geom)\n          elif geom.ObjectType == Rhino.DocObjects.ObjectType.Brep:\n              scriptcontext.doc.Objects.AddBrep(geom)\n      scriptcontext.doc.Views.Redraw()\n\nif __name__==\"__main__\":\n    ExplodeHatch()\n",
    "members": [
      ["Rhino.Geometry.Hatch", "GeometryBase[] Explode()"]
    ]
  },
  {
    "name": "Extendcurve.py",
    "code": "from Rhino import *\nfrom Rhino.Geometry import *\nfrom Rhino.DocObjects import *\nfrom Rhino.Commands import *\nfrom Rhino.Input import *\nfrom Rhino.Input.Custom import *\nfrom scriptcontext import doc\n\ndef RunCommand():\n  \n  rc, boundary_obj_refs = RhinoGet.GetMultipleObjects(\"Select boundary objects\", False, ObjectType.AnyObject)\n  if rc <> Result.Success:\n    return rc\n  if boundary_obj_refs == None or boundary_obj_refs.Length == 0:\n    return Result.Nothing\n\n  gc = GetObject()\n  gc.SetCommandPrompt(\"Select curve to extend\")\n  gc.GeometryFilter = ObjectType.Curve\n  gc.GeometryAttributeFilter = GeometryAttributeFilter.OpenCurve\n  gc.Get()\n  if gc.CommandResult() <> Result.Success:\n    return gc.CommandResult()\n  curve_obj_ref = gc.Object(0)\n\n  curve = curve_obj_ref.Curve()\n  if curve == None: return Result.Failure\n  b, t = curve.ClosestPoint(curve_obj_ref.SelectionPoint())\n  if not b: return Result.Failure\n  curve_end = CurveEnd.Start if t <= curve.Domain.Mid else CurveEnd.End\n\n  geometry = [obj.Geometry() for obj in boundary_obj_refs]\n  extended_curve = curve.Extend(curve_end, CurveExtensionStyle.Line, geometry)\n  if extended_curve <> None and extended_curve.IsValid:\n    if not doc.Objects.Replace(curve_obj_ref.ObjectId, extended_curve):\n      return Result.Failure\n    doc.Views.Redraw()\n    return Result.Success\n  else:\n    RhinoApp.WriteLine(\"No boundary object was intersected so curve not extended\")\n    return Result.Nothing\n\nif __name__ == \"__main__\":\n  RunCommand()",
    "members": [
      ["Rhino.Geometry.Curve", "Curve Extend(CurveEnd side, CurveExtensionStyle style, IEnumerable<GeometryBase> geometry)"],
      ["Rhino.Geometry.Interval", "double Mid"]
    ]
  },
  {
    "name": "Extractisocurve.py",
    "code": "from Rhino import *\nfrom Rhino.DocObjects import *\nfrom Rhino.Commands import *\nfrom Rhino.Input import *\nfrom Rhino.Input.Custom import *\nfrom Rhino.Geometry import *\nfrom scriptcontext import doc\n\ndef RunCommand():\n  rc, obj_ref = RhinoGet.GetOneObject(\"Select surface\", False, ObjectType.Surface)\n  if rc <> Result.Success or obj_ref == None:\n    return rc\n  surface = obj_ref.Surface()\n\n  gp = GetPoint()\n  gp.SetCommandPrompt(\"Point on surface\")\n  gp.Constrain(surface, False)\n  option_toggle = OptionToggle(False, \"U\", \"V\")\n  gp.AddOptionToggle(\"Direction\", option_toggle)\n  point = Point3d.Unset\n\n  while True:\n    grc = gp.Get()\n    if grc == GetResult.Option:\n      continue\n    elif grc == GetResult.Point:\n      point = gp.Point()\n      break\n    else:\n      return Result.Nothing\n\n  if point == Point3d.Unset:\n    return Result.Nothing\n\n  direction = 1 if option_toggle.CurrentValue else 0\n  b, u_parameter, v_parameter = surface.ClosestPoint(point)\n  if not b: return Result.Failure\n\n  iso_curve = surface.IsoCurve(direction, u_parameter if direction == 1 else v_parameter)\n  if iso_curve == None: \n    return Result.Failure\n\n  doc.Objects.AddCurve(iso_curve)\n  doc.Views.Redraw()\n  return Result.Success\n\nif __name__ == \"__main__\":\n  RunCommand()",
    "members": [
      ["Rhino.Geometry.Surface", "Curve IsoCurve(int direction, double constantParameter)"]
    ]
  },
  {
    "name": "Extractthumbnail.py",
    "code": "import Rhino\nimport rhinoscriptsyntax as rs\nfrom scriptcontext import doc\n\nimport clr\nclr.AddReference(\"System.Windows.Forms\")\nimport System.Windows.Forms\n\ndef RunCommand():\n\n  fn = rs.OpenFileName(title=\"select file\", filter=\"Rhino files|*.3dm||\")\n  if fn == None:\n    return\n\n  bitmap = doc.ExtractPreviewImage(fn)\n\n  f = System.Windows.Forms.Form()\n  f.Height = bitmap.Height\n  f.Width = bitmap.Width\n  pb = System.Windows.Forms.PictureBox()\n  pb.Image = bitmap\n  pb.Height = bitmap.Height  #SizeMode = System.Windows.Forms.PictueBoxSizeMode.AutoSize\n  pb.Width = bitmap.Width\n  f.Controls.Add(pb);\n  f.Show();\n\nif __name__ == \"__main__\":\n  RunCommand()\n",
    "members": [
      ["Rhino.FileIO.File3dm", "static System.Drawing.Bitmap ReadPreviewImage(string path)"],
      ["Rhino.Input.RhinoGet", "static string GetFileName(GetFileNameMode mode, string defaultName, string title, object parent)"],
      ["Rhino.Input.RhinoGet", "static string GetFileName(GetFileNameMode mode, string defaultName, string title, object parent, BitmapFileTypes fileTypes)"]
    ]
  },
  {
    "name": "Filletcurves.py",
    "code": "from Rhino import *\nfrom Rhino.Commands import *\nfrom Rhino.Geometry import *\nfrom Rhino.Input import *\nfrom Rhino.DocObjects import *\nfrom Rhino.Input.Custom import *\nfrom scriptcontext import doc\n\ndef RunCommand():\n  gc1 = GetObject()\n  gc1.DisablePreSelect()\n  gc1.SetCommandPrompt(\"Select first curve to fillet (close to the end you want to fillet)\")\n  gc1.GeometryFilter = ObjectType.Curve\n  gc1.GeometryAttributeFilter = GeometryAttributeFilter.OpenCurve\n  gc1.Get()\n  if gc1.CommandResult() != Result.Success:\n    return gc1.CommandResult()\n  curve1_obj_ref = gc1.Object(0)\n  curve1 = curve1_obj_ref.Curve()\n  if curve1 == None: return Result.Failure\n  curve1_point_near_end = curve1_obj_ref.SelectionPoint()\n  if curve1_point_near_end == Point3d.Unset:\n    return Result.Failure\n\n  gc2 = GetObject()\n  gc2.DisablePreSelect()\n  gc2.SetCommandPrompt(\"Select second curve to fillet (close to the end you want to fillet)\")\n  gc2.GeometryFilter = ObjectType.Curve\n  gc2.GeometryAttributeFilter = GeometryAttributeFilter.OpenCurve\n  gc2.Get()\n  if gc2.CommandResult() != Result.Success:\n    return gc2.CommandResult()\n  curve2_obj_ref = gc2.Object(0)\n  curve2 = curve2_obj_ref.Curve()\n  if curve2 == None: return Result.Failure\n  curve2_point_near_end = curve2_obj_ref.SelectionPoint()\n  if curve2_point_near_end == Point3d.Unset:\n    return Result.Failure\n\n  radius = 0.0\n  rc, radius = RhinoGet.GetNumber(\"fillet radius\", False, radius)\n  if rc != Result.Success: return rc\n\n  fillet_curve = Curve.CreateFilletCurves(curve1, curve1_point_near_end, curve2, curve2_point_near_end, radius,\n    True, True, True, doc.ModelAbsoluteTolerance, doc.ModelAngleToleranceDegrees)\n  if fillet_curve == None or fillet_curve.Length != 1:\n    return Result.Failure\n\n  doc.Objects.AddCurve(fillet_curve[0])\n  doc.Views.Redraw()\n  return rc\n\nif __name__ == \"__main__\":\n  RunCommand()",
    "members": [
      ["Rhino.Geometry.Curve", "static Curve[] CreateFilletCurves(Curve curve0, Point3d point0, Curve curve1, Point3d point1, double radius, bool join, bool trim, bool arcExtension, double tolerance, double angleTolerance)"]
    ]
  },
  {
    "name": "Findobjectsbyname.py",
    "code": "import Rhino\nimport scriptcontext\nimport System.Guid\n\ndef FindObjectsByName():\n    name = \"abc\"\n    settings = Rhino.DocObjects.ObjectEnumeratorSettings()\n    settings.NameFilter = name\n    ids = [rhobj.Id for rhobj in scriptcontext.doc.Objects.GetObjectList(settings)]\n    if not ids:\n        print \"No objects with the name\", name\n        return Rhino.Commands.Result.Failure\n    else:\n        print \"Found\", len(ids), \"objects\"\n        for id in ids: print \"  \", id\n    return Rhino.Commands.Result.Success\n\nif __name__ == \"__main__\":\n    FindObjectsByName()\n",
    "members": [
      ["Rhino.DocObjects.ObjectEnumeratorSettings", "ObjectEnumeratorSettings()"],
      ["Rhino.DocObjects.ObjectEnumeratorSettings", "string NameFilter"]
    ]
  },
  {
    "name": "Getpointdynamicdraw.py",
    "code": "from Rhino import *\nfrom Rhino.Geometry import *\nfrom Rhino.Commands import *\nfrom Rhino.Input.Custom import *\nfrom scriptcontext import doc\nfrom System.Drawing import *\n\ndef RunCommand():\n  gp = GetPoint()\n  gp.SetCommandPrompt(\"Center point\")\n  gp.Get()\n  if gp.CommandResult() <> Result.Success:\n    return gp.CommandResult()\n  center_point = gp.Point()\n  if center_point == Point3d.Unset:\n    return Result.Failure\n\n  gcp = GetCircleRadiusPoint(center_point)\n  gcp.SetCommandPrompt(\"Radius\")\n  gcp.ConstrainToConstructionPlane(False)\n  gcp.SetBasePoint(center_point, True)\n  gcp.DrawLineFromPoint(center_point, True)\n  gcp.Get()\n  if gcp.CommandResult() <> Result.Success:\n    return gcp.CommandResult()\n\n  radius = center_point.DistanceTo(gcp.Point())\n  cplane = doc.Views.ActiveView.ActiveViewport.ConstructionPlane()\n  doc.Objects.AddCircle(Circle(cplane, center_point, radius))\n  doc.Views.Redraw()\n  return Result.Success\n\nclass GetCircleRadiusPoint (GetPoint):\n  def __init__(self, centerPoint):\n    self.m_center_point = centerPoint\n  \n  def OnDynamicDraw(self, e):\n    cplane = e.RhinoDoc.Views.ActiveView.ActiveViewport.ConstructionPlane()\n    radius = self.m_center_point.DistanceTo(e.CurrentPoint)\n    circle = Circle(cplane, self.m_center_point, radius)\n    e.Display.DrawCircle(circle, Color.Black)\n\nif __name__ == \"__main__\":\n    RunCommand()",
    "members": [
      ["Rhino.Display.DisplayPipeline", "void DrawCircle(Circle circle, Color color)"]
    ]
  },
  {
    "name": "Gettext.py",
    "code": "from Rhino import *\nfrom Rhino.DocObjects import *\nfrom Rhino.Commands import *\nfrom Rhino.Input.Custom import *\nimport rhinoscriptsyntax as rs\n\ndef RunCommand():\n  go = GetObject()\n  go.SetCommandPrompt(\"Select annotation\")\n  go.GeometryFilter = ObjectType.Annotation\n  go.Get()\n  if go.CommandResult() <> Result.Success:\n    return Result.Failure\n  annotation = go.Object(0).Object()\n  if annotation == None or not isinstance(annotation, AnnotationObjectBase):\n    return Result.Failure\n\n  print \"Annotation text = {0}\".format(annotation.DisplayText)\n\n  return Result.Success\n\nif __name__ == \"__main__\":\n  RunCommand()",
    "members": [
      ["Rhino.DocObjects.AnnotationObjectBase", "string DisplayText"]
    ]
  },
  {
    "name": "Hatchcurve.py",
    "code": "import Rhino\nimport scriptcontext\n\ndef HatchCurve():\n    go = Rhino.Input.Custom.GetObject()\n    go.SetCommandPrompt(\"Select closed planar curve\")\n    go.GeometryFilter = Rhino.DocObjects.ObjectType.Curve\n    go.GeometryAttributeFilter = Rhino.Input.Custom.GeometryAttributeFilter.ClosedCurve\n    go.SubObjectSelect = False\n    go.Get()\n    if go.CommandResult()!=Rhino.Commands.Result.Success: return\n\n    curve = go.Object(0).Curve()\n    if (not curve or not curve.IsClosed or not curve.IsPlanar()): return\n\n    hatch_name = scriptcontext.doc.HatchPatterns[scriptcontext.doc.HatchPatterns.CurrentHatchPatternIndex].Name\n    rc, hatch_name = Rhino.Input.RhinoGet.GetString(\"Hatch pattern\", True, hatch_name)\n    if rc!=Rhino.Commands.Result.Success or not hatch_name: return\n\n    index = scriptcontext.doc.HatchPatterns.Find(hatch_name, True)\n    if index<0:\n        print \"Hatch pattern does not exist.\"\n        return\n\n    hatches = Rhino.Geometry.Hatch.Create(curve, index, 0, 1)\n    for hatch in hatches:\n        scriptcontext.doc.Objects.AddHatch(hatch)\n    if hatches: scriptcontext.doc.Views.Redraw()\n\nif __name__==\"__main__\":\n    HatchCurve()",
    "members": [
      ["Rhino.RhinoDoc", "HatchPatternTable HatchPatterns"],
      ["Rhino.Geometry.Hatch", "static Hatch[] Create(Curve curve, int hatchPatternIndex, double rotationRadians, double scale)"],
      ["Rhino.Geometry.Hatch", "static Hatch[] Create(Curve curve, int hatchPatternIndex, double rotationRadians, double scale, double tolerance)"],
      ["Rhino.DocObjects.ModelComponent", "string Name"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddHatch(Hatch hatch)"],
      ["Rhino.DocObjects.Tables.HatchPatternTable", "int CurrentHatchPatternIndex"],
      ["Rhino.DocObjects.Tables.HatchPatternTable", "int Find(string name, bool ignoreDeleted)"],
      ["Rhino.DocObjects.Tables.HatchPatternTable", "HatchPattern FindName(string name)"]
    ]
  },
  {
    "name": "Insertknot.py",
    "code": "import Rhino\nimport scriptcontext\n\ndef InsertKnot():\n    filter = Rhino.DocObjects.ObjectType.Curve\n    rc, objref = Rhino.Input.RhinoGet.GetOneObject(\"Select curve for knot insertion\", False, filter)\n    if rc != Rhino.Commands.Result.Success: return rc\n    \n    curve = objref.Curve()\n    if not curve: return Rhino.Commands.Result.Failure\n    nurb = curve.ToNurbsCurve()\n    if not nurb: return Rhino.Commands.Result.Failure\n\n    gp = Rhino.Input.Custom.GetPoint()\n    gp.SetCommandPrompt(\"Point on curve to add knot\")\n    gp.Constrain(nurb, False)\n    gp.Get()\n    if gp.CommandResult() == Rhino.Commands.Result.Success:\n        crv, t = gp.PointOnCurve()\n        if crv and nurb.Knots.InsertKnot(t):\n            scriptcontext.doc.Objects.Replace(objref, nurb)\n            scriptcontext.doc.Views.Redraw()\n    return Rhino.Commands.Result.Success\n\nif __name__==\"__main__\":\n    InsertKnot()",
    "members": [
      ["Rhino.Input.Custom.GetPoint", "bool Constrain(Curve curve, bool allowPickingPointOffObject)"],
      ["Rhino.Input.Custom.GetPoint", "Curve PointOnCurve(out double t)"],
      ["Rhino.Geometry.Collections.NurbsCurveKnotList", "bool InsertKnot(double value)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "bool Replace(ObjRef objref, Curve curve)"]
    ]
  },
  {
    "name": "Instancedefinitionobjects.py",
    "code": "import Rhino\nimport scriptcontext\n\ndef InstanceDefinitionObjects():\n    rc, objref = Rhino.Input.RhinoGet.GetOneObject(\"Select instance\", False, Rhino.DocObjects.ObjectType.InstanceReference)\n    if rc != Rhino.Commands.Result.Success: return\n\n    iref = objref.Object()\n    if iref:\n        idef = iref.InstanceDefinition\n        if idef:\n            rhino_objects = idef.GetObjects()\n            for i, rhobj in enumerate(rhino_objects):\n                print \"Object\", i, \"=\", rhobj.Id\n\nif __name__==\"__main__\":\n    InstanceDefinitionObjects()",
    "members": [
      ["Rhino.DocObjects.InstanceObject", "InstanceDefinition InstanceDefinition"],
      ["Rhino.DocObjects.InstanceDefinition", "RhinoObject[] GetObjects()"]
    ]
  },
  {
    "name": "Intersectcurves.py",
    "code": "import Rhino\nimport scriptcontext\n\ndef IntersectCurves():\n    # Select two curves to intersect\n    go = Rhino.Input.Custom.GetObject()\n    go.SetCommandPrompt(\"Select two curves\")\n    go.GeometryFilter = Rhino.DocObjects.ObjectType.Curve\n    go.GetMultiple(2, 2)\n    if go.CommandResult()!=Rhino.Commands.Result.Success: return\n\n    # Validate input\n    curveA = go.Object(0).Curve()\n    curveB = go.Object(1).Curve()\n    if not curveA or not curveB: return\n\n    # Calculate the intersection\n    intersection_tolerance = 0.001\n    overlap_tolerance = 0.0\n    events = Rhino.Geometry.Intersect.Intersection.CurveCurve(curveA, curveB, intersection_tolerance, overlap_tolerance)\n\n    # Process the results\n    if not events: return\n    for ccx_event in events:\n        scriptcontext.doc.Objects.AddPoint(ccx_event.PointA)\n        if ccx_event.PointA.DistanceTo(ccx_event.PointB) > float.Epsilon:\n            scriptcontext.doc.Objects.AddPoint(ccx_event.PointB)\n            scriptcontext.doc.Objects.AddLine(ccx_event.PointA, ccx_event.PointB)\n    scriptcontext.doc.Views.Redraw()\n\nif __name__==\"__main__\":\n    IntersectCurves()",
    "members": [
      ["Rhino.Geometry.Point3f", "double DistanceTo(Point3f other)"],
      ["Rhino.Geometry.Point3d", "double DistanceTo(Point3d other)"],
      ["Rhino.DocObjects.ObjRef", "Curve Curve()"],
      ["Rhino.Geometry.Intersect.Intersection", "static CurveIntersections CurveCurve(Curve curveA, Curve curveB, double tolerance, double overlapTolerance)"]
    ]
  },
  {
    "name": "Intersectlinecircle.py",
    "code": "import rhinoscriptsyntax as rs\nfrom scriptcontext import doc\nimport Rhino\nfrom Rhino.Geometry.Intersect import Intersection, LineCircleIntersection\n\ndef RunCommand():\n  rc, circle = Rhino.Input.RhinoGet.GetCircle()\n  if rc != Rhino.Commands.Result.Success:\n    return rc\n  doc.Objects.AddCircle(circle)\n  doc.Views.Redraw()\n\n  rc, line = Rhino.Input.RhinoGet.GetLine()\n  if rc != Rhino.Commands.Result.Success:\n    return rc\n  doc.Objects.AddLine(line)\n  doc.Views.Redraw()\n\n  lineCircleIntersect, t1, point1, t2, point2 = Intersection.LineCircle(line, circle)\n  message = \"\"\n  if lineCircleIntersect == LineCircleIntersection.None:\n    message = \"line does not intersect circle\"\n  elif lineCircleIntersect == LineCircleIntersection.Single:\n    message = \"line intersects circle at point ({0},{1},{2})\".format(point1.X, point1.Y, point1.Z)\n    doc.Objects.AddPoint(point1)\n  elif lineCircleIntersect == LineCircleIntersection.Multiple:\n    message = \"line intersects circle at points ({0},{1},{2}) and ({3},{4},{5})\".format(\n      point1.X, point1.Y, point1.Z, point2.X, point2.Y, point2.Z)\n    doc.Objects.AddPoint(point1)\n    doc.Objects.AddPoint(point2)\n    \n  print message\n  doc.Views.Redraw()\n\nif __name__ == \"__main__\":\n    RunCommand()",
    "members": [
      ["Rhino.Geometry.Intersect.Intersection", "static LineCircleIntersection LineCircle(Line line, Circle circle, out double t1, out Point3d point1, out double t2, out Point3d point2)"]
    ]
  },
  {
    "name": "Intersectlines.py",
    "code": "import Rhino\nimport scriptcontext\n\ndef IntersectLines():\n    go = Rhino.Input.Custom.GetObject()\n    go.SetCommandPrompt( \"Select lines\" )\n    go.GeometryFilter = Rhino.DocObjects.ObjectType.Curve\n    go.GetMultiple( 2, 2)\n    if go.CommandResult()!=Rhino.Commands.Result.Success:\n      return go.CommandResult()\n    if go.ObjectCount!=2: return Rhino.Commands.Result.Failure\n\n    crv0 = go.Object(0).Geometry()\n    crv1 = go.Object(1).Geometry()\n    if not crv0 or not crv1: return Rhino.Commands.Result.Failure\n\n    line0 = crv0.Line\n    line1 = crv1.Line\n    v0 = line0.Direction\n    v0.Unitize()\n    v1 = line1.Direction\n    v1.Unitize()\n\n    if v0.IsParallelTo(v1)!=0:\n        print \"Selected lines are parallel.\"\n        return Rhino.Commands.Result.Nothing\n\n    rc, a, b = Rhino.Geometry.Intersect.Intersection.LineLine(line0, line1)\n    if not rc:\n        print \"No intersection found.\"\n        return Rhino.Commands.Result.Nothing\n\n    pt0 = line0.PointAt(a)\n    pt1 = line1.PointAt(b)\n    # pt0 and pt1 should be equal, so we will only add pt0 to the document\n    scriptcontext.doc.Objects.AddPoint(pt0)\n    scriptcontext.doc.Views.Redraw()\n    return Rhino.Commands.Result.Success\n\nif __name__==\"__main__\":\n    IntersectLines()",
    "members": [
      ["Rhino.Geometry.Line", "Vector3d Direction"],
      ["Rhino.Geometry.Line", "Point3d PointAt(double t)"],
      ["Rhino.Geometry.Vector3d", "int IsParallelTo(Vector3d other)"],
      ["Rhino.Geometry.Intersect.Intersection", "static bool LineLine(Line lineA, Line lineB, out double a, out double b)"]
    ]
  },
  {
    "name": "Isbrepbox.py",
    "code": "import Rhino\n\ndef IsBrepBox(brep):\n    zero_tolerance = 1.0e-6 #or whatever\n    rc = brep.IsSolid\n    if rc: rc = brep.Faces.Count == 6\n\n    N = []\n    for i in range(6):\n        if not rc: break\n        rc, plane = brep.Faces[i].TryGetPlane(zero_tolerance)\n        if rc:\n            v = plane.ZAxis\n            v.Unitize()\n            N.append(v)\n \n    for i in range(6):\n        count = 0\n        for j in range(6):\n            if not rc: break\n            dot = abs(N[i] * N[j])\n            if dot<=zero_tolerance: continue\n            if abs(dot-1.0)<=zero_tolerance:\n              count += 1\n            else:\n              rc = False\n\n    if rc:\n        if 2!=count: rc = False\n    return rc\n\n\nif __name__==\"__main__\":\n    rc, objref = Rhino.Input.RhinoGet.GetOneObject(\"Select Brep\", True, Rhino.DocObjects.ObjectType.Brep)\n    if rc==Rhino.Commands.Result.Success:\n        brep = objref.Brep()\n        if brep:\n            if IsBrepBox(brep): print \"Yes it is a box\"\n            else: print \"No it is not a box\"\n",
    "members": [
      ["Rhino.Geometry.Brep", "bool IsSolid"],
      ["Rhino.Geometry.Surface", "bool TryGetPlane(out Plane plane, double tolerance)"]
    ]
  },
  {
    "name": "Isocurvedensity.py",
    "code": "import Rhino\nimport scriptcontext\n\ndef IsocurveDensity():\n    rc, objref = Rhino.Input.RhinoGet.GetOneObject(\"Select surface\", False, Rhino.DocObjects.ObjectType.Surface)\n    if rc!= Rhino.Commands.Result.Success: return\n\n    brep_obj = objref.Object()\n    if brep_obj:\n        brep_obj.Attributes.WireDensity = 3\n        brep_obj.CommitChanges()\n        scriptcontext.doc.Views.Redraw()\n\nif __name__==\"__main__\":\n    IsocurveDensity()",
    "members": [
      ["Rhino.DocObjects.ObjectAttributes", "int WireDensity"]
    ]
  },
  {
    "name": "Issurfaceinplane.py",
    "code": "import Rhino\nfrom Rhino.Geometry import *\nimport rhinoscriptsyntax as rs\nfrom scriptcontext import doc\nimport math\n\ndef RunCommand():\n  surface_id = rs.GetSurfaceObject()[0]\n  if surface_id == None:\n    return\n  surface = rs.coercesurface(surface_id)\n\n  corners = rs.GetRectangle()\n  if corners == None:\n    return\n    \n  plane = Plane(corners[0], corners[1], corners[2])\n\n  is_or_isnt = \"\" if IsSurfaceInPlane(surface, plane, doc.ModelAbsoluteTolerance) else \" not \"\n  print \"Surface is{0} in plane.\".format(is_or_isnt)\n\ndef IsSurfaceInPlane(surface, plane, tolerance):\n  if not surface.IsPlanar(tolerance):\n    return False\n \n  bbox = surface.GetBoundingBox(True)\n  rc = True\n  for corner in bbox.GetCorners():\n      if math.fabs(plane.DistanceTo(corner)) > tolerance:\n          rc = False\n          break\n          \n  return rc\n\nif __name__ == \"__main__\":\n    RunCommand()",
    "members": [
      ["Rhino.Geometry.Plane", "double DistanceTo(Point3d testPoint)"],
      ["Rhino.Geometry.Surface", "bool IsPlanar()"]
    ]
  },
  {
    "name": "Leader.py",
    "code": "import rhinoscriptsyntax as rs\n\ndef RunCommand():\n  points = [(1,1,0), (5,1,0), (5,5,0), (9,5,0)]\n  rs.AddLeader(points)\n\nif __name__ == \"__main__\":\n    RunCommand()",
    "members": [
      ["Rhino.Geometry.Point2d", "double DistanceTo(Point2d other)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddLeader(Plane plane, IEnumerable<Point2d> points)"]
    ]
  },
  {
    "name": "Locklayer.py",
    "code": "import rhinoscriptsyntax as rs\nfrom scriptcontext import doc\n\ndef lock():\n    layerName = rs.GetString(\"Name of layer to lock\")\n    \n    matchingLayers = [layer for layer in doc.Layers if layer.Name == layerName]\n    \n    layerToLock = None\n    if len(matchingLayers) == 0:\n        print \"Layer \"{0}\" does not exist.\".format(layerName)\n    elif len(matchingLayers) == 1:\n        layerToLock = matchingLayers[0]\n    elif len(matchingLayers) > 1:\n        i = 0;\n        for layer in matchingLayers:\n            print \"({0}) {1}\".format(i+1, matchingLayers[i].FullPath.replace(\"::\", \"->\"))\n            i += 1\n            \n        selectedLayer = rs.GetInteger(\"which layer?\", -1, 1, len(matchingLayers))\n        if selectedLayer == None:\n            return\n        layerToLock = matchingLayers[selectedLayer - 1]\n        \n    if layerToLock.IsLocked:\n        print \"layer {0} is already locked.\".format(layerToLock.FullPath)\n    else:\n        layerToLock.IsLocked = True\n        layerToLock.CommitChanges()\n          \nif __name__ == \"__main__\":\n    lock()\n        ",
    "members": [
      ["Rhino.DocObjects.Layer", "string FullPath"],
      ["Rhino.DocObjects.Layer", "bool IsLocked"],
      ["Rhino.DocObjects.Layer", "bool CommitChanges()"]
    ]
  },
  {
    "name": "Loft.py",
    "code": "import rhinoscriptsyntax as rs\n\ndef RunCommand():\n  crvids = rs.GetObjects(message=\"select curves to loft\", filter=rs.filter.curve, minimum_count=2)\n  if not crvids: return\n\n  rs.AddLoftSrf(object_ids=crvids, loft_type = 3) #3 = tight\n\nif __name__ == \"__main__\":\n  RunCommand()",
    "members": [
      ["Rhino.Geometry.Brep", "static Brep[] CreateFromLoft(IEnumerable<Curve> curves, Point3d start, Point3d end, LoftType loftType, bool closed)"]
    ]
  },
  {
    "name": "Makerhinocontours.py",
    "code": "from System import *\nfrom Rhino import *\nfrom Rhino.DocObjects import *\nfrom Rhino.Geometry import *\nfrom Rhino.Input import *\nfrom Rhino.Input.Custom import *\nfrom Rhino.Commands import *\nfrom scriptcontext import doc\n\ndef RunCommand():\n  filter = ObjectType.Surface | ObjectType.PolysrfFilter | ObjectType.Mesh\n  rc, obj_refs = RhinoGet.GetMultipleObjects(\"Select objects to contour\", False, filter)\n  if rc <> Result.Success:\n    return rc\n\n  gp = GetPoint()\n  gp.SetCommandPrompt(\"Contour plane base point\")\n  gp.Get()\n  if gp.CommandResult() <> Result.Success:\n    return gp.CommandResult()\n  base_point = gp.Point()\n\n  gp.DrawLineFromPoint(base_point, True)\n  gp.SetCommandPrompt(\"Direction perpendicular to contour planes\")\n  gp.Get()\n  if gp.CommandResult() <> Result.Success:\n    return gp.CommandResult()\n  end_point = gp.Point()\n\n  if base_point.DistanceTo(end_point) < RhinoMath.ZeroTolerance:\n    return Result.Nothing\n\n  distance = 1.0\n  rc, distance = RhinoGet.GetNumber(\"Distance between contours\", False, distance)\n  if rc <> Result.Success:\n    return rc\n\n  interval = Math.Abs(distance)\n\n  for obj_ref in obj_refs:\n    geometry = obj_ref.Geometry()\n    if geometry == None:\n      return Result.Failure\n\n    if type(geometry) == Brep:\n      curves = Brep.CreateContourCurves(geometry, base_point, end_point, interval)\n    else:\n      curves = Mesh.CreateContourCurves(geometry, base_point, end_point, interval)\n\n    for curve in curves:\n      curve_object_id = doc.Objects.AddCurve(curve)\n      doc.Objects.Select(curve_object_id)\n\n  if curves <> None:\n    doc.Views.Redraw()\n  return Result.Success\n\nif __name__ == \"__main__\":\n  RunCommand()",
    "members": [
      ["Rhino.Geometry.Brep", "static Curve[] CreateContourCurves(Brep brepToContour, Point3d contourStart, Point3d contourEnd, double interval)"],
      ["Rhino.Geometry.Mesh", "static Curve[] CreateContourCurves(Mesh meshToContour, Point3d contourStart, Point3d contourEnd, double interval)"]
    ]
  },
  {
    "name": "Meshdrawing.py",
    "code": "import rhinoscriptsyntax as rs\nfrom scriptcontext import doc\nimport Rhino\nimport System\nimport System.Drawing\n\ndef RunCommand():\n  gs = Rhino.Input.Custom.GetObject()\n  gs.SetCommandPrompt(\"select sphere\")\n  gs.GeometryFilter = Rhino.DocObjects.ObjectType.Surface\n  gs.DisablePreSelect()\n  gs.SubObjectSelect = False\n  gs.Get()\n  if gs.CommandResult() != Rhino.Commands.Result.Success:\n    return gs.CommandResult()\n\n  b, sphere = gs.Object(0).Surface().TryGetSphere()\n  if sphere.IsValid:\n    mesh = Rhino.Geometry.Mesh.CreateFromSphere(sphere, 10, 10)\n    if mesh == None:\n      return Rhino.Commands.Result.Failure\n\n    conduit = DrawBlueMeshConduit(mesh)\n    conduit.Enabled = True\n    doc.Views.Redraw()\n\n    inStr = rs.GetString(\"press <Enter> to continue\")\n\n    conduit.Enabled = False\n    doc.Views.Redraw()\n    return Rhino.Commands.Result.Success\n  else:\n    return Rhino.Commands.Result.Failure\n\nclass DrawBlueMeshConduit(Rhino.Display.DisplayConduit):\n  def __init__(self, mesh):\n    self.mesh = mesh\n    self.color = System.Drawing.Color.Blue\n    self.material = Rhino.Display.DisplayMaterial()\n    self.material.Diffuse = self.color\n    if mesh != None and mesh.IsValid:\n      self.bbox = mesh.GetBoundingBox(True)\n\n  def CalculateBoundingBox(self, calculateBoundingBoxEventArgs):\n    #super.CalculateBoundingBox(calculateBoundingBoxEventArgs)\n    calculateBoundingBoxEventArgs.IncludeBoundingBox(self.bbox)\n\n  def PreDrawObjects(self, drawEventArgs):\n    #base.PreDrawObjects(rawEventArgs)\n    gvp = drawEventArgs.Display.Viewport\n    if gvp.DisplayMode.EnglishName.ToLower() == \"wireframe\":\n      drawEventArgs.Display.DrawMeshWires(self.mesh, self.color)\n    else:\n      drawEventArgs.Display.DrawMeshShaded(self.mesh, self.material)\n\nif __name__ == \"__main__\":\n    RunCommand()",
    "members": [
      ["Rhino.Display.DisplayPipeline", "void DrawMeshShaded(Mesh mesh, DisplayMaterial material)"],
      ["Rhino.Display.DisplayPipeline", "void DrawMeshWires(Mesh mesh, Color color)"]
    ]
  },
  {
    "name": "Meshvolume.py",
    "code": "from Rhino.Input.Custom import *\nfrom Rhino.DocObjects import ObjectType\nfrom Rhino.Geometry import *\nfrom Rhino.Commands import Result\n\ndef RunCommand():\n  gm = GetObject()\n  gm.SetCommandPrompt(\"Select solid meshes for volume calculation\")\n  gm.GeometryFilter = ObjectType.Mesh\n  gm.GeometryAttributeFilter = GeometryAttributeFilter.ClosedMesh\n  gm.SubObjectSelect = False\n  gm.GroupSelect = True\n  gm.GetMultiple(1, 0)\n  if gm.CommandResult() != Result.Success:\n    return gm.CommandResult()\n\n  volume = 0.0\n  volume_error = 0.0\n  for obj_ref in gm.Objects():\n    if obj_ref.Mesh() != None:\n      mass_properties = VolumeMassProperties.Compute(obj_ref.Mesh())\n      if mass_properties != None:\n        volume += mass_properties.Volume\n        volume_error += mass_properties.VolumeError\n\n  print \"Total volume = {0:f} (+/- {1:f})\".format(volume, volume_error)\n  return Result.Success\n\nif __name__ == \"__main__\":\n  RunCommand()",
    "members": [
      ["Rhino.Geometry.VolumeMassProperties", "double Volume"],
      ["Rhino.Geometry.VolumeMassProperties", "double VolumeError"]
    ]
  },
  {
    "name": "Modifylightcolor.py",
    "code": "from Rhino import *\nfrom Rhino.DocObjects import *\nfrom Rhino.Input import *\nfrom Rhino.UI import *\nfrom scriptcontext import doc\n\ndef RunCommand():\n  rc, obj_ref = RhinoGet.GetOneObject(\n    \"Select light to change color\", \n    True,\n    ObjectType.Light)\n  if rc != Result.Success:\n    return rc\n  light = obj_ref.Light()\n  if light == None:\n    return Result.Failure\n\n  b, color = Dialogs.ShowColorDialog(light.Diffuse)\n  if b:\n    light.Diffuse = color\n    \n  doc.Lights.Modify(obj_ref.ObjectId, light)\n  return Result.Success\n\nif __name__ == \"__main__\":\n  RunCommand()",
    "members": [
      ["Rhino.Geometry.Light", "Color Diffuse"],
      ["Rhino.UI.Dialogs", "static bool ShowColorDialog(ref Color color)"],
      ["Rhino.DocObjects.Tables.LightTable", "bool Modify(Guid id, Light light)"]
    ]
  },
  {
    "name": "Modifyobjectcolor.py",
    "code": "from System.Drawing import *\nfrom Rhino import *\nfrom Rhino.DocObjects import *\nfrom Rhino.Geometry import *\nfrom Rhino.Input import *\nfrom Rhino.Commands import *\nfrom Rhino.UI.Dialogs import ShowColorDialog\nfrom scriptcontext import doc\n\ndef RunCommand():\n  rc, obj_ref = RhinoGet.GetOneObject(\"Select object\", False, ObjectType.AnyObject)\n  if rc <> Result.Success:\n    return rc\n  rhino_object = obj_ref.Object()\n  color = rhino_object.Attributes.ObjectColor\n  b, color = ShowColorDialog(color)\n  if not b: return Result.Cancel\n\n  rhino_object.Attributes.ObjectColor = color\n  rhino_object.Attributes.ColorSource = ObjectColorSource.ColorFromObject\n  rhino_object.CommitChanges()\n\n  # an object's color attributes can also be specified\n  # when the object is added to Rhino\n  sphere = Sphere(Point3d.Origin, 5.0)\n  attributes = ObjectAttributes()\n  attributes.ObjectColor = Color.CadetBlue\n  attributes.ColorSource = ObjectColorSource.ColorFromObject\n  doc.Objects.AddSphere(sphere, attributes)\n\n  doc.Views.Redraw()\n  return Result.Success\n\nif __name__ == \"__main__\":\n  RunCommand()",
    "members": [
      ["Rhino.DocObjects.ObjectAttributes", "ObjectColorSource ColorSource"],
      ["Rhino.DocObjects.ObjectAttributes", "Color ObjectColor"]
    ]
  },
  {
    "name": "Moveobjectstocurrentlayer.py",
    "code": "from Rhino import *\nfrom Rhino.Commands import *\nfrom Rhino.DocObjects import *\nfrom scriptcontext import doc\n\ndef RunCommand():\n  # all non-light objects that are selected\n  object_enumerator_settings = ObjectEnumeratorSettings()\n  object_enumerator_settings.IncludeLights = False\n  object_enumerator_settings.IncludeGrips = True\n  object_enumerator_settings.NormalObjects = True\n  object_enumerator_settings.LockedObjects = True\n  object_enumerator_settings.HiddenObjects = True\n  object_enumerator_settings.ReferenceObjects = True\n  object_enumerator_settings.SelectedObjectsFilter = True\n  selected_objects = doc.Objects.GetObjectList(object_enumerator_settings)\n\n  current_layer_index = doc.Layers.CurrentLayerIndex\n  for selected_object in selected_objects:\n    selected_object.Attributes.LayerIndex = current_layer_index\n    selected_object.CommitChanges()\n\n  doc.Views.Redraw()\n  return Result.Success\n\nif __name__ == \"__main__\":\n  RunCommand()",
    "members": [
      ["Rhino.DocObjects.ObjectAttributes", "int LayerIndex"],
      ["Rhino.DocObjects.Tables.LayerTable", "int CurrentLayerIndex"]
    ]
  },
  {
    "name": "Nurbscurveincreasedegree.py",
    "code": "from Rhino import *\nfrom Rhino.Commands import *\nfrom Rhino.Input import *\nfrom Rhino.DocObjects import *\nfrom scriptcontext import doc\n\ndef RunCommand():\n  rc, obj_ref = RhinoGet.GetOneObject(\"Select curve\", False, ObjectType.Curve)\n  if rc != Result.Success: return rc\n  if obj_ref == None: return Result.Failure\n  curve = obj_ref.Curve()\n  if curve == None: return Result.Failure\n  nurbs_curve = curve.ToNurbsCurve()\n\n  new_degree = -1\n  rc, new_degree = RhinoGet.GetInteger(\n    \"New degree <{0}...11>\".format(nurbs_curve.Degree), True, new_degree, nurbs_curve.Degree, 11)\n  if rc != Result.Success: return rc\n\n  rc = Result.Failure\n  if nurbs_curve.IncreaseDegree(new_degree):\n    if doc.Objects.Replace(obj_ref.ObjectId, nurbs_curve):\n      rc = Result.Success\n\n  print \"Result: {0}\".format(rc)\n  doc.Views.Redraw()\n  return rc\n\nif __name__ == \"__main__\":\n  RunCommand()",
    "members": [
      ["Rhino.Geometry.NurbsCurve", "bool IncreaseDegree(int desiredDegree)"]
    ]
  },
  {
    "name": "Nurbssurfaceincreasedegree.py",
    "code": "from Rhino import *\nfrom Rhino.Commands import *\nfrom Rhino.Input import *\nfrom Rhino.DocObjects import *\nfrom scriptcontext import doc\n\ndef RunCommand():\n  rc, obj_ref = RhinoGet.GetOneObject(\"Select surface\", False, ObjectType.Surface)\n  if rc != Result.Success: return rc\n  if obj_ref == None: return Result.Failure\n  surface = obj_ref.Surface()\n  if surface == None: return Result.Failure\n  nurbs_surface = surface.ToNurbsSurface()\n\n  new_u_degree = -1\n  rc, new_u_degree = RhinoGet.GetInteger(\n    \"New U degree <{0}...11>\".format(nurbs_surface.Degree(0)), True, new_u_degree, nurbs_surface.Degree(0), 11)\n  if rc != Result.Success: return rc\n  \n  new_v_degree = -1\n  rc, new_v_degree = RhinoGet.GetInteger(\n    \"New V degree <{0}...11>\".format(nurbs_surface.Degree(1)), True, new_v_degree, nurbs_surface.Degree(1), 11)\n  if rc != Result.Success: return rc\n\n  rc = Result.Failure\n  if nurbs_surface.IncreaseDegreeU(new_u_degree):\n    if nurbs_surface.IncreaseDegreeV(new_v_degree):\n      if doc.Objects.Replace(obj_ref.ObjectId, nurbs_surface):\n        rc = Result.Success\n\n  print \"Result: {0}\".format(rc)\n  doc.Views.Redraw()\n  return rc\n\nif __name__==\"__main__\":\n  RunCommand()",
    "members": [
      ["Rhino.Geometry.NurbsSurface", "bool IncreaseDegreeU(int desiredDegree)"],
      ["Rhino.Geometry.NurbsSurface", "bool IncreaseDegreeV(int desiredDegree)"]
    ]
  },
  {
    "name": "Objectdecoration.py",
    "code": "import Rhino\nimport scriptcontext\n\ndef ObjectDecoration():\n    # Define a line\n    line = Rhino.Geometry.Line(Rhino.Geometry.Point3d(0, 0, 0), Rhino.Geometry.Point3d(10, 0, 0))\n\n    # Make a copy of Rhino's default object attributes\n    attribs = scriptcontext.doc.CreateDefaultAttributes()\n\n    # Modify the object decoration style\n    attribs.ObjectDecoration = Rhino.DocObjects.ObjectDecoration.BothArrowhead\n\n    # Create a new curve object with our attributes\n    scriptcontext.doc.Objects.AddLine(line, attribs)\n    scriptcontext.doc.Views.Redraw()\n\nif __name__ == \"__main__\":\n    ObjectDecoration()",
    "members": [
      ["Rhino.RhinoDoc", "DocObjects.ObjectAttributes CreateDefaultAttributes()"]
    ]
  },
  {
    "name": "Objectdisplaymode.py",
    "code": "import Rhino\nimport scriptcontext\n\ndef ObjectDisplayMode():\n    filter = Rhino.DocObjects.ObjectType.Brep | Rhino.DocObjects.ObjectType.Mesh\n    rc, objref = Rhino.Input.RhinoGet.GetOneObject(\"Select mesh or surface\", True, filter)\n    if rc != Rhino.Commands.Result.Success: return rc;\n    viewportId = scriptcontext.doc.Views.ActiveView.ActiveViewportID\n\n    attr = objref.Object().Attributes\n    if attr.HasDisplayModeOverride(viewportId):\n        print \"Removing display mode override from object\"\n        attr.RemoveDisplayModeOverride(viewportId)\n    else:\n        modes = Rhino.Display.DisplayModeDescription.GetDisplayModes()\n        mode = None\n        if len(modes) == 1:\n            mode = modes[0]\n        else:\n            go = Rhino.Input.Custom.GetOption()\n            go.SetCommandPrompt(\"Select display mode\")\n            str_modes = []\n            for m in modes:\n                s = m.EnglishName.replace(\" \",\"\").replace(\"-\",\"\")\n                str_modes.append(s)\n            go.AddOptionList(\"DisplayMode\", str_modes, 0)\n            if go.Get()==Rhino.Input.GetResult.Option:\n                mode = modes[go.Option().CurrentListOptionIndex]\n        if not mode: return Rhino.Commands.Result.Cancel\n        attr.SetDisplayModeOverride(mode, viewportId)\n    scriptcontext.doc.Objects.ModifyAttributes(objref, attr, False)\n    scriptcontext.doc.Views.Redraw()\n\n\nif __name__==\"__main__\":\n    ObjectDisplayMode()",
    "members": [
      ["Rhino.DocObjects.ObjectAttributes", "bool HasDisplayModeOverride(Guid viewportId)"],
      ["Rhino.DocObjects.ObjectAttributes", "void RemoveDisplayModeOverride(Guid rhinoViewportId)"],
      ["Rhino.DocObjects.ObjectAttributes", "bool SetDisplayModeOverride(DisplayModeDescription mode, Guid rhinoViewportId)"],
      ["Rhino.Input.Custom.GetBaseClass", "int AddOptionList(LocalizeStringPair optionName, IEnumerable<LocalizeStringPair> listValues, int listCurrentIndex)"],
      ["Rhino.Input.Custom.GetBaseClass", "int AddOptionList(string englishOptionName, IEnumerable<string> listValues, int listCurrentIndex)"]
    ]
  },
  {
    "name": "Objectiterator.py",
    "code": "from Rhino import *\nfrom Rhino.DocObjects import *\nfrom Rhino.Commands import *\nfrom scriptcontext import doc\n\ndef RunCommand():\n  object_enumerator_settings = ObjectEnumeratorSettings()\n  object_enumerator_settings.IncludeLights = True\n  object_enumerator_settings.IncludeGrips = False\n  rhino_objects = doc.Objects.GetObjectList(object_enumerator_settings)\n\n  count = 0\n  for rhino_object in rhino_objects:\n    if rhino_object.IsSelectable() and rhino_object.IsSelected(False) == 0:\n      rhino_object.Select(True)\n      count += 1;\n\n  if count > 0:\n    doc.Views.Redraw()\n    RhinoApp.WriteLine(\"{0} object{1} selected\", count,\n      \"\" if count == 1 else \"s\")\n\n  return Result.Success\n\nif __name__ == \"__main__\":\n  RunCommand()",
    "members": [
      ["Rhino.DocObjects.ObjectEnumeratorSettings", "bool IncludeGrips"],
      ["Rhino.DocObjects.ObjectEnumeratorSettings", "bool IncludeLights"]
    ]
  },
  {
    "name": "Orientonsrf.py",
    "code": "import Rhino\nimport scriptcontext\nimport System.Guid\n\ndef OrientOnSrf():\n    # Select objects to orient\n    go = Rhino.Input.Custom.GetObject()\n    go.SetCommandPrompt(\"Select objects to orient\")\n    go.SubObjectSelect = False\n    go.GroupSelect = True\n    go.GetMultiple(1, 0)\n    if go.CommandResult()!=Rhino.Commands.Result.Success:\n        return go.CommandResult()\n\n    # Point to orient from\n    gp = Rhino.Input.Custom.GetPoint()\n    gp.SetCommandPrompt(\"Point to orient from\")\n    gp.Get()\n    if gp.CommandResult()!=Rhino.Commands.Result.Success:\n        return gp.CommandResult()\n    \n    # Define source plane\n    view = gp.View()\n    if not view:\n        view = doc.Views.ActiveView\n        if not view: return Rhino.Commands.Result.Failure\n\n    source_plane = view.ActiveViewport.ConstructionPlane()\n    source_plane.Origin = gp.Point()\n\n    # Surface to orient on\n    gs = Rhino.Input.Custom.GetObject()\n    gs.SetCommandPrompt(\"Surface to orient on\")\n    gs.GeometryFilter = Rhino.DocObjects.ObjectType.Surface\n    gs.SubObjectSelect = True\n    gs.DeselectAllBeforePostSelect = False\n    gs.OneByOnePostSelect = True\n    gs.Get()\n    if gs.CommandResult()!=Rhino.Commands.Result.Success:\n        return gs.CommandResult()\n\n    objref = gs.Object(0)\n    # get selected surface object\n    obj = objref.Object()\n    if not obj: return Rhino.Commands.Result.Failure\n    # get selected surface (face)\n    surface = objref.Surface()\n    if not surface: return Rhino.Commands.Result.Failure\n    # Unselect surface\n    obj.Select(False)\n\n    # Point on surface to orient to\n    gp.SetCommandPrompt(\"Point on surface to orient to\")\n    gp.Constrain(surface, False)\n    gp.Get()\n    if gp.CommandResult()!=Rhino.Commands.Result.Success:\n        return gp.CommandResult()\n\n    # Do transformation\n    rc = Rhino.Commands.Result.Failure\n    getrc, u, v = surface.ClosestPoint(gp.Point())\n    if getrc:\n        getrc, target_plane = surface.FrameAt(u,v)\n        if getrc:\n            # Build transformation\n            xform = Rhino.Geometry.Transform.PlaneToPlane(source_plane, target_plane)\n            # Do the transformation. In this example, we will copy the original objects\n            delete_original = False\n            for i in range(go.ObjectCount):\n                rhobj = go.Object(i)\n                scriptcontext.doc.Objects.Transform(rhobj, xform, delete_original)\n            scriptcontext.doc.Views.Redraw()\n            rc = Rhino.Commands.Result.Success\n    return rc\n\n\nif __name__==\"__main__\":\n    OrientOnSrf()\n",
    "members": [
      ["Rhino.Geometry.Surface", "bool ClosestPoint(Point3d testPoint, out double u, out double v)"],
      ["Rhino.Geometry.Surface", "bool FrameAt(double u, double v, out Plane frame)"],
      ["Rhino.DocObjects.RhinoObject", "int Select(bool on)"],
      ["Rhino.DocObjects.ObjRef", "RhinoObject Object()"],
      ["Rhino.DocObjects.ObjRef", "Surface Surface()"],
      ["Rhino.Input.Custom.GetObject", "bool DeselectAllBeforePostSelect"],
      ["Rhino.Input.Custom.GetObject", "ObjectType GeometryFilter"],
      ["Rhino.Input.Custom.GetObject", "bool GroupSelect"],
      ["Rhino.Input.Custom.GetObject", "bool OneByOnePostSelect"],
      ["Rhino.Input.Custom.GetObject", "bool SubObjectSelect"],
      ["Rhino.Input.Custom.GetObject", "ObjRef Object(int index)"],
      ["Rhino.Input.Custom.GetPoint", "bool Constrain(Surface surface, bool allowPickingPointOffObject)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid Transform(ObjRef objref, Transform xform, bool deleteOriginal)"]
    ]
  },
  {
    "name": "Ortho.py",
    "code": "from Rhino import *\nfrom Rhino.ApplicationSettings import *\nfrom Rhino.Commands import *\nfrom Rhino.Input.Custom import *\nfrom scriptcontext import doc\n\ndef RunCommand():\n  gp = GetPoint()\n  gp.SetCommandPrompt(\"Start of line\")\n  gp.Get()\n  if gp.CommandResult() != Result.Success:\n    return gp.CommandResult()\n  start_point = gp.Point()\n\n  original_ortho = ModelAidSettings.Ortho\n  if not original_ortho:\n    ModelAidSettings.Ortho = True\n\n  gp.SetCommandPrompt(\"End of line\")\n  gp.SetBasePoint(start_point, False)\n  gp.DrawLineFromPoint(start_point, True)\n  gp.Get()\n  if gp.CommandResult() != Result.Success:\n    return gp.CommandResult()\n  end_point = gp.Point()\n\n  if ModelAidSettings.Ortho != original_ortho:\n    ModelAidSettings.Ortho = original_ortho\n\n  doc.Objects.AddLine(start_point, end_point)\n  doc.Views.Redraw()\n  return Result.Success\n\nif __name__ == \"__main__\":\n  RunCommand()",
    "members": [
      ["Rhino.ApplicationSettings.ModelAidSettings", "static bool Ortho"]
    ]
  },
  {
    "name": "Planesurface.py",
    "code": "import Rhino;\nimport rhinoscriptsyntax as rs\n\ndef RunCommand():\n  rc, corners = Rhino.Input.RhinoGet.GetRectangle()\n  if rc <> Rhino.Commands.Result.Success:\n      return rc\n\n  plane = Rhino.Geometry.Plane(corners[0], corners[1], corners[2])\n  u_dir = rs.Distance(corners[0], corners[1])\n  v_dir = rs.Distance(corners[1], corners[2])\n  rs.AddPlaneSurface(plane, u_dir, v_dir)\n\nif __name__ == \"__main__\":\n    RunCommand()",
    "members": [
      ["Rhino.Geometry.PlaneSurface", "PlaneSurface(Plane plane, Interval xExtents, Interval yExtents)"]
    ]
  },
  {
    "name": "Principalcurvature.py",
    "code": "import rhinoscriptsyntax as rs\n\nsurface_id,_,_,_,_,_ = rs.GetSurfaceObject(\"Select surface for curvature measurement\")\npoint = rs.GetPointOnSurface(surface_id, \n    \"Select point on surface for curvature measurement\")\nu,v = rs.SurfaceClosestPoint(surface_id, point)\n\n#point, normal, kappa_u, direction_u, kappa_v, direction_v, gaussian, mean =\nsurface_curvature = rs.SurfaceCurvature(surface_id, (u,v))\n    \npoint, normal, kappa_u, direction_u, kappa_v, direction_v, gaussian, mean = surface_curvature\n\nprint \"Surface curvature evaluation at parameter: ({0}, {1})\".format(u,v)\n\nprint \"  3-D Point: ({0}, {1}, {2})\".format(point.X, point.Y, point.Z)\n\nprint \"  3-D Normal: ({0}, {1}, {2})\".format(normal.X, normal.Y, normal.Z)\n\nprint \"  Maximum principal curvature: {0} ({1}, {2}, {3})\".format(\n  kappa_u, direction_u.X, direction_u.Y, direction_u.Z)\n\nprint \"  Minimum principal curvature: {0} ({1}, {2}, {3})\".format(\n  kappa_v, direction_v.X, direction_v.Y, direction_v.Z)\n\nprint \"  Gaussian curvature: {0}\".format(gaussian)\nprint \"  Mean curvature: {0}\".format(mean)",
    "members": [
      ["Rhino.Geometry.SurfaceCurvature", "double Gaussian"],
      ["Rhino.Geometry.SurfaceCurvature", "double Mean"],
      ["Rhino.Geometry.SurfaceCurvature", "Vector3d Normal"],
      ["Rhino.Geometry.SurfaceCurvature", "Point3d Point"],
      ["Rhino.Geometry.SurfaceCurvature", "Vector3d Direction(int direction)"],
      ["Rhino.Geometry.SurfaceCurvature", "double Kappa(int direction)"],
      ["Rhino.Geometry.Surface", "SurfaceCurvature CurvatureAt(double u, double v)"]
    ]
  },
  {
    "name": "Printinstancedefinitiontree.py",
    "code": "from scriptcontext import doc\nimport Rhino\n\ndef RunCommand():\n  instanceDefinitions = doc.InstanceDefinitions\n  instanceDefinitionCount = instanceDefinitions.Count\n\n  if instanceDefinitionCount == 0:\n    print \"Document contains no instance definitions.\"\n    return\n\n  dump = Rhino.FileIO.TextLog()\n  dump.IndentSize = 4\n\n  for i in range(0, instanceDefinitionCount):\n    DumpInstanceDefinition(instanceDefinitions[i], dump, True)\n\n  print dump.ToString()\n\ndef DumpInstanceDefinition(instanceDefinition, dump, isRoot):\n  if instanceDefinition != None and not instanceDefinition.IsDeleted:\n    if isRoot:\n      node = '-'\n    else:\n      node = '+'\n    dump.Print(u\"{0} Instance definition {1} = {2}\\n\".format(node, instanceDefinition.Index, instanceDefinition.Name))\n\n    if instanceDefinition.ObjectCount  > 0:\n      dump.PushIndent()\n      for i in range(0, instanceDefinition.ObjectCount):\n        obj = instanceDefinition.Object(i)\n        if obj != None and type(obj) == Rhino.DocObjects.InstanceObject:\n          DumpInstanceDefinition(obj.InstanceDefinition, dump, False) # Recursive...\n        else:\n          dump.Print(u\"+ Object {0} = {1}\\n\".format(i, obj.ShortDescription(False)))\n      dump.PopIndent()\n\nif __name__ == \"__main__\":\n  RunCommand()\n",
    "members": [
      ["Rhino.RhinoDoc", "InstanceDefinitionTable InstanceDefinitions"],
      ["Rhino.FileIO.TextLog", "void PopIndent()"],
      ["Rhino.FileIO.TextLog", "void Print(string text)"],
      ["Rhino.FileIO.TextLog", "void PushIndent()"]
    ]
  },
  {
    "name": "Projectpointstobreps.py",
    "code": "import rhinoscriptsyntax as rs\nfrom scriptcontext import *\nfrom Rhino.Geometry import *\n\ndef RunCommand():\n  srfid = rs.GetObject(\"select surface\", rs.filter.surface | rs.filter.polysurface)\n  if not srfid: return\n  brep = rs.coercebrep(srfid)\n  if not brep: return\n  \n  pts = Intersect.Intersection.ProjectPointsToBreps(\n      [brep], # brep on which to project\n      [Point3d(0, 0, 0), Point3d(3,0,3), Point3d(-2,0,-2)], # points to project\n      Vector3d(0, 1, 0), # project on Y axis\n      doc.ModelAbsoluteTolerance)\n\n  if pts != None and pts.Length > 0:\n    for pt in pts:\n      doc.Objects.AddPoint(pt)\n\n  doc.Views.Redraw()\n\nif __name__ == \"__main__\":\n    RunCommand()",
    "members": [
      ["Rhino.Geometry.Intersect.Intersection", "static Point3d[] ProjectPointsToBreps(IEnumerable<Brep> breps, IEnumerable<Point3d> points, Vector3d direction, double tolerance)"]
    ]
  },
  {
    "name": "Projectpointstomeshesex.py",
    "code": "from System.Collections.Generic import *\nfrom Rhino import *\nfrom Rhino.Commands import *\nfrom Rhino.Geometry import *\nfrom Rhino.Geometry.Intersect import *\nfrom Rhino.Input import *\nfrom Rhino.DocObjects import *\nfrom scriptcontext import doc\n\ndef RunCommand():\n  rc, obj_ref = RhinoGet.GetOneObject(\"mesh\", False, ObjectType.Mesh)\n  if rc != Result.Success: return rc\n  mesh = obj_ref.Mesh()\n\n  rc, obj_ref_pts = RhinoGet.GetMultipleObjects(\"points\", False, ObjectType.Point)\n  if rc != Result.Success: return rc\n  points = []\n  for obj_ref_pt in obj_ref_pts:\n    pt = obj_ref_pt.Point().Location\n    points.append(pt)\n\n  prj_points, indices = Intersection.ProjectPointsToMeshesEx({mesh}, points, Vector3d(0, 1, 0), 0)\n  for prj_pt in prj_points: \n    doc.Objects.AddPoint(prj_pt)\n  doc.Views.Redraw()\n  return Result.Success\n\nif __name__ == \"__main__\":\n  RunCommand()",
    "members": [
      ["Rhino.Geometry.Intersect.Intersection", "static Point3d[] ProjectPointsToMeshesEx(IEnumerable<Mesh> meshes, IEnumerable<Point3d> points, Vector3d direction, double tolerance, out int[] indices)"]
    ]
  },
  {
    "name": "Renameblock.py",
    "code": "import rhinoscriptsyntax as rs\nfrom scriptcontext import doc\n\ndef Rename():\n    blockName = rs.GetString(\"block to rename\")\n    instanceDefinition = doc.InstanceDefinitions.Find(blockName, True)\n    if not instanceDefinition: \n        print \"{0} block does not exist\".format(blockName)\n        return\n    \n    newName = rs.GetString(\"new name\")\n    instanceDefinition = doc.InstanceDefinitions.Find(newName, True)\n    if instanceDefinition: \n        print \"the name '{0}' is already taken by another block\".format(newName)\n        return\n\n    rs.RenameBlock(blockName, newName)\n    \nif __name__ == \"__main__\":\n    Rename()",
    "members": [
      ["Rhino.DocObjects.InstanceDefinition", "bool IsDeleted"],
      ["Rhino.DocObjects.InstanceDefinition", "bool IsReference"],
      ["Rhino.DocObjects.Tables.InstanceDefinitionTable", "bool Modify(int idefIndex, string newName, string newDescription, bool quiet)"]
    ]
  },
  {
    "name": "Replacecolordialog.py",
    "code": "from Rhino import *\nfrom Rhino.Commands import *\nfrom Rhino.UI import *\nfrom System.Windows.Forms import *\n\nm_dlg = None\n\ndef RunCommand():\n  Dialogs.SetCustomColorDialog(OnSetCustomColorDialog)\n  return Result.Success\n\ndef OnSetCustomColorDialog(sender, e):\n  m_dlg = ColorDialog()\n  if m_dlg.ShowDialog(None) == DialogResult.OK:\n    c = m_dlg.Color\n    e.SelectedColor = c\n\nif __name__ == \"__main__\":\n  RunCommand()",
    "members": [
      ["Rhino.UI.Dialogs", "static void SetCustomColorDialog(EventHandler<GetColorEventArgs> handler)"]
    ]
  },
  {
    "name": "Replacehatchpattern.py",
    "code": "from Rhino import *\nfrom Rhino.DocObjects import *\nfrom Rhino.Commands import *\nfrom Rhino.Input import *\nfrom Rhino.Input.Custom import *\nfrom scriptcontext import doc\n\ndef RunCommand():\n  rc, obj_refs = RhinoGet.GetMultipleObjects(\"Select hatches to replace\", False, ObjectType.Hatch)\n  if rc <> Result.Success or obj_refs == None:\n    return rc\n\n  gs = GetString()\n  gs.SetCommandPrompt(\"Name of replacement hatch pattern\")\n  gs.AcceptNothing(False)\n  gs.Get()\n  if gs.CommandResult() <> Result.Success:\n    return gs.CommandResult()\n  hatch_name = gs.StringResult()\n\n  pattern_index = doc.HatchPatterns.Find(hatch_name, True)\n\n  if pattern_index < 0:\n    RhinoApp.WriteLine(\"The hatch pattern \"{0}\" not found  in the document.\", hatch_name)\n    return Result.Nothing\n\n  for obj_ref in obj_refs:\n    hatch_object = obj_ref.Object()\n    if hatch_object.HatchGeometry.PatternIndex <> pattern_index:\n      hatch_object.HatchGeometry.PatternIndex = pattern_index\n      hatch_object.CommitChanges()\n\n  doc.Views.Redraw()\n  return Result.Success\n\nif __name__ == \"__main__\":\n  RunCommand()",
    "members": [
      ["Rhino.Geometry.Hatch", "int PatternIndex"],
      ["Rhino.DocObjects.HatchObject", "Hatch HatchGeometry"]
    ]
  },
  {
    "name": "Rhinopageviewwidthheight.py",
    "code": "from Rhino import *\nfrom Rhino.Commands import *\nfrom Rhino.Input import *\nfrom scriptcontext import doc\n\ndef RunCommand():\n  width = 1189\n  height = 841\n  page_views = doc.Views.GetPageViews()\n  page_number = 1 if page_views==None else page_views.Length + 1\n  pageview = doc.Views.AddPageView(\"A0_{0}\".format(page_number), width, height)\n\n  new_width = width\n  rc, new_width = RhinoGet.GetInteger(\"new width\", False, new_width)\n  if rc != Result.Success or new_width <= 0: return rc\n\n  new_height = height\n  rc, new_height = RhinoGet.GetInteger(\"new height\", False, new_height)\n  if rc != Result.Success or new_height <= 0: return rc\n\n  pageview.PageWidth = new_width\n  pageview.PageHeight = new_height\n  doc.Views.Redraw()\n  return Result.Success\n\nif __name__ == \"__main__\":\n  RunCommand()",
    "members": [
      ["Rhino.Display.RhinoPageView", "double PageHeight"],
      ["Rhino.Display.RhinoPageView", "double PageWidth"]
    ]
  },
  {
    "name": "Screencaptureview.py",
    "code": "from scriptcontext import doc\nfrom System.Windows.Forms import *\nimport Rhino.UI\nfrom System import Environment\n\ndef RunCommand():\n  file_name = \"\";\n\n  bitmap = doc.Views.ActiveView.CaptureToBitmap(True, True, True)\n\n  # copy bitmap to clipboard\n  Clipboard.SetImage(bitmap)\n\n\n  # save bitmap to file\n  save_file_dialog = Rhino.UI.SaveFileDialog()\n  save_file_dialog.Filter = \"*.bmp\"\n  save_file_dialog.InitialDirectory = \\\n    Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)\n\n  if save_file_dialog.ShowDialog() == DialogResult.OK:\n    file_name = save_file_dialog.FileName\n\n  if file_name != \"\":\n    bitmap.Save(file_name)\n\n  return Rhino.Commands.Result.Success\n\nif __name__ == \"__main__\":\n  RunCommand()",
    "members": [
      ["Rhino.Display.RhinoView", "System.Drawing.Bitmap CaptureToBitmap(bool grid, bool worldAxes, bool cplaneAxes)"],
      ["Rhino.UI.SaveFileDialog", "SaveFileDialog()"],
      ["Rhino.UI.SaveFileDialog", "string FileName"],
      ["Rhino.UI.SaveFileDialog", "string Filter"],
      ["Rhino.UI.SaveFileDialog", "string InitialDirectory"],
      ["Rhino.UI.SaveFileDialog", "bool ShowSaveDialog()"]
    ]
  },
  {
    "name": "Sellayer.py",
    "code": "import Rhino\nimport scriptcontext\nimport System.Guid, System.Drawing.Color\n\ndef SelLayer():\n    # Prompt for a layer name\n    layername = scriptcontext.doc.Layers.CurrentLayer.Name\n    rc, layername = Rhino.Input.RhinoGet.GetString(\"Name of layer to select objects\", True, layername)\n    if rc!=Rhino.Commands.Result.Success: return rc\n    \n    # Get all of the objects on the layer. If layername is bogus, you will\n    # just get an empty list back\n    rhobjs = scriptcontext.doc.Objects.FindByLayer(layername)\n    if not rhobjs: Rhino.Commands.Result.Cancel\n    \n    for obj in rhobjs: obj.Select(True)\n    scriptcontext.doc.Views.Redraw()\n    return Rhino.Commands.Result.Success\n\nif __name__==\"__main__\":\n    SelLayer()\n",
    "members": [
      ["Rhino.DocObjects.Layer", "string Name"],
      ["Rhino.DocObjects.Tables.ObjectTable", "RhinoObject[] FindByLayer(string layerName)"],
      ["Rhino.DocObjects.Tables.LayerTable", "Layer CurrentLayer"]
    ]
  },
  {
    "name": "Splitbrepwithplane.py",
    "code": "from Rhino import *\nfrom Rhino.DocObjects import *\nfrom Rhino.Commands import *\nfrom Rhino.Input import *\nfrom Rhino.Geometry import *\nfrom scriptcontext import doc\n\ndef RunCommand():\n  #First, collect all the breps to split\n  rc, obj_refs = RhinoGet.GetMultipleObjects(\"Select breps to split\", False, ObjectType.Brep)\n  if rc <> Result.Success or obj_refs == None:\n    return rc\n\n  # Get the final plane\n  rc, plane = RhinoGet.GetPlane()\n  if rc <> Result.Success:\n    return rc\n\n  #Iterate over all object references\n  for obj_ref in obj_refs:\n    brep = obj_ref.Brep()\n    bbox = brep.GetBoundingBox(False)\n\n    #Grow the boundingbox in all directions\n    #If the boundingbox is flat (zero volume or even zero area) \n    #then the CreateThroughBox method will fail.\n    min_point = bbox.Min\n    min_point.X -= 1.0\n    min_point.Y -= 1.0\n    min_point.Z -= 1.0\n    bbox.Min = min_point\n    max_point = bbox.Max\n    max_point.X += 1.0\n    max_point.Y += 1.0\n    max_point.Z += 1.0\n    bbox.Max = max_point\n\n    plane_surface = PlaneSurface.CreateThroughBox(plane, bbox)\n    if plane_surface == None:\n      #This is rare, it will most likely not happen unless either the plane or the boundingbox are invalid\n      RhinoApp.WriteLine(\"Cutting plane could not be constructed.\")\n    else:\n      breps = brep.Split(plane_surface.ToBrep(), doc.ModelAbsoluteTolerance)\n      if breps == None or breps.Length == 0:\n        RhinoApp.Write(\"Plane does not intersect brep (id:{0})\", obj_ref.ObjectId)\n        continue\n      for brep_piece in breps:\n        doc.Objects.AddBrep(brep_piece)\n      doc.Objects.AddSurface(plane_surface)\n      doc.Objects.Delete(obj_ref, False)\n\n  doc.Views.Redraw()\n  return Result.Success\n\nif __name__ == \"__main__\":\n  RunCommand()",
    "members": [
      ["Rhino.Geometry.PlaneSurface", "static PlaneSurface CreateThroughBox(Plane plane, BoundingBox box)"],
      ["Rhino.Input.RhinoGet", "static Result GetPlane(out Plane plane)"]
    ]
  },
  {
    "name": "Srfpt.py",
    "code": "from Rhino.Geometry import NurbsSurface, Point3d\nfrom scriptcontext import doc\n\nsurface = NurbsSurface.CreateFromCorners(\n  Point3d(5, 0, 0),\n  Point3d(5, 5, 5),\n  Point3d(0, 5, 0),\n  Point3d(0, 0, 0));\n\ndoc.Objects.AddSurface(surface);\ndoc.Views.Redraw();",
    "members": [
      ["Rhino.Geometry.NurbsSurface", "static NurbsSurface CreateFromCorners(Point3d corner1, Point3d corner2, Point3d corner3, Point3d corner4)"]
    ]
  },
  {
    "name": "Sweep1.py",
    "code": "import rhinoscriptsyntax as rs\nimport Rhino\nimport scriptcontext\n\ndef Sweep1():\n    rail = rs.GetObject(\"Select rail curve\", rs.filter.curve)\n    rail_crv = rs.coercecurve(rail)\n    if not rail_crv: return\n\n    cross_sections = rs.GetObjects(\"Select cross section curves\", rs.filter.curve)\n    if not cross_sections: return\n    cross_sections = [rs.coercecurve(crv) for crv in cross_sections]\n\n    sweep = Rhino.Geometry.SweepOneRail()\n    sweep.AngleToleranceRadians = scriptcontext.doc.ModelAngleToleranceRadians\n    sweep.ClosedSweep = False\n    sweep.SweepTolerance = scriptcontext.doc.ModelAbsoluteTolerance\n    sweep.SetToRoadlikeTop()\n    breps = sweep.PerformSweep(rail_crv, cross_sections)\n    for brep in breps: scriptcontext.doc.Objects.AddBrep(brep)\n    scriptcontext.doc.Views.Redraw()\n\nif __name__ == \"__main__\":\n    Sweep1()\n",
    "members": [
      ["Rhino.Geometry.SweepOneRail", "SweepOneRail()"],
      ["Rhino.Geometry.SweepOneRail", "Brep[] PerformSweep(Curve rail, IEnumerable<Curve> crossSections)"]
    ]
  },
  {
    "name": "Textjustify.py",
    "code": "from scriptcontext import doc\nfrom Rhino.Geometry import *\n\ntext_entity = TextEntity()\ntext_entity.Plane = Plane.WorldXY\ntext_entity.Text = \"Hello Rhino!\"\ntext_entity.Justification = TextJustification.MiddleCenter\ntext_entity.FontIndex = doc.Fonts.FindOrCreate(\"Arial\", False, False)\n\ndoc.Objects.AddText(text_entity)\ndoc.Views.Redraw()",
    "members": [
      ["Rhino.Geometry.TextEntity", "TextEntity()"],
      ["Rhino.Geometry.TextEntity", "TextJustification Justification"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddText(Text3d text3d)"],
      ["Rhino.DocObjects.Tables.FontTable", "int FindOrCreate(string face, bool bold, bool italic)"]
    ]
  },
  {
    "name": "Tightboundingbox.py",
    "code": "from scriptcontext import doc\nimport rhinoscriptsyntax as rs\nfrom Rhino.Geometry import *\nfrom Rhino.Input import *\nfrom Rhino.DocObjects import *\nfrom Rhino.Commands import *\nfrom System.Collections.Generic import *\n\ndef RunCommand():\n  rc, obj_ref = RhinoGet.GetOneObject(\n    \"Select surface to split\", True, ObjectType.Surface)\n  if rc != Result.Success:\n    return rc\n  brep_face = obj_ref.Surface()\n  if brep_face == None:\n    return Result.Failure\n\n  rc, obj_ref = RhinoGet.GetOneObject(\n    \"Select cutting curve\", True, ObjectType.Curve)\n  if rc != Result.Success:\n    return rc\n  curve = obj_ref.Curve()\n  if curve == None:\n    return Result.Failure\n\n  curves = List[Curve]([curve])\n  split_brep = brep_face.Split(\n    curves, doc.ModelAbsoluteTolerance)\n\n  if split_brep == None:\n    RhinoApp.WriteLine(\"Unable to split surface.\")\n    return Result.Nothing\n\n  meshes = Mesh.CreateFromBrep(split_brep)\n  print type(meshes)\n  for mesh in meshes:\n    bbox = mesh.GetBoundingBox(True)\n    bbox_type = bbox.IsDegenerate(doc.ModelAbsoluteTolerance)\n    if bbox_type == 1: # rectangle\n        # box with 8 corners flattened to rectangle with 4 corners\n        box_corners = bbox.GetCorners()\n        rectangle_corners = []\n        for corner_point in box_corners:\n          if corner_point not in rectangle_corners:\n              rectangle_corners.append(corner_point)\n        # add 1st point as last to close the loop\n        rectangle_corners.append(rectangle_corners[0])\n        doc.Objects.AddPolyline(rectangle_corners)\n        doc.Views.Redraw()\n    elif bbox_type == 0: # box\n        brep_box = Box(bbox).ToBrep()\n        doc.Objects.AddBrep(brep_box)\n        doc.Views.Redraw()\n    else: # bbox invalid, point, or line\n      return Result.Failure\n\n  return Result.Success\n\nif __name__ == \"__main__\":\n  RunCommand()",
    "members": [
      ["Rhino.Geometry.BrepFace", "Brep Split(IEnumerable<Curve> curves, double tolerance)"],
      ["Rhino.Geometry.Mesh", "static Mesh[] CreateFromBrep(Brep brep)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddPolyline(IEnumerable<Point3d> points)"]
    ]
  },
  {
    "name": "Transformbrep.py",
    "code": "import Rhino\nimport scriptcontext\n\ndef TransformBrep():\n    rc, objref = Rhino.Input.RhinoGet.GetOneObject(\"Select brep\", True, Rhino.DocObjects.ObjectType.Brep)\n    if rc!=Rhino.Commands.Result.Success: return\n    \n    # Simple translation transformation\n    xform = Rhino.Geometry.Transform.Translation(18,-18,25)\n    scriptcontext.doc.Objects.Transform(objref, xform, True)\n    scriptcontext.doc.Views.Redraw()\n\nif __name__==\"__main__\":\n    TransformBrep()",
    "members": [
      ["Rhino.Geometry.Transform", "static Transform Translation(double dx, double dy, double dz)"]
    ]
  },
  {
    "name": "Viewportresolution.py",
    "code": "from scriptcontext import doc\n\nactiveViewport = doc.Views.ActiveView.ActiveViewport\nprint \"Name = {0}: Width = {1}, Height = {2}\".format(\n    activeViewport.Name, activeViewport.Size.Width, activeViewport.Size.Height)\n",
    "members": [
      ["Rhino.Display.RhinoViewport", "Size Size"]
    ]
  },
  {
    "name": "Activeviewport.vb",
    "code": "Partial Class Examples\n  Public Shared Function ActiveViewport(ByVal doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    Dim view As Rhino.Display.RhinoView = doc.Views.ActiveView\n    If view Is Nothing Then\n      Return Rhino.Commands.Result.Failure\n    End If\n\n    Dim pageview As Rhino.Display.RhinoPageView = TryCast(view, Rhino.Display.RhinoPageView)\n    If pageview IsNot Nothing Then\n      Dim layout_name As String = pageview.PageName\n      If pageview.PageIsActive Then\n        Rhino.RhinoApp.WriteLine(\"The layout {0} is active\", layout_name)\n      Else\n        Dim detail_name As String = pageview.ActiveViewport.Name\n        Rhino.RhinoApp.WriteLine(\"The detail {0} on layout {1} is active\", detail_name, layout_name)\n      End If\n    Else\n      Dim viewport_name As String = view.MainViewport.Name\n      Rhino.RhinoApp.WriteLine(\"The viewport {0} is active\", viewport_name)\n    End If\n    Return Rhino.Commands.Result.Success\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.Display.RhinoPageView", "bool PageIsActive"],
      ["Rhino.Display.RhinoPageView", "string PageName"]
    ]
  },
  {
    "name": "Addbackgroundbitmap.vb",
    "code": "Partial Class Examples\n  Public Shared Function AddBackgroundBitmap(ByVal doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    ' Allow the user to select a bitmap file\n    Dim fd As New Rhino.UI.OpenFileDialog()\n    fd.Filter = \"Image Files (*.bmp;*.png;*.jpg)|*.bmp;*.png;*.jpg\"\n    If fd.ShowDialog() <> System.Windows.Forms.DialogResult.OK Then\n      Return Rhino.Commands.Result.Cancel\n    End If\n\n    ' Verify the file that was selected\n    Dim image As System.Drawing.Image\n    Try\n      image = System.Drawing.Image.FromFile(fd.FileName)\n    Catch generatedExceptionName As Exception\n      Return Rhino.Commands.Result.Failure\n    End Try\n\n    ' Allow the user to pick the bitmap origin\n    Dim gp As New Rhino.Input.Custom.GetPoint()\n    gp.SetCommandPrompt(\"Bitmap Origin\")\n    gp.ConstrainToConstructionPlane(True)\n    gp.Get()\n    If gp.CommandResult() <> Rhino.Commands.Result.Success Then\n      Return gp.CommandResult()\n    End If\n\n    ' Get the view that the point was picked in.\n    ' This will be the view that the bitmap appears in.\n    Dim view As Rhino.Display.RhinoView = gp.View()\n    If view Is Nothing Then\n      view = doc.Views.ActiveView\n      If view Is Nothing Then\n        Return Rhino.Commands.Result.Failure\n      End If\n    End If\n\n    ' Allow the user to specify the bitmap with in model units\n    Dim gn As New Rhino.Input.Custom.GetNumber()\n    gn.SetCommandPrompt(\"Bitmap width\")\n    gn.SetLowerLimit(1.0, False)\n    gn.Get()\n    If gn.CommandResult() <> Rhino.Commands.Result.Success Then\n      Return gn.CommandResult()\n    End If\n\n    ' Cook up some scale factors\n    Dim w As Double = gn.Number()\n    Dim image_width As Double = CDbl(image.Width)\n    Dim image_height As Double = CDbl(image.Height)\n    Dim h As Double = w * (image_height / image_width)\n\n    Dim plane As Rhino.Geometry.Plane = view.ActiveViewport.ConstructionPlane()\n    plane.Origin = gp.Point()\n    view.ActiveViewport.SetTraceImage(fd.FileName, plane, w, h, False, False)\n    view.Redraw()\n    Return Rhino.Commands.Result.Success\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.Display.RhinoView", "RhinoViewport ActiveViewport"],
      ["Rhino.Display.RhinoView", "void Redraw()"],
      ["Rhino.Display.RhinoViewport", "Plane ConstructionPlane()"],
      ["Rhino.Display.RhinoViewport", "bool SetTraceImage(string bitmapFileName, Plane plane, double width, double height, bool grayscale, bool filtered)"],
      ["Rhino.UI.OpenFileDialog", "OpenFileDialog()"],
      ["Rhino.UI.OpenFileDialog", "string FileName"],
      ["Rhino.UI.OpenFileDialog", "string Filter"],
      ["Rhino.UI.OpenFileDialog", "bool ShowOpenDialog()"],
      ["Rhino.Input.Custom.GetBaseClass", "Result CommandResult()"],
      ["Rhino.Input.Custom.GetBaseClass", "double Number()"],
      ["Rhino.Input.Custom.GetBaseClass", "RhinoView View()"],
      ["Rhino.Input.Custom.GetPoint", "bool ConstrainToConstructionPlane(bool throughBasePoint)"],
      ["Rhino.Input.Custom.GetNumber", "GetNumber()"],
      ["Rhino.Input.Custom.GetNumber", "GetResult Get()"],
      ["Rhino.Input.Custom.GetNumber", "void SetLowerLimit(double lowerLimit, bool strictlyGreaterThan)"],
      ["Rhino.DocObjects.Tables.ViewTable", "RhinoView ActiveView"]
    ]
  },
  {
    "name": "Addbrepbox.vb",
    "code": "Partial Class Examples\n  Public Shared Function AddBrepBox(ByVal doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    Dim pt0 As New Rhino.Geometry.Point3d(0, 0, 0)\n    Dim pt1 As New Rhino.Geometry.Point3d(10, 10, 10)\n    Dim box As New Rhino.Geometry.BoundingBox(pt0, pt1)\n    Dim brep As Rhino.Geometry.Brep = box.ToBrep()\n    Dim rc As Rhino.Commands.Result = Rhino.Commands.Result.Failure\n    If doc.Objects.AddBrep(brep) <> System.Guid.Empty Then\n      rc = Rhino.Commands.Result.Success\n      doc.Views.Redraw()\n    End If\n    Return rc\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.Geometry.BoundingBox", "BoundingBox(Point3d min, Point3d max)"],
      ["Rhino.Geometry.BoundingBox", "Brep ToBrep()"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddBrep(Brep brep)"]
    ]
  },
  {
    "name": "Addchildlayer.vb",
    "code": "Partial Class Examples\n  Public Shared Function AddChildLayer(ByVal doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    ' Get an existing layer\n    Dim default_name As String = doc.Layers.CurrentLayer.Name\n\n    ' Prompt the user to enter a layer name\n    Dim gs As New Rhino.Input.Custom.GetString()\n    gs.SetCommandPrompt(\"Name of existing layer\")\n    gs.SetDefaultString(default_name)\n    gs.AcceptNothing(True)\n    gs.[Get]()\n    If gs.CommandResult() <> Rhino.Commands.Result.Success Then\n      Return gs.CommandResult()\n    End If\n\n    ' Was a layer named entered?\n    Dim layer_name As String = gs.StringResult().Trim()\n    Dim index As Integer = doc.Layers.Find(layer_name, True)\n    If index < 0 Then\n      Return Rhino.Commands.Result.Cancel\n    End If\n\n    Dim parent_layer As Rhino.DocObjects.Layer = doc.Layers(index)\n\n    ' Create a child layer\n    Dim child_name As String = parent_layer.Name + \"_child\"\n    Dim childlayer As New Rhino.DocObjects.Layer()\n    childlayer.ParentLayerId = parent_layer.Id\n    childlayer.Name = child_name\n    childlayer.Color = System.Drawing.Color.Red\n\n    index = doc.Layers.Add(childlayer)\n    If index < 0 Then\n      Rhino.RhinoApp.WriteLine(\"Unable to add {0} layer.\", child_name)\n      Return Rhino.Commands.Result.Failure\n    End If\n    Return Rhino.Commands.Result.Success\n  End Function\nEnd Class",
    "members": [
      ["Rhino.DocObjects.Layer", "Guid ParentLayerId"],
      ["Rhino.DocObjects.Tables.LayerTable", "int Add(Layer layer)"]
    ]
  },
  {
    "name": "Addcircle.vb",
    "code": "Partial Class Examples\n  Public Shared Function AddCircle(ByVal doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    Dim center As New Rhino.Geometry.Point3d(0, 0, 0)\n    Const radius As Double = 10.0\n    Dim c As New Rhino.Geometry.Circle(center, radius)\n    If doc.Objects.AddCircle(c) <> Guid.Empty Then\n      doc.Views.Redraw()\n      Return Rhino.Commands.Result.Success\n    End If\n    Return Rhino.Commands.Result.Failure\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.Geometry.Circle", "Circle(Plane plane, double radius)"],
      ["Rhino.Geometry.Point3d", "Point3d(double x, double y, double z)"],
      ["Rhino.DocObjects.Tables.ViewTable", "void Redraw()"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddCircle(Circle circle)"]
    ]
  },
  {
    "name": "Addclippingplane.vb",
    "code": "Partial Class Examples\n  Public Shared Function AddClippingPlane(ByVal doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    ' Define the corners of the clipping plane\n    Dim corners As Rhino.Geometry.Point3d() = Nothing\n    Dim rc As Rhino.Commands.Result = Rhino.Input.RhinoGet.GetRectangle(corners)\n    If rc <> Rhino.Commands.Result.Success Then\n      Return rc\n    End If\n\n    ' Get the active view\n    Dim view As Rhino.Display.RhinoView = doc.Views.ActiveView\n    If view Is Nothing Then\n      Return Rhino.Commands.Result.Failure\n    End If\n\n    Dim p0 As Rhino.Geometry.Point3d = corners(0)\n    Dim p1 As Rhino.Geometry.Point3d = corners(1)\n    Dim p3 As Rhino.Geometry.Point3d = corners(3)\n\n    ' Create a plane from the corner points\n    Dim plane As New Rhino.Geometry.Plane(p0, p1, p3)\n\n    ' Add a clipping plane object to the document\n    Dim id As Guid = doc.Objects.AddClippingPlane(plane, p0.DistanceTo(p1), p0.DistanceTo(p3), view.ActiveViewportID)\n    If id <> Guid.Empty Then\n      doc.Views.Redraw()\n      Return Rhino.Commands.Result.Success\n    End If\n    Return Rhino.Commands.Result.Failure\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.Geometry.Plane", "Plane(Point3d origin, Point3d xPoint, Point3d yPoint)"],
      ["Rhino.FileIO.File3dmObjectTable", "Guid AddClippingPlane(Plane plane, double uMagnitude, double vMagnitude, Guid clippedViewportId)"],
      ["Rhino.Input.RhinoGet", "static Result GetRectangle(out Point3d[] corners)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddClippingPlane(Plane plane, double uMagnitude, double vMagnitude, Guid clippedViewportId)"]
    ]
  },
  {
    "name": "Addcylinder.vb",
    "code": "Partial Class Examples\n  Public Shared Function AddCylinder(ByVal doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    Dim center_point As New Rhino.Geometry.Point3d(0, 0, 0)\n    Dim height_point As New Rhino.Geometry.Point3d(0, 0, 10)\n    Dim zaxis As Rhino.Geometry.Vector3d = height_point - center_point\n    Dim plane As New Rhino.Geometry.Plane(center_point, zaxis)\n    Const radius As Double = 5\n    Dim circle As New Rhino.Geometry.Circle(plane, radius)\n    Dim cylinder As New Rhino.Geometry.Cylinder(circle, zaxis.Length)\n    Dim brep As Rhino.Geometry.Brep = cylinder.ToBrep(True, True)\n    If brep IsNot Nothing Then\n      doc.Objects.AddBrep(brep)\n      doc.Views.Redraw()\n    End If\n    Return Rhino.Commands.Result.Success\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.Geometry.Cylinder", "Cylinder(Circle baseCircle, double height)"],
      ["Rhino.Geometry.Cylinder", "Brep ToBrep(bool capBottom, bool capTop)"],
      ["Rhino.Geometry.Plane", "Plane(Point3d origin, Vector3d normal)"]
    ]
  },
  {
    "name": "Addlayer.vb",
    "code": "Partial Class Examples\n  Public Shared Function AddLayer(ByVal doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    ' Cook up an unused layer name\n    Dim unused_name As String = doc.Layers.GetUnusedLayerName(False)\n\n    ' Prompt the user to enter a layer name\n    Dim gs As New Rhino.Input.Custom.GetString()\n    gs.SetCommandPrompt(\"Name of layer to add\")\n    gs.SetDefaultString(unused_name)\n    gs.AcceptNothing(True)\n    gs.Get()\n    If gs.CommandResult() <> Rhino.Commands.Result.Success Then\n      Return gs.CommandResult()\n    End If\n\n    ' Was a layer named entered?\n    Dim layer_name As String = gs.StringResult().Trim()\n    If String.IsNullOrEmpty(layer_name) Then\n      Rhino.RhinoApp.WriteLine(\"Layer name cannot be blank.\")\n      Return Rhino.Commands.Result.Cancel\n    End If\n\n    ' Is the layer name valid?\n    If Not Rhino.DocObjects.Layer.IsValidName(layer_name) Then\n      Rhino.RhinoApp.WriteLine(layer_name & \" is not a valid layer name.\")\n      Return Rhino.Commands.Result.Cancel\n    End If\n\n    ' Does a layer with the same name already exist?\n    Dim layer_index As Integer = doc.Layers.Find(layer_name, True)\n    If layer_index >= 0 Then\n      Rhino.RhinoApp.WriteLine(\"A layer with the name {0} already exists.\", layer_name)\n      Return Rhino.Commands.Result.Cancel\n    End If\n\n    ' Add a new layer to the document\n    layer_index = doc.Layers.Add(layer_name, System.Drawing.Color.Black)\n    If layer_index < 0 Then\n      Rhino.RhinoApp.WriteLine(\"Unable to add {0} layer.\", layer_name)\n      Return Rhino.Commands.Result.Failure\n    End If\n    Return Rhino.Commands.Result.Success\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.RhinoApp", "static void WriteLine(string message)"],
      ["Rhino.RhinoApp", "static void WriteLine(string format, object arg0)"],
      ["Rhino.DocObjects.Layer", "static bool IsValidName(string name)"],
      ["Rhino.Input.Custom.GetBaseClass", "void AcceptNothing(bool enable)"],
      ["Rhino.Input.Custom.GetBaseClass", "void SetDefaultString(string defaultValue)"],
      ["Rhino.Input.Custom.GetBaseClass", "string StringResult()"],
      ["Rhino.Input.Custom.GetString", "GetString()"],
      ["Rhino.Input.Custom.GetString", "GetResult Get()"],
      ["Rhino.DocObjects.Tables.LayerTable", "int Add(string layerName, Color layerColor)"],
      ["Rhino.DocObjects.Tables.LayerTable", "int Find(string layerName, bool ignoreDeletedLayers)"],
      ["Rhino.DocObjects.Tables.LayerTable", "Layer FindName(string layerName)"],
      ["Rhino.DocObjects.Tables.LayerTable", "string GetUnusedLayerName()"],
      ["Rhino.DocObjects.Tables.LayerTable", "string GetUnusedLayerName(bool ignoreDeleted)"]
    ]
  },
  {
    "name": "Addlayout.vb",
    "code": "Partial Class Examples\n  ''' <summary>\n  ''' Generate a layout with a single detail view that zooms to a list of objects\n  ''' </summary>\n  ''' <param name=\"doc\"></param>\n  ''' <returns></returns>\n  Public Shared Function AddLayout(doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    doc.PageUnitSystem = Rhino.UnitSystem.Millimeters\n    Dim page_views = doc.Views.GetPageViews()\n    Dim page_number As Integer = If((page_views Is Nothing), 1, page_views.Length + 1)\n    Dim pageview = doc.Views.AddPageView(String.Format(\"A0_{0}\", page_number), 1189, 841)\n    If pageview IsNot Nothing Then\n      Dim top_left As New Rhino.Geometry.Point2d(20, 821)\n      Dim bottom_right As New Rhino.Geometry.Point2d(1169, 20)\n      Dim detail = pageview.AddDetailView(\"ModelView\", top_left, bottom_right, Rhino.Display.DefinedViewportProjection.Top)\n      If detail IsNot Nothing Then\n        pageview.SetActiveDetail(detail.Id)\n        detail.Viewport.ZoomExtents()\n        detail.DetailGeometry.IsProjectionLocked = True\n        detail.DetailGeometry.SetScale(1, doc.ModelUnitSystem, 10, doc.PageUnitSystem)\n        ' Commit changes tells the document to replace the document's detail object\n        ' with the modified one that we just adjusted\n        detail.CommitChanges()\n      End If\n      pageview.SetPageAsActive()\n      doc.Views.ActiveView = pageview\n      doc.Views.Redraw()\n      Return Rhino.Commands.Result.Success\n    End If\n    Return Rhino.Commands.Result.Failure\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.RhinoDoc", "UnitSystem PageUnitSystem"],
      ["Rhino.Geometry.DetailView", "bool IsProjectionLocked"],
      ["Rhino.Geometry.DetailView", "bool SetScale(double modelLength, UnitSystem modelUnits, double pageLength, UnitSystem pageUnits)"],
      ["Rhino.DocObjects.RhinoObject", "bool CommitChanges()"],
      ["Rhino.Display.RhinoPageView", "DetailViewObject AddDetailView(string title, Point2d corner0, Point2d corner1, DefinedViewportProjection initialProjection)"],
      ["Rhino.Display.RhinoPageView", "bool SetActiveDetail(Guid detailId)"],
      ["Rhino.Display.RhinoPageView", "void SetPageAsActive()"],
      ["Rhino.Display.RhinoViewport", "bool ZoomExtents()"],
      ["Rhino.DocObjects.Tables.ViewTable", "RhinoPageView AddPageView(string title, double pageWidth, double pageHeight)"],
      ["Rhino.DocObjects.Tables.ViewTable", "RhinoPageView[] GetPageViews()"]
    ]
  },
  {
    "name": "Addline.vb",
    "code": "Partial Class Examples\n  Public Shared Function AddLine(ByVal doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    Dim gp As New Rhino.Input.Custom.GetPoint()\n    gp.SetCommandPrompt(\"Start of line\")\n    gp.Get()\n    If gp.CommandResult() <> Rhino.Commands.Result.Success Then\n      Return gp.CommandResult()\n    End If\n\n    Dim pt_start As Rhino.Geometry.Point3d = gp.Point()\n\n    gp.SetCommandPrompt(\"End of line\")\n    gp.SetBasePoint(pt_start, False)\n    gp.DrawLineFromPoint(pt_start, True)\n    gp.Get()\n    If gp.CommandResult() <> Rhino.Commands.Result.Success Then\n      Return gp.CommandResult()\n    End If\n\n    Dim pt_end As Rhino.Geometry.Point3d = gp.Point()\n    Dim v As Rhino.Geometry.Vector3d = pt_end - pt_start\n    If v.IsTiny(Rhino.RhinoMath.ZeroTolerance) Then\n      Return Rhino.Commands.Result.[Nothing]\n    End If\n\n    If doc.Objects.AddLine(pt_start, pt_end) <> Guid.Empty Then\n      doc.Views.Redraw()\n      Return Rhino.Commands.Result.Success\n    End If\n    Return Rhino.Commands.Result.Failure\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.Geometry.Vector2d", "bool IsTiny(double tolerance)"],
      ["Rhino.Geometry.Vector3d", "bool IsTiny(double tolerance)"],
      ["Rhino.Input.Custom.GetBaseClass", "Point3d Point()"],
      ["Rhino.Input.Custom.GetBaseClass", "void SetCommandPrompt(string prompt)"],
      ["Rhino.Input.Custom.GetPoint", "GetPoint()"],
      ["Rhino.Input.Custom.GetPoint", "void DrawLineFromPoint(Point3d startPoint, bool showDistanceInStatusBar)"],
      ["Rhino.Input.Custom.GetPoint", "GetResult Get()"],
      ["Rhino.Input.Custom.GetPoint", "void SetBasePoint(Point3d basePoint, bool showDistanceInStatusBar)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddLine(Point3d from, Point3d to)"]
    ]
  },
  {
    "name": "Addlineardimension.vb",
    "code": "Partial Class Examples\n  Public Shared Function AddLinearDimension(ByVal doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    Dim dimension As Rhino.Geometry.LinearDimension = Nothing\n    Dim rc As Rhino.Commands.Result = Rhino.Input.RhinoGet.GetLinearDimension(dimension)\n    If rc = Rhino.Commands.Result.Success AndAlso dimension IsNot Nothing Then\n      If doc.Objects.AddLinearDimension(dimension) = Guid.Empty Then\n        rc = Rhino.Commands.Result.Failure\n      Else\n        doc.Views.Redraw()\n      End If\n    End If\n    Return rc\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.Input.RhinoGet", "static Result GetLinearDimension(out LinearDimension dimension)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddLinearDimension(LinearDimension dimension)"]
    ]
  },
  {
    "name": "Addlineardimension2.vb",
    "code": "Imports Rhino.Geometry\n\nPartial Class Examples\n  Public Shared Function AddLinearDimension2(ByVal doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    Dim origin As New Point3d(1, 1, 0)\n    Dim offset As New Point3d(11, 1, 0)\n    Dim pt As New Point3d((offset.X - origin.X) / 2, 3, 0)\n\n    Dim plane__1 As Plane = Plane.WorldXY\n    plane__1.Origin = origin\n\n    Dim u As Double, v As Double\n    plane__1.ClosestParameter(origin, u, v)\n    Dim ext1 As New Point2d(u, v)\n\n    plane__1.ClosestParameter(offset, u, v)\n    Dim ext2 As New Point2d(u, v)\n\n    plane__1.ClosestParameter(pt, u, v)\n    Dim linePt As New Point2d(u, v)\n\n    Dim dimension As New LinearDimension(plane__1, ext1, ext2, linePt)\n    If doc.Objects.AddLinearDimension(dimension) <> Guid.Empty Then\n      doc.Views.Redraw()\n      Return Rhino.Commands.Result.Success\n    End If\n    Return Rhino.Commands.Result.Failure\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.Geometry.LinearDimension", "LinearDimension(Plane dimensionPlane, Point2d extensionLine1End, Point2d extensionLine2End, Point2d pointOnDimensionLine)"],
      ["Rhino.Geometry.Plane", "bool ClosestParameter(Point3d testPoint, out double s, out double t)"]
    ]
  },
  {
    "name": "Addmesh.vb",
    "code": "Partial Class Examples\n  Public Shared Function AddMesh(ByVal doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    Dim mesh As New Rhino.Geometry.Mesh()\n    mesh.Vertices.Add(0.0, 0.0, 1.0) '0\n    mesh.Vertices.Add(1.0, 0.0, 1.0) '1\n    mesh.Vertices.Add(2.0, 0.0, 1.0) '2\n    mesh.Vertices.Add(3.0, 0.0, 0.0) '3\n    mesh.Vertices.Add(0.0, 1.0, 1.0) '4\n    mesh.Vertices.Add(1.0, 1.0, 2.0) '5\n    mesh.Vertices.Add(2.0, 1.0, 1.0) '6\n    mesh.Vertices.Add(3.0, 1.0, 0.0) '7\n    mesh.Vertices.Add(0.0, 2.0, 1.0) '8\n    mesh.Vertices.Add(1.0, 2.0, 1.0) '9\n    mesh.Vertices.Add(2.0, 2.0, 1.0) '10\n    mesh.Vertices.Add(3.0, 2.0, 1.0) '11\n    mesh.Faces.AddFace(0, 1, 5, 4)\n    mesh.Faces.AddFace(1, 2, 6, 5)\n    mesh.Faces.AddFace(2, 3, 7, 6)\n    mesh.Faces.AddFace(4, 5, 9, 8)\n    mesh.Faces.AddFace(5, 6, 10, 9)\n    mesh.Faces.AddFace(6, 7, 11, 10)\n    mesh.Normals.ComputeNormals()\n    mesh.Compact()\n    If doc.Objects.AddMesh(mesh) <> Guid.Empty Then\n      doc.Views.Redraw()\n      Return Rhino.Commands.Result.Success\n    End If\n    Return Rhino.Commands.Result.Failure\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.Geometry.Mesh", "Mesh()"],
      ["Rhino.Geometry.Mesh", "MeshFaceList Faces"],
      ["Rhino.Geometry.Mesh", "MeshVertexNormalList Normals"],
      ["Rhino.Geometry.Mesh", "MeshVertexList Vertices"],
      ["Rhino.Geometry.Mesh", "bool Compact()"],
      ["Rhino.Geometry.Collections.MeshVertexList", "int Add(double x, double y, double z)"],
      ["Rhino.Geometry.Collections.MeshVertexList", "int Add(float x, float y, float z)"],
      ["Rhino.Geometry.Collections.MeshVertexNormalList", "bool ComputeNormals()"],
      ["Rhino.Geometry.Collections.MeshFaceList", "int AddFace(int vertex1, int vertex2, int vertex3, int vertex4)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddMesh(Mesh mesh)"]
    ]
  },
  {
    "name": "Addnamedview.vb",
    "code": "Partial Class Examples\n  Public Shared Function AddNamedView(ByVal doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    Dim view As Rhino.Display.RhinoView = Nothing\n    Dim rc As Rhino.Commands.Result = Rhino.Input.RhinoGet.GetView(\"Select view to adjust\", view)\n    If rc <> Rhino.Commands.Result.Success Then\n      Return rc\n    End If\n\n    Dim location As Rhino.Geometry.Point3d\n    rc = Rhino.Input.RhinoGet.GetPoint(\"Camera Location\", False, location)\n    If rc <> Rhino.Commands.Result.Success Then\n      Return rc\n    End If\n\n    Dim gp As New Rhino.Input.Custom.GetPoint()\n    gp.SetCommandPrompt(\"Look At Location\")\n    gp.DrawLineFromPoint(location, False)\n    gp.Get()\n    If gp.CommandResult() <> Rhino.Commands.Result.Success Then\n      Return gp.CommandResult()\n    End If\n    Dim lookat As Rhino.Geometry.Point3d = gp.Point()\n\n    Dim name As String = view.ActiveViewport.Name\n    rc = Rhino.Input.RhinoGet.GetString(\"Name\", True, name)\n    If rc <> Rhino.Commands.Result.Success Then\n      Return rc\n    End If\n\n    Dim vp As Rhino.Display.RhinoViewport = view.ActiveViewport\n    ' save the current viewport projection\n    vp.PushViewProjection()\n    vp.CameraUp = Rhino.Geometry.Vector3d.ZAxis\n    vp.SetCameraLocation(location, False)\n    vp.SetCameraDirection(lookat - location, True)\n    vp.Name = name\n\n    doc.NamedViews.Add(name, vp.Id)\n    view.Redraw()\n    Return Rhino.Commands.Result.Success\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.RhinoDoc", "NamedViewTable NamedViews"],
      ["Rhino.Display.RhinoViewport", "Vector3d CameraUp"],
      ["Rhino.Display.RhinoViewport", "string Name"],
      ["Rhino.Display.RhinoViewport", "bool PopViewProjection()"],
      ["Rhino.Display.RhinoViewport", "void PushViewProjection()"],
      ["Rhino.Display.RhinoViewport", "void SetCameraDirection(Vector3d cameraDirection, bool updateTargetLocation)"],
      ["Rhino.Display.RhinoViewport", "void SetCameraLocation(Point3d cameraLocation, bool updateTargetLocation)"],
      ["Rhino.Input.RhinoGet", "static Result GetPoint(string prompt, bool acceptNothing, out Point3d point)"],
      ["Rhino.Input.RhinoGet", "static Result GetString(string prompt, bool acceptNothing, ref string outputString)"],
      ["Rhino.Input.RhinoGet", "static Result GetView(string commandPrompt, out RhinoView view)"],
      ["Rhino.DocObjects.Tables.NamedViewTable", "int Add(string name, Guid viewportId)"]
    ]
  },
  {
    "name": "Addnurbscircle.vb",
    "code": "Partial Class Examples\n  Public Shared Function AddNurbsCircle(ByVal doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    ' The easy way to get a NURBS curve from a circle is with\n    ' the following two lines of code.\n    '\n    ' Dim c As New Rhino.Geometry.Circle(20)\n    ' Dim nc As Rhino.Geometry.NurbsCurve = c.ToNurbsCurve()\n    '\n    ' This sample demonstrates creating a NURBS curve from scratch.\n    Const dimension As Integer = 3\n    Const isRational As Boolean = True\n    Const order As Integer = 3\n    Const cv_count As Integer = 9\n    Dim nc As New Rhino.Geometry.NurbsCurve(dimension, isRational, order, cv_count)\n    nc.Points.SetPoint(0, 1.0, 0.0, 0.0, 1.0)\n    nc.Points.SetPoint(1, 0.707107, 0.707107, 0.0, 0.707107)\n    nc.Points.SetPoint(2, 0.0, 1.0, 0.0, 1.0)\n    nc.Points.SetPoint(3, -0.707107, 0.707107, 0.0, 0.707107)\n    nc.Points.SetPoint(4, -1.0, 0.0, 0.0, 1.0)\n    nc.Points.SetPoint(5, -0.707107, -0.707107, 0.0, 0.707107)\n    nc.Points.SetPoint(6, 0.0, -1.0, 0.0, 1.0)\n    nc.Points.SetPoint(7, 0.707107, -0.707107, 0.0, 0.707107)\n    nc.Points.SetPoint(8, 1.0, 0.0, 0.0, 1.0)\n    nc.Knots(0) = 0.0\n    nc.Knots(1) = 0.0\n    nc.Knots(2) = 0.5 * Math.PI\n    nc.Knots(3) = 0.5 * Math.PI\n    nc.Knots(4) = Math.PI\n    nc.Knots(5) = Math.PI\n    nc.Knots(6) = 1.5 * Math.PI\n    nc.Knots(7) = 1.5 * Math.PI\n    nc.Knots(8) = 2.0 * Math.PI\n    nc.Knots(9) = 2.0 * Math.PI\n    If nc.IsValid Then\n      doc.Objects.AddCurve(nc)\n      doc.Views.Redraw()\n      Return Rhino.Commands.Result.Success\n    End If\n    Return Rhino.Commands.Result.Failure\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.Geometry.NurbsCurve", "NurbsCurve(int dimension, bool rational, int order, int pointCount)"],
      ["Rhino.Geometry.NurbsCurve", "NurbsCurveKnotList Knots"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddCurve(Curve curve)"]
    ]
  },
  {
    "name": "Addnurbscurve.vb",
    "code": "Partial Class Examples\n  Public Shared Function AddNurbsCurve(ByVal doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    Dim points As New Rhino.Collections.Point3dList(5)\n    points.Add(0, 0, 0)\n    points.Add(0, 2, 0)\n    points.Add(2, 3, 0)\n    points.Add(4, 2, 0)\n    points.Add(4, 0, 0)\n    Dim nc As Rhino.Geometry.NurbsCurve = Rhino.Geometry.NurbsCurve.Create(False, 3, points)\n    Dim rc As Rhino.Commands.Result = Rhino.Commands.Result.Failure\n    If nc IsNot Nothing AndAlso nc.IsValid Then\n      If doc.Objects.AddCurve(nc) <> Guid.Empty Then\n        doc.Views.Redraw()\n        rc = Rhino.Commands.Result.Success\n      End If\n    End If\n    Return rc\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.Geometry.NurbsCurve", "static NurbsCurve Create(bool periodic, int degree, IEnumerable<Point3d> points)"],
      ["Rhino.Collections.Point3dList", "Point3dList(int initialCapacity)"],
      ["Rhino.Collections.Point3dList", "void Add(double x, double y, double z)"]
    ]
  },
  {
    "name": "Addobjectstogroup.vb",
    "code": "Imports System.Collections.Generic\n\nPartial Class Examples\n  Public Shared Function AddObjectsToGroup(ByVal doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    Dim go As New Rhino.Input.Custom.GetObject()\n    go.SetCommandPrompt(\"Select objects to group\")\n    go.GroupSelect = True\n    go.GetMultiple(1, 0)\n    If go.CommandResult() <> Rhino.Commands.Result.Success Then\n      Return go.CommandResult()\n    End If\n\n    Dim ids As New List(Of Guid)()\n    For i As Integer = 0 To go.ObjectCount - 1\n      ids.Add(go.[Object](i).ObjectId)\n    Next\n    Dim index As Integer = doc.Groups.Add(ids)\n    doc.Views.Redraw()\n    If index >= 0 Then\n      Return Rhino.Commands.Result.Success\n    End If\n    Return Rhino.Commands.Result.Failure\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.RhinoDoc", "GroupTable Groups"],
      ["Rhino.Input.Custom.GetObject", "GetObject()"],
      ["Rhino.Input.Custom.GetObject", "GetResult GetMultiple(int minimumNumber, int maximumNumber)"],
      ["Rhino.DocObjects.Tables.GroupTable", "int Add(IEnumerable<Guid> objectIds)"]
    ]
  },
  {
    "name": "Addradialdimension.vb",
    "code": "Imports Rhino\nImports Rhino.DocObjects\nImports Rhino.Commands\nImports Rhino.Geometry\nImports Rhino.Input\n\nNamespace examples_vb\n  Public Class AddRadialDimensionCommand\n    Inherits Rhino.Commands.Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbAddRadialDimension\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim obj_ref As ObjRef = Nothing\n      Dim rc = RhinoGet.GetOneObject(\"Select curve for radius dimension\", True, ObjectType.Curve, obj_ref)\n      If rc <> Result.Success Then\n        Return rc\n      End If\n      Dim curve_parameter As Double\n      Dim curve = obj_ref.CurveParameter(curve_parameter)\n      If curve Is Nothing Then\n        Return Result.Failure\n      End If\n\n      If curve.IsLinear() OrElse curve.IsPolyline() Then\n        RhinoApp.WriteLine(\"Curve must be non-linear.\")\n        Return Result.[Nothing]\n      End If\n\n      ' in this example just deal with planar curves\n      If Not curve.IsPlanar() Then\n        RhinoApp.WriteLine(\"Curve must be planar.\")\n        Return Result.[Nothing]\n      End If\n\n      Dim point_on_curve = curve.PointAt(curve_parameter)\n      Dim curvature_vector = curve.CurvatureAt(curve_parameter)\n      Dim len = curvature_vector.Length\n      If len < RhinoMath.SqrtEpsilon Then\n        RhinoApp.WriteLine(\"Curve is almost linear and therefore has no curvature.\")\n        Return Result.[Nothing]\n      End If\n\n      Dim center = point_on_curve + (curvature_vector / (len * len))\n      Dim plane As Plane\n      curve.TryGetPlane(plane)\n      Dim radial_dimension = New RadialDimension(center, point_on_curve, plane.XAxis, plane.Normal, 5.0)\n      doc.Objects.AddRadialDimension(radial_dimension)\n      doc.Views.Redraw()\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Geometry.Curve", "Vector3d CurvatureAt(double t)"],
      ["Rhino.Geometry.Curve", "bool IsLinear()"],
      ["Rhino.Geometry.Curve", "bool IsPlanar()"],
      ["Rhino.Geometry.Curve", "bool IsPolyline()"],
      ["Rhino.Geometry.Curve", "Point3d PointAt(double t)"],
      ["Rhino.DocObjects.ObjRef", "Curve CurveParameter(out double parameter)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddRadialDimension(RadialDimension dimension)"]
    ]
  },
  {
    "name": "Addsphere.vb",
    "code": "Partial Class Examples\n  Public Shared Function AddSphere(ByVal doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    Dim center As New Rhino.Geometry.Point3d(0, 0, 0)\n    Const radius As Double = 5.0\n    Dim sphere As New Rhino.Geometry.Sphere(center, radius)\n    If doc.Objects.AddSphere(sphere) <> Guid.Empty Then\n      doc.Views.Redraw()\n      Return Rhino.Commands.Result.Success\n    End If\n    Return Rhino.Commands.Result.Failure\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.Geometry.Sphere", "Sphere(Point3d center, double radius)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddSphere(Sphere sphere)"]
    ]
  },
  {
    "name": "Addtext.vb",
    "code": "Partial Class Examples\n  Public Shared Function AddAnnotationText(ByVal doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    Dim pt As New Rhino.Geometry.Point3d(10, 0, 0)\n    Const text As String = \"Hello RhinoCommon\"\n    Const height As Double = 2.0\n    Const font As String = \"Arial\"\n    Dim plane As Rhino.Geometry.Plane = doc.Views.ActiveView.ActiveViewport.ConstructionPlane()\n    plane.Origin = pt\n    Dim id As Guid = doc.Objects.AddText(text, plane, height, font, False, False)\n    If id <> Guid.Empty Then\n      doc.Views.Redraw()\n      Return Rhino.Commands.Result.Success\n    End If\n    Return Rhino.Commands.Result.Failure\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddText(string text, Plane plane, double height, string fontName, bool bold, bool italic)"]
    ]
  },
  {
    "name": "Addtorus.vb",
    "code": "Partial Class Examples\n  Public Shared Function AddTorus(ByVal doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    Const major_radius As Double = 4.0\n    Const minor_radius As Double = 2.0\n\n    Dim plane As Rhino.Geometry.Plane = Rhino.Geometry.Plane.WorldXY\n    Dim torus As New Rhino.Geometry.Torus(plane, major_radius, minor_radius)\n    Dim revsrf As Rhino.Geometry.RevSurface = torus.ToRevSurface()\n    If doc.Objects.AddSurface(revsrf) <> Guid.Empty Then\n      doc.Views.Redraw()\n      Return Rhino.Commands.Result.Success\n    End If\n    Return Rhino.Commands.Result.Failure\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.Geometry.Torus", "Torus(Plane basePlane, double majorRadius, double minorRadius)"],
      ["Rhino.Geometry.Torus", "RevSurface ToRevSurface()"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddSurface(Surface surface)"]
    ]
  },
  {
    "name": "Addtruncatedcone.vb",
    "code": "Imports Rhino.Geometry\n\nPartial Class Examples\n  Public Shared Function AddTruncatedCone(ByVal doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    Dim bottom_pt As New Point3d(0, 0, 0)\n    Const bottom_radius As Double = 2\n    Dim bottom_circle As New Circle(bottom_pt, bottom_radius)\n\n    Dim top_pt As New Point3d(0, 0, 10)\n    Const top_radius As Double = 6\n    Dim top_circle As New Circle(top_pt, top_radius)\n\n    Dim shapeCurve As New LineCurve(bottom_circle.PointAt(0), top_circle.PointAt(0))\n    Dim axis As New Line(bottom_circle.Center, top_circle.Center)\n    Dim revsrf As RevSurface = RevSurface.Create(shapeCurve, axis)\n    Dim tcone_brep As Brep = Brep.CreateFromRevSurface(revsrf, True, True)\n    If doc.Objects.AddBrep(tcone_brep) <> Guid.Empty Then\n      doc.Views.Redraw()\n      Return Rhino.Commands.Result.Success\n    End If\n    Return Rhino.Commands.Result.Failure\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.Geometry.Brep", "static Brep CreateFromRevSurface(RevSurface surface, bool capStart, bool capEnd)"],
      ["Rhino.Geometry.Circle", "Circle(Point3d center, double radius)"],
      ["Rhino.Geometry.LineCurve", "LineCurve(Point3d from, Point3d to)"],
      ["Rhino.Geometry.RevSurface", "static RevSurface Create(Curve revoluteCurve, Line axisOfRevolution)"]
    ]
  },
  {
    "name": "Advanceddisplay.vb",
    "code": "Imports System.Collections.Generic\nImports Rhino.Display\n\nPartial Class Examples\n  ' The following example demonstrates how to modify advanced display settings using\n  ' RhinoCommon. In this example, a display mode's mesh wireframe thickness (in pixels)\n  ' will be modified.\n  Public Shared Function AdvancedDisplay(ByVal doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    ' Use the display attributes manager to build a list of display modes.\n    ' Note, these are copies of the originals...\n    Dim display_modes As DisplayModeDescription() = DisplayModeDescription.GetDisplayModes()\n    If display_modes Is Nothing OrElse display_modes.Length < 1 Then\n      Return Rhino.Commands.Result.Failure\n    End If\n\n    ' Construct an options picker so the user can pick which\n    ' display mode they want modified\n    Dim go As New Rhino.Input.Custom.GetOption()\n    go.SetCommandPrompt(\"Display mode to modify mesh thickness\")\n    Dim opt_list As New List(Of Integer)()\n\n    For i As Integer = 0 To display_modes.Length - 1\n      Dim english_name As String = display_modes(i).EnglishName\n      english_name = english_name.Replace(\"_\", \"\")\n      english_name = english_name.Replace(\" \", \"\")\n      english_name = english_name.Replace(\"-\", \"\")\n      english_name = english_name.Replace(\",\", \"\")\n      english_name = english_name.Replace(\".\", \"\")\n      Dim index As Integer = go.AddOption(english_name)\n      opt_list.Add(index)\n    Next\n\n    ' Get the command option\n    go.[Get]()\n    If go.CommandResult() <> Rhino.Commands.Result.Success Then\n      Return go.CommandResult()\n    End If\n\n    Dim selected_index As Integer = go.[Option]().Index\n    Dim selected_description As DisplayModeDescription = Nothing\n    For i As Integer = 0 To opt_list.Count - 1\n      If opt_list(i) = selected_index Then\n        selected_description = display_modes(i)\n        Exit For\n      End If\n    Next\n\n    ' Validate...\n    If selected_description Is Nothing Then\n      Return Rhino.Commands.Result.Failure\n    End If\n\n    ' Modify the desired display mode. In this case, we\n    ' will just set the mesh wireframe thickness to zero.\n    selected_description.DisplayAttributes.MeshSpecificAttributes.MeshWireThickness = 0\n    ' Use the display attributes manager to update the display mode.\n    DisplayModeDescription.UpdateDisplayMode(selected_description)\n\n    ' Force the document to regenerate.\n    doc.Views.Redraw()\n    Return Rhino.Commands.Result.Success\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.Display.DisplayModeDescription", "DisplayPipelineAttributes DisplayAttributes"],
      ["Rhino.Display.DisplayModeDescription", "static DisplayModeDescription[] GetDisplayModes()"],
      ["Rhino.Display.DisplayModeDescription", "static bool UpdateDisplayMode(DisplayModeDescription displayMode)"],
      ["Rhino.Input.Custom.GetBaseClass", "int AddOption(string englishOption)"]
    ]
  },
  {
    "name": "Analysismode.vb",
    "code": "Imports Rhino.DocObjects\nImports Rhino\nImports Rhino.Geometry\n\n\n<System.Runtime.InteropServices.Guid(\"62dd8eec-5cce-42c7-9d80-8b01fc169b81\")> _\nPublic Class AnalysisModeOnCommand\n  Inherits Rhino.Commands.Command\n  Public Overrides ReadOnly Property EnglishName() As String\n    Get\n      Return \"cs_analysismode_on\"\n    End Get\n  End Property\n\n  Protected Overrides Function RunCommand(doc As RhinoDoc, mode As Rhino.Commands.RunMode) As Rhino.Commands.Result\n    ' make sure our custom visual analysis mode is registered\n    Dim zmode = Rhino.Display.VisualAnalysisMode.Register(GetType(ZAnalysisMode))\n\n    Const filter As ObjectType = Rhino.DocObjects.ObjectType.Surface Or Rhino.DocObjects.ObjectType.PolysrfFilter Or Rhino.DocObjects.ObjectType.Mesh\n    Dim objs As Rhino.DocObjects.ObjRef() = Nothing\n    Dim rc = Rhino.Input.RhinoGet.GetMultipleObjects(\"Select objects for Z analysis\", False, filter, objs)\n    If rc <> Rhino.Commands.Result.Success Then\n      Return rc\n    End If\n\n    Dim count As Integer = 0\n    For i As Integer = 0 To objs.Length - 1\n      Dim obj = objs(i).[Object]()\n\n      ' see if this object is alreay in Z analysis mode\n      If obj.InVisualAnalysisMode(zmode) Then\n        Continue For\n      End If\n\n      If obj.EnableVisualAnalysisMode(zmode, True) Then\n        count += 1\n      End If\n    Next\n    doc.Views.Redraw()\n    RhinoApp.WriteLine(\"{0} objects were put into Z-Analysis mode.\", count)\n    Return Rhino.Commands.Result.Success\n  End Function\nEnd Class\n\n<System.Runtime.InteropServices.Guid(\"0A8CE87D-A8CB-4A41-9DE2-5B3957436AEE\")> _\nPublic Class AnalysisModeOffCommand\n  Inherits Rhino.Commands.Command\n  Public Overrides ReadOnly Property EnglishName() As String\n    Get\n      Return \"cs_analysismode_off\"\n    End Get\n  End Property\n\n  Protected Overrides Function RunCommand(doc As RhinoDoc, mode As Rhino.Commands.RunMode) As Rhino.Commands.Result\n    Dim zmode = Rhino.Display.VisualAnalysisMode.Find(GetType(ZAnalysisMode))\n    ' If zmode is null, we've never registered the mode so we know it hasn't been used\n    If zmode IsNot Nothing Then\n      For Each obj As Rhino.DocObjects.RhinoObject In doc.Objects\n        obj.EnableVisualAnalysisMode(zmode, False)\n      Next\n      doc.Views.Redraw()\n    End If\n    RhinoApp.WriteLine(\"Z-Analysis is off.\")\n    Return Rhino.Commands.Result.Success\n  End Function\nEnd Class\n\n\n''' <summary>\n''' This simple example provides a false color based on the world z-coordinate.\n''' For details, see the implementation of the FalseColor() function.\n''' </summary>\nPublic Class ZAnalysisMode\n  Inherits Rhino.Display.VisualAnalysisMode\n  Private m_z_range As New Interval(-10, 10)\n  Private m_hue_range As New Interval(0, 4 * Math.PI / 3)\n  Private Const m_show_isocurves As Boolean = True\n\n  Public Overrides ReadOnly Property Name() As String\n    Get\n      Return \"Z-Analysis\"\n    End Get\n  End Property\n  Public Overrides ReadOnly Property Style() As Rhino.Display.VisualAnalysisMode.AnalysisStyle\n    Get\n      Return AnalysisStyle.FalseColor\n    End Get\n  End Property\n\n  Public Overrides Function ObjectSupportsAnalysisMode(obj As Rhino.DocObjects.RhinoObject) As Boolean\n    If TypeOf obj Is Rhino.DocObjects.MeshObject OrElse TypeOf obj Is Rhino.DocObjects.BrepObject Then\n      Return True\n    End If\n    Return False\n  End Function\n\n  Protected Overrides Sub UpdateVertexColors(obj As Rhino.DocObjects.RhinoObject, meshes As Mesh())\n    ' A \"mapping tag\" is used to determine if the colors need to be set\n    Dim mt As Rhino.Render.MappingTag = GetMappingTag(obj.RuntimeSerialNumber)\n\n    For mi As Integer = 0 To meshes.Length - 1\n      Dim mesh = meshes(mi)\n      If mesh.VertexColors.Tag.Id <> Me.Id Then\n        ' The mesh's mapping tag is different from ours. Either the mesh has\n        ' no false colors, has false colors set by another analysis mode, has\n        ' false colors set using different m_z_range[]/m_hue_range[] values, or\n        ' the mesh has been moved.  In any case, we need to set the false\n        ' colors to the ones we want.\n        Dim colors As System.Drawing.Color() = New System.Drawing.Color(mesh.Vertices.Count - 1) {}\n        For i As Integer = 0 To mesh.Vertices.Count - 1\n          Dim z As Double = mesh.Vertices(i).Z\n          colors(i) = FalseColor(z)\n        Next\n        mesh.VertexColors.SetColors(colors)\n        ' set the mesh's color tag \n        mesh.VertexColors.Tag = mt\n      End If\n    Next\n  End Sub\n\n  Public Overrides ReadOnly Property ShowIsoCurves() As Boolean\n    Get\n      ' Most shaded analysis modes that work on breps have the option of\n      ' showing or hiding isocurves.  Run the built-in Rhino ZebraAnalysis\n      ' to see how Rhino handles the user interface.  If controlling\n      ' iso-curve visability is a feature you want to support, then provide\n      ' user interface to set this member variable.\n      Return m_show_isocurves\n    End Get\n  End Property\n\n  ''' <summary>\n  ''' Returns a mapping tag that is used to detect when a mesh's colors need to\n  ''' be set.\n  ''' </summary>\n  ''' <returns></returns>\n  Private Function GetMappingTag(serialNumber As UInteger) As Rhino.Render.MappingTag\n    Dim mt As New Rhino.Render.MappingTag()\n    mt.Id = Me.Id\n\n    ' Since the false colors that are shown will change if the mesh is\n    ' transformed, we have to initialize the transformation.\n    mt.MeshTransform = Transform.Identity\n\n    ' This is a 32 bit CRC or the information used to set the false colors.\n    ' For this example, the m_z_range and m_hue_range intervals control the\n    ' colors, so we calculate their crc.\n    Dim crc As UInteger = RhinoMath.CRC32(serialNumber, m_z_range.T0)\n    crc = RhinoMath.CRC32(crc, m_z_range.T1)\n    crc = RhinoMath.CRC32(crc, m_hue_range.T0)\n    crc = RhinoMath.CRC32(crc, m_hue_range.T1)\n    mt.MappingCRC = crc\n    Return mt\n  End Function\n\n  Private Function FalseColor(z As Double) As System.Drawing.Color\n    ' Simple example of one way to change a number into a color.\n    Dim s As Double = m_z_range.NormalizedParameterAt(z)\n    s = Rhino.RhinoMath.Clamp(s, 0, 1)\n    Return System.Drawing.Color.FromArgb(CInt(Math.Truncate(s * 255)), 0, 0)\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.RhinoMath", "static uint CRC32(uint currentRemainder, double value)"],
      ["Rhino.Geometry.Collections.MeshVertexColorList", "MappingTag Tag"],
      ["Rhino.Geometry.Collections.MeshVertexColorList", "bool SetColors(Color[] colors)"]
    ]
  },
  {
    "name": "Arclengthpoint.vb",
    "code": "Partial Class Examples\n  Public Shared Function ArcLengthPoint(ByVal doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    Dim objref As Rhino.DocObjects.ObjRef = Nothing\n    Dim rc As Rhino.Commands.Result = Rhino.Input.RhinoGet.GetOneObject(\"Select curve\", True, Rhino.DocObjects.ObjectType.Curve, objref)\n    If rc <> Rhino.Commands.Result.Success Then\n      Return rc\n    End If\n    Dim crv As Rhino.Geometry.Curve = objref.Curve()\n    If crv Is Nothing Then\n      Return Rhino.Commands.Result.Failure\n    End If\n\n    Dim crv_length As Double = crv.GetLength()\n    Dim length As Double = 0\n    rc = Rhino.Input.RhinoGet.GetNumber(\"Length from start\", True, length, 0, crv_length)\n    If rc <> Rhino.Commands.Result.Success Then\n      Return rc\n    End If\n\n    Dim pt As Rhino.Geometry.Point3d = crv.PointAtLength(length)\n    If pt.IsValid Then\n      doc.Objects.AddPoint(pt)\n      doc.Views.Redraw()\n    End If\n    Return Rhino.Commands.Result.Success\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.Geometry.Curve", "double GetLength()"],
      ["Rhino.Geometry.Curve", "Point3d PointAtLength(double length)"]
    ]
  },
  {
    "name": "Arraybydistance.vb",
    "code": "Imports Rhino\n\n<System.Runtime.InteropServices.Guid(\"03249FBF-75C9-4878-83CC-20C197E5A758\")> _\nPublic Class ArrayByDistanceCommand\n  Inherits Rhino.Commands.Command\n  Public Overrides ReadOnly Property EnglishName() As String\n    Get\n      Return \"vb_ArrayByDistance\"\n    End Get\n  End Property\n\n  Private m_distance As Double = 1\n  Private m_point_start As Rhino.Geometry.Point3d\n  Protected Overrides Function RunCommand(doc As RhinoDoc, mode As Rhino.Commands.RunMode) As Rhino.Commands.Result\n    Dim objref As Rhino.DocObjects.ObjRef = Nothing\n    Dim rc = Rhino.Input.RhinoGet.GetOneObject(\"Select object\", True, Rhino.DocObjects.ObjectType.AnyObject, objref)\n    If rc <> Rhino.Commands.Result.Success Then\n      Return rc\n    End If\n\n    rc = Rhino.Input.RhinoGet.GetPoint(\"Start point\", False, m_point_start)\n    If rc <> Rhino.Commands.Result.Success Then\n      Return rc\n    End If\n\n    Dim obj = objref.Object()\n    If obj Is Nothing Then\n      Return Rhino.Commands.Result.Failure\n    End If\n\n    ' create an instance of a GetPoint class and add a delegate\n    ' for the DynamicDraw event\n    Dim gp = New Rhino.Input.Custom.GetPoint()\n    gp.DrawLineFromPoint(m_point_start, True)\n    Dim optdouble = New Rhino.Input.Custom.OptionDouble(m_distance)\n    Dim constrain As Boolean = False\n    Dim optconstrain = New Rhino.Input.Custom.OptionToggle(constrain, \"Off\", \"On\")\n    gp.AddOptionDouble(\"Distance\", optdouble)\n    gp.AddOptionToggle(\"Constrain\", optconstrain)\n    AddHandler gp.DynamicDraw, AddressOf ArrayByDistanceDraw\n    gp.Tag = obj\n    While gp.Get() = Rhino.Input.GetResult.Option\n      m_distance = optdouble.CurrentValue\n      If constrain <> optconstrain.CurrentValue Then\n        constrain = optconstrain.CurrentValue\n        If constrain Then\n          Dim gp2 = New Rhino.Input.Custom.GetPoint()\n          gp2.DrawLineFromPoint(m_point_start, True)\n          gp2.SetCommandPrompt(\"Second point on constraint line\")\n          If gp2.Get() = Rhino.Input.GetResult.Point Then\n            gp.Constrain(m_point_start, gp2.Point())\n          Else\n            gp.ClearCommandOptions()\n            optconstrain.CurrentValue = False\n            constrain = False\n            gp.AddOptionDouble(\"Distance\", optdouble)\n            gp.AddOptionToggle(\"Constrain\", optconstrain)\n          End If\n        Else\n          gp.ClearConstraints()\n        End If\n      End If\n    End While\n\n    If gp.CommandResult() = Rhino.Commands.Result.Success Then\n      m_distance = optdouble.CurrentValue\n      Dim pt = gp.Point()\n      Dim vec = pt - m_point_start\n      Dim length As Double = vec.Length\n      vec.Unitize()\n      Dim count As Integer = CInt(Math.Truncate(length / m_distance))\n      For i As Integer = 1 To count - 1\n        Dim translate = vec * (i * m_distance)\n        Dim xf = Rhino.Geometry.Transform.Translation(translate)\n        doc.Objects.Transform(obj, xf, False)\n      Next\n      doc.Views.Redraw()\n    End If\n\n    Return gp.CommandResult()\n  End Function\n\n  ' this function is called whenever the GetPoint's DynamicDraw\n  ' event occurs\n  Private Sub ArrayByDistanceDraw(sender As Object, e As Rhino.Input.Custom.GetPointDrawEventArgs)\n    Dim rhobj As Rhino.DocObjects.RhinoObject = TryCast(e.Source.Tag, Rhino.DocObjects.RhinoObject)\n    If rhobj Is Nothing Then\n      Return\n    End If\n    Dim vec = e.CurrentPoint - m_point_start\n    Dim length As Double = vec.Length\n    vec.Unitize()\n    Dim count As Integer = CInt(Math.Truncate(length / m_distance))\n    For i As Integer = 1 To count - 1\n      Dim translate = vec * (i * m_distance)\n      Dim xf = Rhino.Geometry.Transform.Translation(translate)\n      e.Display.DrawObject(rhobj, xf)\n    Next\n  End Sub\nEnd Class\n",
    "members": [
      ["Rhino.Display.DisplayPipeline", "void DrawObject(RhinoObject rhinoObject, Transform xform)"],
      ["Rhino.Input.Custom.GetBaseClass", "void ClearCommandOptions()"],
      ["Rhino.Input.Custom.GetPoint", "object Tag"],
      ["Rhino.Input.Custom.GetPoint", "void ClearConstraints()"],
      ["Rhino.Input.Custom.GetPoint", "bool Constrain(Point3d from, Point3d to)"],
      ["Rhino.Input.Custom.GetPointDrawEventArgs", "GetPoint Source"]
    ]
  },
  {
    "name": "Blockinsertionpoint.vb",
    "code": "Partial Class Examples\n  Public Shared Function BlockInsertionPoint(ByVal doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    Dim rc As Rhino.Commands.Result\n    Dim objref As Rhino.DocObjects.ObjRef = Nothing\n    rc = Rhino.Input.RhinoGet.GetOneObject(\"Select instance\", True, Rhino.DocObjects.ObjectType.InstanceReference, objref)\n    If rc <> Rhino.Commands.Result.Success Then\n      Return rc\n    End If\n    Dim instance As Rhino.DocObjects.InstanceObject = TryCast(objref.[Object](), Rhino.DocObjects.InstanceObject)\n    If instance IsNot Nothing Then\n      Dim pt As Rhino.Geometry.Point3d = instance.InsertionPoint\n      doc.Objects.AddPoint(pt)\n      doc.Views.Redraw()\n    End If\n    Return Rhino.Commands.Result.Success\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.DocObjects.InstanceObject", "Point3d InsertionPoint"]
    ]
  },
  {
    "name": "Booleandifference.vb",
    "code": "Imports System.Collections.Generic\n\nPartial Class Examples\n  Public Shared Function BooleanDifference(ByVal doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    Dim rc As Rhino.Commands.Result\n    Dim objrefs As Rhino.DocObjects.ObjRef() = Nothing\n    rc = Rhino.Input.RhinoGet.GetMultipleObjects(\"Select first set of polysurfaces\", False, Rhino.DocObjects.ObjectType.PolysrfFilter, objrefs)\n    If rc <> Rhino.Commands.Result.Success Then\n      Return rc\n    End If\n    If objrefs Is Nothing OrElse objrefs.Length < 1 Then\n      Return Rhino.Commands.Result.Failure\n    End If\n\n    Dim in_breps0 As New List(Of Rhino.Geometry.Brep)()\n    For i As Integer = 0 To objrefs.Length - 1\n      Dim brep As Rhino.Geometry.Brep = objrefs(i).Brep()\n      If brep IsNot Nothing Then\n        in_breps0.Add(brep)\n      End If\n    Next\n\n    doc.Objects.UnselectAll()\n    rc = Rhino.Input.RhinoGet.GetMultipleObjects(\"Select second set of polysurfaces\", False, Rhino.DocObjects.ObjectType.PolysrfFilter, objrefs)\n    If rc <> Rhino.Commands.Result.Success Then\n      Return rc\n    End If\n    If objrefs Is Nothing OrElse objrefs.Length < 1 Then\n      Return Rhino.Commands.Result.Failure\n    End If\n\n    Dim in_breps1 As New List(Of Rhino.Geometry.Brep)()\n    For i As Integer = 0 To objrefs.Length - 1\n      Dim brep As Rhino.Geometry.Brep = objrefs(i).Brep()\n      If brep IsNot Nothing Then\n        in_breps1.Add(brep)\n      End If\n    Next\n\n    Dim tolerance As Double = doc.ModelAbsoluteTolerance\n    Dim breps As Rhino.Geometry.Brep() = Rhino.Geometry.Brep.CreateBooleanDifference(in_breps0, in_breps1, tolerance)\n    If breps.Length < 1 Then\n      Return Rhino.Commands.Result.[Nothing]\n    End If\n    For i As Integer = 0 To breps.Length - 1\n      doc.Objects.AddBrep(breps(i))\n    Next\n    doc.Views.Redraw()\n    Return Rhino.Commands.Result.Success\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.Geometry.Brep", "static Brep[] CreateBooleanDifference(IEnumerable<Brep> firstSet, IEnumerable<Brep> secondSet, double tolerance)"],
      ["Rhino.Geometry.Brep", "static Brep[] CreateBooleanDifference(IEnumerable<Brep> firstSet, IEnumerable<Brep> secondSet, double tolerance, bool manifoldOnly)"],
      ["Rhino.DocObjects.ObjRef", "Brep Brep()"],
      ["Rhino.Input.RhinoGet", "static Result GetMultipleObjects(string prompt, bool acceptNothing, ObjectType filter, out ObjRef[] rhObjects)"]
    ]
  },
  {
    "name": "Circlecenter.vb",
    "code": "Partial Class Examples\n  Public Shared Function CircleCenter(ByVal doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    Dim go As New Rhino.Input.Custom.GetObject()\n    go.SetCommandPrompt(\"Select objects\")\n    go.GeometryFilter = Rhino.DocObjects.ObjectType.Curve\n    go.GeometryAttributeFilter = Rhino.Input.[Custom].GeometryAttributeFilter.ClosedCurve\n    go.GetMultiple(1, 0)\n    If go.CommandResult() <> Rhino.Commands.Result.Success Then\n      Return go.CommandResult()\n    End If\n\n    Dim objrefs As Rhino.DocObjects.ObjRef() = go.Objects()\n    If objrefs Is Nothing Then\n      Return Rhino.Commands.Result.[Nothing]\n    End If\n\n    Dim tolerance As Double = doc.ModelAbsoluteTolerance\n    For i As Integer = 0 To objrefs.Length - 1\n      ' get the curve geometry\n      Dim curve As Rhino.Geometry.Curve = objrefs(i).Curve()\n      If curve Is Nothing Then\n        Continue For\n      End If\n      Dim circle As Rhino.Geometry.Circle\n      If curve.TryGetCircle(circle, tolerance) Then\n        Rhino.RhinoApp.WriteLine(\"Circle{0}: center = {1}\", i + 1, circle.Center)\n      End If\n    Next\n    Return Rhino.Commands.Result.Success\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.Geometry.Curve", "bool TryGetCircle(out Circle circle, double tolerance)"],
      ["Rhino.Input.Custom.GetObject", "GeometryAttributeFilter GeometryAttributeFilter"]
    ]
  },
  {
    "name": "Closestpoint.vb",
    "code": "Imports Rhino\nImports Rhino.Geometry\n\nNamespace examples_vb\n  <System.Runtime.InteropServices.Guid(\"B89D4A42-A712-4FA4-9ABF-6BE1FB962D24\")> _\n  Public Class RTreeClosestPoint\n    Inherits Rhino.Commands.Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vb_RtreeClosestPoint\"\n      End Get\n    End Property\n\n    Private Sub SearchCallback(sender As Object, e As RTreeEventArgs)\n      Dim data As SearchData = TryCast(e.Tag, SearchData)\n      data.HitCount = data.HitCount + 1\n      Dim vertex As Point3f = data.Mesh.Vertices(e.Id)\n      Dim distance As Double = data.Point.DistanceTo(vertex)\n      If data.Index = -1 OrElse data.Distance > distance Then\n        ' shrink the sphere to help improve the test\n        e.SearchSphere = New Sphere(data.Point, distance)\n        data.Index = e.Id\n        data.Distance = distance\n      End If\n    End Sub\n\n    Private Class SearchData\n      Public Sub New(mesh__1 As Mesh, point__2 As Point3d)\n        Point = point__2\n        Mesh = mesh__1\n        HitCount = 0\n        Index = -1\n        Distance = 0\n      End Sub\n\n      Public Property HitCount As Integer\n      Public Property Point As Point3d\n      Public Property Mesh As Mesh\n      Public Property Index As Integer\n      Public Property Distance As Double\n    End Class\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As Rhino.Commands.RunMode) As Rhino.Commands.Result\n      Dim objref As Rhino.DocObjects.ObjRef = Nothing\n      Dim rc = Rhino.Input.RhinoGet.GetOneObject(\"select mesh\", False, Rhino.DocObjects.ObjectType.Mesh, objref)\n      If rc <> Rhino.Commands.Result.Success Then\n        Return rc\n      End If\n\n      Dim mesh As Mesh = objref.Mesh()\n      objref.Object().Select(False)\n      doc.Views.Redraw()\n\n      Using tree As New RTree()\n        For i As Integer = 0 To mesh.Vertices.Count - 1\n          ' we can make a C++ function that just builds an rtree from the\n          ' vertices in one quick shot, but for now...\n          tree.Insert(mesh.Vertices(i), i)\n        Next\n\n        Dim point As Point3d\n        While True\n          rc = Rhino.Input.RhinoGet.GetPoint(\"test point\", False, point)\n          If rc <> Rhino.Commands.Result.Success Then\n            Exit While\n          End If\n\n          Dim data As New SearchData(mesh, point)\n          ' Use the first vertex in the mesh to define a start sphere\n          Dim distance As Double = point.DistanceTo(mesh.Vertices(0))\n          Dim sphere As New Sphere(point, distance * 1.1)\n          If tree.Search(sphere, AddressOf SearchCallback, data) Then\n            doc.Objects.AddPoint(mesh.Vertices(data.Index))\n            doc.Views.Redraw()\n            RhinoApp.WriteLine(\"Found point in {0} tests\", data.HitCount)\n          End If\n        End While\n      End Using\n      Return Rhino.Commands.Result.Success\n    End Function\n  End Class\nEnd Namespace\n",
    "members": [
      ["Rhino.Geometry.RTree", "RTree()"],
      ["Rhino.Geometry.RTree", "bool Insert(Point3d point, int elementId)"],
      ["Rhino.Geometry.RTree", "bool Search(Sphere sphere, EventHandler<RTreeEventArgs> callback, object tag)"]
    ]
  },
  {
    "name": "Commandlineoptions.vb",
    "code": "Partial Class Examples\n  Public Shared Function CommandLineOptions(ByVal doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    ' For this example we will use a GetPoint class, but all of the custom\n    ' \"Get\" classes support command line options.\n    Dim gp As New Rhino.Input.Custom.GetPoint()\n    gp.SetCommandPrompt(\"GetPoint with options\")\n\n    ' set up the options\n    Dim intOption As New Rhino.Input.Custom.OptionInteger(1, 1, 99)\n    Dim dblOption As New Rhino.Input.Custom.OptionDouble(2.2, 0, 99.9)\n    Dim boolOption As New Rhino.Input.Custom.OptionToggle(True, \"Off\", \"On\")\n    Dim listValues As String() = New String() {\"Item0\", \"Item1\", \"Item2\", \"Item3\", \"Item4\"}\n\n    gp.AddOptionInteger(\"Integer\", intOption)\n    gp.AddOptionDouble(\"Double\", dblOption)\n    gp.AddOptionToggle(\"Boolean\", boolOption)\n    Dim listIndex As Integer = 3\n    Dim opList As Integer = gp.AddOptionList(\"List\", listValues, listIndex)\n\n    While True\n      ' perform the get operation. This will prompt the user to input a point, but also\n      ' allow for command line options defined above\n      Dim get_rc As Rhino.Input.GetResult = gp.[Get]()\n      If gp.CommandResult() <> Rhino.Commands.Result.Success Then\n        Return gp.CommandResult()\n      End If\n\n      If get_rc = Rhino.Input.GetResult.Point Then\n        doc.Objects.AddPoint(gp.Point())\n        doc.Views.Redraw()\n        Rhino.RhinoApp.WriteLine(\"Command line option values are\")\n        Rhino.RhinoApp.WriteLine(\" Integer = {0}\", intOption.CurrentValue)\n        Rhino.RhinoApp.WriteLine(\" Double = {0}\", dblOption.CurrentValue)\n        Rhino.RhinoApp.WriteLine(\" Boolean = {0}\", boolOption.CurrentValue)\n        Rhino.RhinoApp.WriteLine(\" List = {0}\", listValues(listIndex))\n      ElseIf get_rc = Rhino.Input.GetResult.[Option] Then\n        If gp.OptionIndex() = opList Then\n          listIndex = gp.[Option]().CurrentListOptionIndex\n        End If\n        Continue While\n      End If\n      Exit While\n    End While\n    Return Rhino.Commands.Result.Success\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.Input.Custom.GetBaseClass", "int AddOptionDouble(LocalizeStringPair optionName, ref OptionDouble numberValue)"],
      ["Rhino.Input.Custom.GetBaseClass", "int AddOptionDouble(string englishName, ref OptionDouble numberValue)"],
      ["Rhino.Input.Custom.GetBaseClass", "int AddOptionInteger(LocalizeStringPair optionName, ref OptionInteger intValue)"],
      ["Rhino.Input.Custom.GetBaseClass", "int AddOptionInteger(string englishName, ref OptionInteger intValue)"],
      ["Rhino.Input.Custom.GetBaseClass", "int AddOptionToggle(LocalizeStringPair optionName, ref OptionToggle toggleValue)"],
      ["Rhino.Input.Custom.GetBaseClass", "int AddOptionToggle(string englishName, ref OptionToggle toggleValue)"],
      ["Rhino.Input.Custom.CommandLineOption", "int CurrentListOptionIndex"],
      ["Rhino.Input.Custom.OptionToggle", "OptionToggle(bool initialValue, string offValue, string onValue)"],
      ["Rhino.Input.Custom.OptionToggle", "bool CurrentValue"],
      ["Rhino.Input.Custom.OptionDouble", "OptionDouble(double initialValue, double lowerLimit, double upperLimit)"],
      ["Rhino.Input.Custom.OptionDouble", "double CurrentValue"],
      ["Rhino.Input.Custom.OptionInteger", "OptionInteger(int initialValue, int lowerLimit, int upperLimit)"],
      ["Rhino.Input.Custom.OptionInteger", "int CurrentValue"]
    ]
  },
  {
    "name": "Conduitarrowheads.vb",
    "code": "Imports Rhino\nImports Rhino.Commands\nImports Rhino.Geometry\nImports System.Collections.Generic\nImports Rhino.Input.Custom\n\nNamespace examples_vb\n  Class DrawArrowHeadsConduit\n    Inherits Rhino.Display.DisplayConduit\n    Private _line As Line\n    Private _screenSize As Integer\n    Private _worldSize As Double\n\n    Public Sub New(line As Line, screenSize As Integer, worldSize As Double)\n      _line = line\n      _screenSize = screenSize\n      _worldSize = worldSize\n    End Sub\n\n    Protected Overrides Sub DrawForeground(e As Rhino.Display.DrawEventArgs)\n      e.Display.DrawArrow(_line, System.Drawing.Color.Black, _screenSize, _worldSize)\n    End Sub\n  End Class\n\n  Public Class DrawArrowheadsCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbDrawArrowHeads\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      ' get arrow head size\n      Dim go = New Rhino.Input.Custom.GetOption()\n      go.SetCommandPrompt(\"ArrowHead length in screen size (pixles) or world size (percentage of arrow lenght)?\")\n      go.AddOption(\"screen\")\n      go.AddOption(\"world\")\n      go.[Get]()\n      If go.CommandResult() <> Result.Success Then\n        Return go.CommandResult()\n      End If\n\n      Dim screenSize As Integer = 0\n      Dim worldSize As Double = 0.0\n      If go.[Option]().EnglishName = \"screen\" Then\n        Dim gi = New Rhino.Input.Custom.GetInteger()\n        gi.SetLowerLimit(0, True)\n        gi.SetCommandPrompt(\"Length of arrow head in pixels\")\n        gi.[Get]()\n        If gi.CommandResult() <> Result.Success Then\n          Return gi.CommandResult()\n        End If\n        screenSize = gi.Number()\n      Else\n        Dim gi = New Rhino.Input.Custom.GetInteger()\n        gi.SetLowerLimit(0, True)\n        gi.SetUpperLimit(100, False)\n        gi.SetCommandPrompt(\"Lenght of arrow head in percentage of total arrow lenght\")\n        gi.[Get]()\n        If gi.CommandResult() <> Result.Success Then\n          Return gi.CommandResult()\n        End If\n        worldSize = gi.Number() / 100.0\n      End If\n\n\n      ' get arrow start and end points\n      Dim gp = New Rhino.Input.Custom.GetPoint()\n      gp.SetCommandPrompt(\"Start of line\")\n      gp.[Get]()\n      If gp.CommandResult() <> Result.Success Then\n        Return gp.CommandResult()\n      End If\n      Dim startPoint = gp.Point()\n\n      gp.SetCommandPrompt(\"End of line\")\n      gp.SetBasePoint(startPoint, False)\n      gp.DrawLineFromPoint(startPoint, True)\n      gp.[Get]()\n      If gp.CommandResult() <> Result.Success Then\n        Return gp.CommandResult()\n      End If\n      Dim endPoint = gp.Point()\n\n      Dim v = endPoint - startPoint\n      If v.IsTiny(Rhino.RhinoMath.ZeroTolerance) Then\n        Return Result.[Nothing]\n      End If\n\n      Dim line = New Line(startPoint, endPoint)\n\n      Dim conduit = New DrawArrowHeadsConduit(line, screenSize, worldSize)\n      ' toggle conduit on/off\n      conduit.Enabled = Not conduit.Enabled\n      RhinoApp.WriteLine(\"draw arrowheads conduit enabled = {0}\", conduit.Enabled)\n\n      doc.Views.Redraw()\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Display.DisplayPipeline", "void DrawArrow(Line line, Color color, double screenSize, double relativeSize)"]
    ]
  },
  {
    "name": "Conduitbitmap.vb",
    "code": "Imports System.Drawing\nImports Rhino\nImports Rhino.Commands\nImports Rhino.Display\n\nNamespace examples_vb\n  Public Class DrawBitmapConduit\n    Inherits Rhino.Display.DisplayConduit\n    Private ReadOnly m_display_bitmap As DisplayBitmap\n\n    Public Sub New()\n      Dim flag = New System.Drawing.Bitmap(100, 100)\n      For x As Integer = 0 To flag.Height - 1\n        For y As Integer = 0 To flag.Width - 1\n          flag.SetPixel(x, y, Color.White)\n        Next\n      Next\n\n      Dim g = Graphics.FromImage(flag)\n      g.FillEllipse(Brushes.Blue, 25, 25, 50, 50)\n      m_display_bitmap = New DisplayBitmap(flag)\n    End Sub\n\n    Protected Overrides Sub DrawForeground(e As Rhino.Display.DrawEventArgs)\n      e.Display.DrawBitmap(m_display_bitmap, 50, 50, Color.White)\n    End Sub\n  End Class\n\n  Public Class DrawBitmapCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbDrawBitmap\"\n      End Get\n    End Property\n\n    ReadOnly m_conduit As New DrawBitmapConduit()\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      ' toggle conduit on/off\n      m_conduit.Enabled = Not m_conduit.Enabled\n\n      RhinoApp.WriteLine(\"Custom conduit enabled = {0}\", m_conduit.Enabled)\n      doc.Views.Redraw()\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Display.DisplayPipeline", "void DrawBitmap(DisplayBitmap bitmap, int left, int top)"]
    ]
  },
  {
    "name": "Constrainedcopy.vb",
    "code": "Partial Class Examples\n  Public Shared Function ConstrainedCopy(doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    ' Get a single planar closed curve\n    Dim go = New Rhino.Input.Custom.GetObject()\n    go.SetCommandPrompt(\"Select curve\")\n    go.GeometryFilter = Rhino.DocObjects.ObjectType.Curve\n    go.GeometryAttributeFilter = Rhino.Input.Custom.GeometryAttributeFilter.ClosedCurve\n    go.Get()\n    If go.CommandResult() <> Rhino.Commands.Result.Success Then\n      Return go.CommandResult()\n    End If\n    Dim objref = go.Object(0)\n    Dim base_curve = objref.Curve()\n    Dim first_point = objref.SelectionPoint()\n    If base_curve Is Nothing OrElse Not first_point.IsValid Then\n      Return Rhino.Commands.Result.Cancel\n    End If\n\n    Dim plane As Rhino.Geometry.Plane\n    If Not base_curve.TryGetPlane(plane) Then\n      Return Rhino.Commands.Result.Cancel\n    End If\n\n    ' Get a point constrained to a line passing through the initial selection\n    ' point and parallel to the plane's normal\n    Dim gp = New Rhino.Input.Custom.GetPoint()\n    gp.SetCommandPrompt(\"Offset point\")\n    gp.DrawLineFromPoint(first_point, True)\n    Dim line = New Rhino.Geometry.Line(first_point, first_point + plane.Normal)\n    gp.Constrain(line)\n    gp.Get()\n    If gp.CommandResult() <> Rhino.Commands.Result.Success Then\n      Return gp.CommandResult()\n    End If\n    Dim second_point = gp.Point()\n    Dim vec As Rhino.Geometry.Vector3d = second_point - first_point\n    If vec.Length > 0.001 Then\n      Dim xf = Rhino.Geometry.Transform.Translation(vec)\n      Dim id As Guid = doc.Objects.Transform(objref, xf, False)\n      If id <> Guid.Empty Then\n        doc.Views.Redraw()\n        Return Rhino.Commands.Result.Success\n      End If\n    End If\n    Return Rhino.Commands.Result.Cancel\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.Geometry.Curve", "bool TryGetPlane(out Plane plane)"],
      ["Rhino.Geometry.Transform", "static Transform Translation(Vector3d motion)"],
      ["Rhino.DocObjects.ObjRef", "Point3d SelectionPoint()"],
      ["Rhino.Input.Custom.GetPoint", "bool Constrain(Line line)"]
    ]
  },
  {
    "name": "Createblock.vb",
    "code": "Imports Rhino.DocObjects\n\nPartial Class Examples\n  Public Shared Function CreateBlock(doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    ' Select objects to define block\n    Dim go = New Rhino.Input.Custom.GetObject()\n    go.SetCommandPrompt(\"Select objects to define block\")\n    go.ReferenceObjectSelect = False\n    go.SubObjectSelect = False\n    go.GroupSelect = True\n\n    ' Phantoms, grips, lights, etc., cannot be in blocks.\n    Const forbidden_geometry_filter As ObjectType = Rhino.DocObjects.ObjectType.Light Or Rhino.DocObjects.ObjectType.Grip Or Rhino.DocObjects.ObjectType.Phantom\n    Const geometry_filter As ObjectType = forbidden_geometry_filter Xor Rhino.DocObjects.ObjectType.AnyObject\n    go.GeometryFilter = geometry_filter\n    go.GetMultiple(1, 0)\n    If go.CommandResult() <> Rhino.Commands.Result.Success Then\n      Return go.CommandResult()\n    End If\n\n    ' Block base point\n    Dim base_point As Rhino.Geometry.Point3d\n    Dim rc = Rhino.Input.RhinoGet.GetPoint(\"Block base point\", False, base_point)\n    If rc <> Rhino.Commands.Result.Success Then\n      Return rc\n    End If\n\n    ' Block definition name\n    Dim idef_name As String = \"\"\n    rc = Rhino.Input.RhinoGet.GetString(\"Block definition name\", False, idef_name)\n    If rc <> Rhino.Commands.Result.Success Then\n      Return rc\n    End If\n    ' Validate block name\n    idef_name = idef_name.Trim()\n    If String.IsNullOrEmpty(idef_name) Then\n      Return Rhino.Commands.Result.[Nothing]\n    End If\n\n    ' See if block name already exists\n    Dim existing_idef As Rhino.DocObjects.InstanceDefinition = doc.InstanceDefinitions.Find(idef_name, True)\n    If existing_idef IsNot Nothing Then\n      Rhino.RhinoApp.WriteLine(\"Block definition {0} already exists\", idef_name)\n      Return Rhino.Commands.Result.[Nothing]\n    End If\n\n    ' Gather all of the selected objects\n    Dim geometry = New System.Collections.Generic.List(Of Rhino.Geometry.GeometryBase)()\n    Dim attributes = New System.Collections.Generic.List(Of Rhino.DocObjects.ObjectAttributes)()\n    For i As Integer = 0 To go.ObjectCount - 1\n      Dim rhinoObject = go.Object(i).[Object]()\n      If rhinoObject IsNot Nothing Then\n        geometry.Add(rhinoObject.Geometry)\n        attributes.Add(rhinoObject.Attributes)\n      End If\n    Next\n\n    ' Gather all of the selected objects\n    Dim idef_index As Integer = doc.InstanceDefinitions.Add(idef_name, String.Empty, base_point, geometry, attributes)\n\n    If idef_index < 0 Then\n      Rhino.RhinoApp.WriteLine(\"Unable to create block definition\", idef_name)\n      Return Rhino.Commands.Result.Failure\n    End If\n    Return Rhino.Commands.Result.Failure\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.Input.Custom.GetObject", "bool ReferenceObjectSelect"],
      ["Rhino.DocObjects.Tables.InstanceDefinitionTable", "int Add(string name, string description, Point3d basePoint, IEnumerable<GeometryBase> geometry, IEnumerable<ObjectAttributes> attributes)"],
      ["Rhino.DocObjects.Tables.InstanceDefinitionTable", "InstanceDefinition Find(string instanceDefinitionName)"],
      ["Rhino.DocObjects.Tables.InstanceDefinitionTable", "InstanceDefinition Find(string instanceDefinitionName, bool ignoreDeletedInstanceDefinitions)"]
    ]
  },
  {
    "name": "Createmeshfrombrep.vb",
    "code": "Imports Rhino\nImports Rhino.Commands\nImports Rhino.Geometry\nImports Rhino.DocObjects\n\nNamespace examples_vb\n  Public Class CreateMeshFromBrepCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbCreateMeshFromBrep\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim objRef As ObjRef = Nothing\n      Dim rc = Rhino.Input.RhinoGet.GetOneObject(\"Select surface or polysurface to mesh\", True, ObjectType.Surface Or ObjectType.PolysrfFilter, objRef)\n      If rc <> Result.Success Then\n        Return rc\n      End If\n      Dim brep = objRef.Brep()\n      If brep Is Nothing Then\n        Return Result.Failure\n      End If\n\n      ' you could choose any one of these for example\n      Dim jaggedAndFaster = MeshingParameters.Coarse\n      Dim smoothAndSlower = MeshingParameters.Smooth\n      Dim defaultMeshParams = MeshingParameters.Default\n      Dim minimal = MeshingParameters.Minimal\n\n      Dim meshes = Mesh.CreateFromBrep(brep, smoothAndSlower)\n      If meshes Is Nothing OrElse meshes.Length = 0 Then\n        Return Result.Failure\n      End If\n\n      Dim brepmesh = New Mesh()\n      For Each facemesh As Mesh In meshes\n        brepmesh.Append(facemesh)\n      Next\n\n      doc.Objects.AddMesh(brepmesh)\n      doc.Views.Redraw()\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Geometry.MeshingParameters", "static MeshingParameters Coarse"],
      ["Rhino.Geometry.MeshingParameters", "static MeshingParameters Default"],
      ["Rhino.Geometry.MeshingParameters", "static MeshingParameters Minimal"],
      ["Rhino.Geometry.MeshingParameters", "static MeshingParameters Smooth"],
      ["Rhino.Geometry.Mesh", "static Mesh[] CreateFromBrep(Brep brep, MeshingParameters meshingParameters)"],
      ["Rhino.Geometry.Mesh", "void Append(Mesh other)"]
    ]
  },
  {
    "name": "Createsurfaceexample.vb",
    "code": "Imports Rhino\nImports Rhino.Commands\nImports Rhino.Geometry\n\nNamespace examples_vb\n  <System.Runtime.InteropServices.Guid(\"652FCBE5-D8DC-4472-AB94-5A70998A3895\")> _\n  Public Class CreateSurfaceFromPointsAndKnotsCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbCreateSurfaceFromPointsAndKnots\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Const isRational As Boolean = False\n      Const numberOfDimensions As Integer = 3\n      Const uDegree As Integer = 2\n      Const vDegree As Integer = 3\n      Const uControlPointCount As Integer = 3\n      Const vControlPointCount As Integer = 5\n\n      ' The knot vectors do NOT have the 2 superfluous knots\n      ' at the start and end of the knot vector.  If you are\n      ' coming from a system that has the 2 superfluous knots,\n      ' just ignore them when creating NURBS surfaces.\n      Dim uKnots = New Double(uControlPointCount + uDegree - 2) {}\n      Dim vKnots = New Double(vControlPointCount + vDegree - 2) {}\n\n      ' make up a quadratic knot vector with no interior knots\n      uKnots(0) = InlineAssignHelper(uKnots(1), 0.0)\n      uKnots(2) = InlineAssignHelper(uKnots(3), 1.0)\n\n      ' make up a cubic knot vector with one simple interior knot\n      vKnots(0) = InlineAssignHelper(vKnots(1), InlineAssignHelper(vKnots(2), 0.0))\n      vKnots(3) = 1.5\n      vKnots(4) = InlineAssignHelper(vKnots(5), InlineAssignHelper(vKnots(6), 2.0))\n\n      ' Rational control points can be in either homogeneous\n      ' or euclidean form. Non-rational control points do not\n      ' need to specify a weight.  \n      Dim controlPoints = New Point3d(uControlPointCount - 1, vControlPointCount - 1) {}\n\n      For u As Integer = 0 To uControlPointCount - 1\n        For v As Integer = 0 To vControlPointCount - 1\n          controlPoints(u, v) = New Point3d(u, v, u - v)\n        Next\n      Next\n\n      ' creates internal uninitialized arrays for \n      ' control points and knots\n      Dim nurbsSurface__1 = NurbsSurface.Create(numberOfDimensions, isRational, uDegree + 1, vDegree + 1, uControlPointCount, vControlPointCount)\n\n      ' add the knots\n      For u As Integer = 0 To nurbsSurface__1.KnotsU.Count - 1\n        nurbsSurface__1.KnotsU(u) = uKnots(u)\n      Next\n      For v As Integer = 0 To nurbsSurface__1.KnotsV.Count - 1\n        nurbsSurface__1.KnotsV(v) = vKnots(v)\n      Next\n\n      ' add the control points\n      For u As Integer = 0 To nurbsSurface__1.Points.CountU - 1\n        For v As Integer = 0 To nurbsSurface__1.Points.CountV - 1\n          nurbsSurface__1.Points.SetControlPoint(u, v, controlPoints(u, v))\n        Next\n      Next\n\n      If nurbsSurface__1.IsValid Then\n        doc.Objects.AddSurface(nurbsSurface__1)\n        doc.Views.Redraw()\n        Return Result.Success\n      Else\n        Return Result.Failure\n      End If\n    End Function\n    Private Shared Function InlineAssignHelper(Of T)(ByRef target As T, value As T) As T\n      target = value\n      Return value\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Geometry.NurbsSurface", "NurbsSurfaceKnotList KnotsU"],
      ["Rhino.Geometry.NurbsSurface", "NurbsSurfaceKnotList KnotsV"],
      ["Rhino.Geometry.NurbsSurface", "NurbsSurfacePointList Points"],
      ["Rhino.Geometry.NurbsSurface", "static NurbsSurface Create(int dimension, bool isRational, int order0, int order1, int controlPointCount0, int controlPointCount1)"]
    ]
  },
  {
    "name": "Crvdeviation.vb",
    "code": "Imports Rhino\nImports Rhino.Commands\nImports Rhino.DocObjects\nImports Rhino.Geometry\nImports System.Drawing\nImports Rhino.Input\n\nNamespace examples_vb\n  Class DeviationConduit\n    Inherits Rhino.Display.DisplayConduit\n    Private ReadOnly _curveA As Curve\n    Private ReadOnly _curveB As Curve\n    Private ReadOnly _minDistPointA As Point3d\n    Private ReadOnly _minDistPointB As Point3d\n    Private ReadOnly _maxDistPointA As Point3d\n    Private ReadOnly _maxDistPointB As Point3d\n\n    Public Sub New(curveA As Curve, curveB As Curve, minDistPointA As Point3d, minDistPointB As Point3d, maxDistPointA As Point3d, maxDistPointB As Point3d)\n      _curveA = curveA\n      _curveB = curveB\n      _minDistPointA = minDistPointA\n      _minDistPointB = minDistPointB\n      _maxDistPointA = maxDistPointA\n      _maxDistPointB = maxDistPointB\n    End Sub\n\n    Protected Overrides Sub DrawForeground(e As Rhino.Display.DrawEventArgs)\n      e.Display.DrawCurve(_curveA, Color.Red)\n      e.Display.DrawCurve(_curveB, Color.Red)\n\n      e.Display.DrawPoint(_minDistPointA, Color.LawnGreen)\n      e.Display.DrawPoint(_minDistPointB, Color.LawnGreen)\n      e.Display.DrawLine(New Line(_minDistPointA, _minDistPointB), Color.LawnGreen)\n      e.Display.DrawPoint(_maxDistPointA, Color.Red)\n      e.Display.DrawPoint(_maxDistPointB, Color.Red)\n      e.Display.DrawLine(New Line(_maxDistPointA, _maxDistPointB), Color.Red)\n    End Sub\n  End Class\n\n\n  Public Class CurveDeviationCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbCurveDeviation\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      doc.Objects.UnselectAll()\n\n      Dim objRef1 As ObjRef = Nothing\n      Dim rc1 = RhinoGet.GetOneObject(\"first curve\", True, ObjectType.Curve, objRef1)\n      If rc1 <> Result.Success Then\n        Return rc1\n      End If\n      Dim curveA As Curve = Nothing\n      If objRef1 IsNot Nothing Then\n        curveA = objRef1.Curve()\n      End If\n      If curveA Is Nothing Then\n        Return Result.Failure\n      End If\n\n      ' Since you already selected a curve if you don't unselect it\n      ' the next GetOneObject won't stop as it considers that curve \n      ' input, i.e., curveA and curveB will point to the same curve.\n      ' Another option would be to use an instance of Rhino.Input.Custom.GetObject\n      ' instead of Rhino.Input.RhinoGet as GetObject has a DisablePreSelect() method.\n      doc.Objects.UnselectAll()\n\n      Dim objRef2 As ObjRef = Nothing\n      Dim rc2 = RhinoGet.GetOneObject(\"second curve\", True, ObjectType.Curve, objRef2)\n      If rc2 <> Result.Success Then\n        Return rc2\n      End If\n      Dim curveB As Curve = Nothing\n      If objRef2 IsNot Nothing Then\n        curveB = objRef2.Curve()\n      End If\n      If curveB Is Nothing Then\n        Return Result.Failure\n      End If\n\n      Dim tolerance = doc.ModelAbsoluteTolerance\n\n      Dim maxDistance As Double\n      Dim maxDistanceParameterA As Double\n      Dim maxDistanceParameterB As Double\n      Dim minDistance As Double\n      Dim minDistanceParameterA As Double\n      Dim minDistanceParameterB As Double\n\n      Dim conduit As DeviationConduit\n      If Not Curve.GetDistancesBetweenCurves(curveA, curveB, tolerance, maxDistance, maxDistanceParameterA, maxDistanceParameterB, _\n        minDistance, minDistanceParameterA, minDistanceParameterB) Then\n        RhinoApp.WriteLine(\"Unable to find overlap intervals.\")\n        Return Result.Success\n      Else\n        If minDistance <= RhinoMath.ZeroTolerance Then\n          minDistance = 0.0\n        End If\n        Dim maxDistPtA = curveA.PointAt(maxDistanceParameterA)\n        Dim maxDistPtB = curveB.PointAt(maxDistanceParameterB)\n        Dim minDistPtA = curveA.PointAt(minDistanceParameterA)\n        Dim minDistPtB = curveB.PointAt(minDistanceParameterB)\n\n        conduit = New DeviationConduit(curveA, curveB, minDistPtA, minDistPtB, maxDistPtA, maxDistPtB)\n        conduit.Enabled = True\n\n        doc.Views.Redraw()\n        RhinoApp.WriteLine(\"Minimum deviation= {0}   pointA= {1}, pointB= {2}\", minDistance, minDistPtA, minDistPtB)\n        RhinoApp.WriteLine(\"Maximum deviation= {0}   pointA= {1}, pointB= {2}\", maxDistance, maxDistPtA, maxDistPtB)\n      End If\n\n      Dim str As String = \"\"\n      RhinoGet.GetString(\"Press Enter when done\", True, str)\n      conduit.Enabled = False\n\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Geometry.Curve", "static bool GetDistancesBetweenCurves(Curve curveA, Curve curveB, double tolerance, out double maxDistance, out double maxDistanceParameterA, out double maxDistanceParameterB, out double minDistance, out double minDistanceParameterA, out double minDistanceParameterB)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "int UnselectAll()"]
    ]
  },
  {
    "name": "Curveboundingbox.vb",
    "code": "Partial Class Examples\n  Public Shared Function CurveBoundingBox(doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    ' Select a curve object\n    Dim rhObject As Rhino.DocObjects.ObjRef = Nothing\n    Dim rc = Rhino.Input.RhinoGet.GetOneObject(\"Select curve\", False, Rhino.DocObjects.ObjectType.Curve, rhObject)\n    If rc <> Rhino.Commands.Result.Success Then\n      Return rc\n    End If\n\n    ' Validate selection\n    Dim curve = rhObject.Curve()\n    If curve Is Nothing Then\n      Return Rhino.Commands.Result.Failure\n    End If\n\n    ' Get the active view's construction plane\n    Dim view = doc.Views.ActiveView\n    If view Is Nothing Then\n      Return Rhino.Commands.Result.Failure\n    End If\n    Dim plane = view.ActiveViewport.ConstructionPlane()\n\n    ' Compute the tight bounding box of the curve in world coordinates\n    Dim bbox = curve.GetBoundingBox(True)\n    If Not bbox.IsValid Then\n      Return Rhino.Commands.Result.Failure\n    End If\n\n    ' Print the min and max box coordinates in world coordinates\n    Rhino.RhinoApp.WriteLine(\"World min: {0}\", bbox.Min)\n    Rhino.RhinoApp.WriteLine(\"World max: {0}\", bbox.Max)\n\n    ' Compute the tight bounding box of the curve based on the \n    ' active view's construction plane\n    bbox = curve.GetBoundingBox(plane)\n\n    ' Print the min and max box coordinates in cplane coordinates\n    Rhino.RhinoApp.WriteLine(\"CPlane min: {0}\", bbox.Min)\n    Rhino.RhinoApp.WriteLine(\"CPlane max: {0}\", bbox.Max)\n    Return Rhino.Commands.Result.Success\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.Geometry.GeometryBase", "BoundingBox GetBoundingBox(bool accurate)"],
      ["Rhino.Geometry.GeometryBase", "BoundingBox GetBoundingBox(Plane plane)"]
    ]
  },
  {
    "name": "Curvebrepbox.vb",
    "code": "Imports Rhino\nImports Rhino.Geometry\nImports Rhino.Commands\nImports Rhino.Input\n\nNamespace examples_vb\n  Public Class BrepFromCurveBBoxCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbBrepFromCurveBBox\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim objref As DocObjects.ObjRef = Nothing\n      Dim rc = RhinoGet.GetOneObject(\"Select Curve\", False, DocObjects.ObjectType.Curve, objref)\n      If rc <> Result.Success Then\n        Return rc\n      End If\n      Dim curve = objref.Curve()\n\n      Dim view = doc.Views.ActiveView\n      Dim plane = view.ActiveViewport.ConstructionPlane()\n      ' Create a construction plane aligned bounding box\n      Dim bbox = curve.GetBoundingBox(plane)\n\n      If bbox.IsDegenerate(doc.ModelAbsoluteTolerance) > 0 Then\n        RhinoApp.WriteLine(\"the curve's bounding box is degenerate (flat) in at least one direction so a box cannot be created.\")\n        Return Result.Failure\n      End If\n      Dim brepbox = Brep.CreateFromBox(bbox)\n      doc.Objects.AddBrep(brepbox)\n      doc.Views.Redraw()\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Geometry.BoundingBox", "int IsDegenerate(double tolerance)"],
      ["Rhino.Geometry.Brep", "static Brep CreateFromBox(BoundingBox box)"]
    ]
  },
  {
    "name": "Curvereverse.vb",
    "code": "Imports Rhino\nImports Rhino.Commands\nImports Rhino.Input\nImports Rhino.DocObjects\n\nNamespace examples_vb\n  Public Class ReverseCurveCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbReverseCurve\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim objRefs As ObjRef() = Nothing\n      Dim rc = RhinoGet.GetMultipleObjects(\"Select curves to reverse\", True, ObjectType.Curve, objRefs)\n      If rc <> Result.Success Then\n        Return rc\n      End If\n\n      For Each objRef As ObjRef In objRefs\n        Dim curveCopy = objRef.Curve().DuplicateCurve()\n        If curveCopy IsNot Nothing Then\n          curveCopy.Reverse()\n          doc.Objects.Replace(objRef, curveCopy)\n        End If\n      Next\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Geometry.Curve", "Curve DuplicateCurve()"],
      ["Rhino.Geometry.Curve", "bool Reverse()"]
    ]
  },
  {
    "name": "Curvesurfaceintersect.vb",
    "code": "Imports Rhino\nImports Rhino.Geometry\nImports Rhino.Geometry.Intersect\nImports Rhino.Input.Custom\nImports Rhino.DocObjects\nImports Rhino.Commands\n\nNamespace examples_vb\n  Public Class CurveSurfaceIntersectCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbCurveSurfaceIntersect\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim gs = New GetObject()\n      gs.SetCommandPrompt(\"select brep\")\n      gs.GeometryFilter = ObjectType.Brep\n      gs.DisablePreSelect()\n      gs.SubObjectSelect = False\n      gs.Get()\n      If gs.CommandResult() <> Result.Success Then\n        Return gs.CommandResult()\n      End If\n      Dim brep = gs.[Object](0).Brep()\n\n      Dim gc = New GetObject()\n      gc.SetCommandPrompt(\"select curve\")\n      gc.GeometryFilter = ObjectType.Curve\n      gc.DisablePreSelect()\n      gc.SubObjectSelect = False\n      gc.Get()\n      If gc.CommandResult() <> Result.Success Then\n        Return gc.CommandResult()\n      End If\n      Dim curve = gc.Object(0).Curve()\n\n      If brep Is Nothing OrElse curve Is Nothing Then\n        Return Result.Failure\n      End If\n\n      Dim tolerance = doc.ModelAbsoluteTolerance\n\n      Dim intersectionPoints As Point3d() = Nothing\n      Dim overlapCurves As Curve() = Nothing\n      If Not Intersection.CurveBrep(curve, brep, tolerance, overlapCurves, intersectionPoints) Then\n        RhinoApp.WriteLine(\"curve brep intersection failed\")\n        Return Result.Nothing\n      End If\n\n      For Each overlapCurve As Curve In overlapCurves\n        doc.Objects.AddCurve(overlapCurve)\n      Next\n      For Each intersectionPoint As Point3d In intersectionPoints\n        doc.Objects.AddPoint(intersectionPoint)\n      Next\n\n      RhinoApp.WriteLine(\"{0} overlap curves, and {1} intersection points\", overlapCurves.Length, intersectionPoints.Length)\n      doc.Views.Redraw()\n\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Geometry.Intersect.Intersection", "static CurveIntersections CurveSurface(Curve curve, Surface surface, double tolerance, double overlapTolerance)"],
      ["Rhino.Geometry.Intersect.IntersectionEvent", "bool IsOverlap"],
      ["Rhino.DocObjects.Tables.ObjectTable", "int Select(IEnumerable<Guid> objectIds)"]
    ]
  },
  {
    "name": "Customgeometryfilter.vb",
    "code": "Imports Rhino\nImports Rhino.Geometry\nImports Rhino.Commands\nImports Rhino.Input.Custom\nImports Rhino.DocObjects\n\nNamespace examples_vb\n  Public Class CustomGeometryFilterCommand\n    Inherits Command\n    Private _tolerance As Double\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbCustomGeometryFilter\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      _tolerance = doc.ModelAbsoluteTolerance\n\n      ' only use a custom geometry filter if no simpler filter does the job\n\n      ' only curves\n      Dim gc = New GetObject()\n      gc.SetCommandPrompt(\"select curve\")\n      gc.GeometryFilter = ObjectType.Curve\n      gc.DisablePreSelect()\n      gc.SubObjectSelect = False\n      gc.[Get]()\n      If gc.CommandResult() <> Result.Success Then\n        Return gc.CommandResult()\n      End If\n      If gc.[Object](0).Curve() Is Nothing Then\n        Return Result.Failure\n      End If\n      Rhino.RhinoApp.WriteLine(\"curve was selected\")\n\n      ' only closed curves\n      Dim gcc = New GetObject()\n      gcc.SetCommandPrompt(\"select closed curve\")\n      gcc.GeometryFilter = ObjectType.Curve\n      gcc.GeometryAttributeFilter = GeometryAttributeFilter.ClosedCurve\n      gcc.DisablePreSelect()\n      gcc.SubObjectSelect = False\n      gcc.[Get]()\n      If gcc.CommandResult() <> Result.Success Then\n        Return gcc.CommandResult()\n      End If\n      If gcc.[Object](0).Curve() Is Nothing Then\n        Return Result.Failure\n      End If\n      Rhino.RhinoApp.WriteLine(\"closed curve was selected\")\n\n      ' only circles with a radius of 10\n      Dim gcc10 = New GetObject()\n      gcc10.SetCommandPrompt(\"select circle with radius of 10\")\n      gc.GeometryFilter = ObjectType.Curve\n      gcc10.SetCustomGeometryFilter(AddressOf CircleWithRadiusOf10GeometryFilter)\n      ' custom geometry filter\n      gcc10.DisablePreSelect()\n      gcc10.SubObjectSelect = False\n      gcc10.[Get]()\n      If gcc10.CommandResult() <> Result.Success Then\n        Return gcc10.CommandResult()\n      End If\n      If gcc10.[Object](0).Curve() Is Nothing Then\n        Return Result.Failure\n      End If\n      Rhino.RhinoApp.WriteLine(\"circle with radius of 10 was selected\")\n\n      Return Result.Success\n    End Function\n\n    Private Function CircleWithRadiusOf10GeometryFilter(rhObject As Rhino.DocObjects.RhinoObject, geometry As GeometryBase, componentIndex As ComponentIndex) As Boolean\n      Dim isCircleWithRadiusOf10 As Boolean = False\n      Dim circle As Circle\n      If TypeOf geometry Is Curve AndAlso TryCast(geometry, Curve).TryGetCircle(circle) Then\n        isCircleWithRadiusOf10 = circle.Radius <= 10.0 + _tolerance AndAlso circle.Radius >= 10.0 - _tolerance\n      End If\n      Return isCircleWithRadiusOf10\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Geometry.Curve", "bool TryGetCircle(out Circle circle)"],
      ["Rhino.Input.Custom.GetObject", "void SetCustomGeometryFilter(GetObjectGeometryFilter filter)"]
    ]
  },
  {
    "name": "Customundo.vb",
    "code": "Imports System.Runtime.InteropServices\nImports Rhino\n\n<Guid(\"A6924FE1-2B94-4918-94F3-B8935B8DC80C\")> _\nPublic Class ex_customundoCommand\n  Inherits Rhino.Commands.Command\n  Public Overrides ReadOnly Property EnglishName() As String\n    Get\n      Return \"vb_CustomUndoCommand\"\n    End Get\n  End Property\n\n  Private Property MyFavoriteNumber() As Double\n    Get\n      Return m_MyFavoriteNumber\n    End Get\n    Set(value As Double)\n      m_MyFavoriteNumber = value\n    End Set\n  End Property\n  Private m_MyFavoriteNumber As Double\n\n  Protected Overrides Function RunCommand(doc As RhinoDoc, mode As Rhino.Commands.RunMode) As Rhino.Commands.Result\n    ' Rhino automatically sets up an undo record when a command is run,\n    ' but... the undo record is not saved if nothing changes in the\n    ' document (objects added/deleted, layers changed,...)\n    '\n    ' If we have a command that doesn't change things in the document,\n    ' but we want to have our own custom undo called then we need to do\n    ' a little extra work\n\n    Dim d As Double = MyFavoriteNumber\n    If Rhino.Input.RhinoGet.GetNumber(\"Favorite number\", True, d) = Rhino.Commands.Result.Success Then\n      Dim current_value As Double = MyFavoriteNumber\n      doc.AddCustomUndoEvent(\"Favorite Number\", AddressOf OnUndoFavoriteNumber, current_value)\n      MyFavoriteNumber = d\n    End If\n    Return Rhino.Commands.Result.Success\n  End Function\n\n  ' event handler for custom undo\n  Private Sub OnUndoFavoriteNumber(sender As Object, e As Rhino.Commands.CustomUndoEventArgs)\n    ' !!!!!!!!!!\n    ' NEVER change any setting in the Rhino document or application.  Rhino\n    ' handles ALL changes to the application and document and you will break\n    ' the Undo/Redo commands if you make any changes to the application or\n    ' document. This is meant only for your own private plug-in data\n    ' !!!!!!!!!!\n\n    ' This function can be called either by undo or redo\n    ' In order to get redo to work, add another custom undo event with the\n    ' current value.  If you don't want redo to work, just skip adding\n    ' a custom undo event here\n    Dim current_value As Double = MyFavoriteNumber\n    e.Document.AddCustomUndoEvent(\"Favorite Number\", AddressOf OnUndoFavoriteNumber, current_value)\n\n    Dim old_value As Double = CDbl(e.Tag)\n    RhinoApp.WriteLine(\"Going back to your favorite = {0}\", old_value)\n    MyFavoriteNumber = old_value\n  End Sub\nEnd Class\n",
    "members": [
      ["Rhino.RhinoDoc", "bool AddCustomUndoEvent(string description, EventHandler<CustomUndoEventArgs> handler, object tag)"]
    ]
  },
  {
    "name": "Dimstyle.vb",
    "code": "Imports Rhino\nImports Rhino.DocObjects\nImports Rhino.Commands\nImports Rhino.Geometry\n\nNamespace examples_vb\n  Public Class ChangeDimensionStyleCommand\n    Inherits Rhino.Commands.Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbChangeDimensionStyle\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      For Each rhino_object As RhinoObject In doc.Objects.GetObjectList(ObjectType.Annotation)\n        Dim annotation_object = TryCast(rhino_object, AnnotationObjectBase)\n        If annotation_object Is Nothing Then\n          Continue For\n        End If\n\n        Dim annotation = TryCast(annotation_object.Geometry, AnnotationBase)\n        If annotation Is Nothing Then\n          Continue For\n        End If\n\n        If annotation.Index = doc.DimStyles.CurrentDimensionStyleIndex Then\n          Continue For\n        End If\n\n        annotation.Index = doc.DimStyles.CurrentDimensionStyleIndex\n        annotation_object.CommitChanges()\n      Next\n\n      doc.Views.Redraw()\n\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.RhinoDoc", "DimStyleTable DimStyles"],
      ["Rhino.DocObjects.Tables.DimStyleTable", "int CurrentIndex"],
      ["Rhino.DocObjects.Tables.ObjectTable", "IEnumerable<RhinoObject> GetObjectList(Type typeFilter)"]
    ]
  },
  {
    "name": "Displayorder.vb",
    "code": "Imports System.Collections.Generic\nImports System.Drawing\nImports System.Linq\nImports Rhino\nImports Rhino.Commands\nImports Rhino.Display\nImports Rhino.Geometry\nImports Rhino.Input\nImports Rhino.DocObjects\n\nNamespace examples_vb\n  Public Class DisplayOrderCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbDisplayOrder\"\n      End Get\n    End Property\n\n    Private m_line_objects As New List(Of RhinoObject)()\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      ' make lines thick so draw order can be easily seen\n      Dim dm = DisplayModeDescription.GetDisplayModes().[Single](Function(x) x.EnglishName = \"Wireframe\")\n      Dim original_thikcness = dm.DisplayAttributes.CurveThickness\n      dm.DisplayAttributes.CurveThickness = 10\n      DisplayModeDescription.UpdateDisplayMode(dm)\n\n      AddLine(Point3d.Origin, New Point3d(10, 10, 0), Color.Red, doc)\n      AddLine(New Point3d(10, 0, 0), New Point3d(0, 10, 0), Color.Blue, doc)\n      AddLine(New Point3d(8, 0, 0), New Point3d(8, 10, 0), Color.Green, doc)\n      AddLine(New Point3d(0, 3, 0), New Point3d(10, 3, 0), Color.Yellow, doc)\n      doc.Views.Redraw()\n      Pause(\"draw order: 1st line drawn in front, last line drawn in the back.  Any key to continue ...\")\n\n      'all objects have a DisplayOrder of 0 by default so changing it to 1 moves it to the front.  Here we move the 2nd line (blue) to the front\n      m_line_objects(1).Attributes.DisplayOrder = 1\n      m_line_objects(1).CommitChanges()\n      doc.Views.Redraw()\n      Pause(\"Second (blue) line now in front.  Any key to continue ...\")\n\n      For i As Integer = 0 To m_line_objects.Count - 1\n        m_line_objects(i).Attributes.DisplayOrder = i\n        m_line_objects(i).CommitChanges()\n      Next\n      doc.Views.Redraw()\n      Pause(\"Reverse order of original lines, i.e., Yellow 1st and Red last.  Any key to continue ...\")\n\n      ' restore original line thickness\n      dm.DisplayAttributes.CurveThickness = original_thikcness\n      DisplayModeDescription.UpdateDisplayMode(dm)\n\n      doc.Views.Redraw()\n      Return Result.Success\n    End Function\n\n    Private Sub Pause(msg As String)\n      Dim obj_ref As ObjRef = Nothing\n      Dim rc = RhinoGet.GetOneObject(msg, True, ObjectType.AnyObject, obj_ref)\n    End Sub\n\n    Private Sub AddLine(from As Point3d, [to] As Point3d, color As Color, doc As RhinoDoc)\n      Dim guid = doc.Objects.AddLine(from, [to])\n      Dim obj = doc.Objects.Find(guid)\n      m_line_objects.Add(obj)\n      obj.Attributes.ObjectColor = color\n      obj.Attributes.ColorSource = ObjectColorSource.ColorFromObject\n      obj.CommitChanges()\n    End Sub\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.DocObjects.ObjectAttributes", "int DisplayOrder"]
    ]
  },
  {
    "name": "Displayprecision.vb",
    "code": "Imports Rhino\nImports Rhino.Input.Custom\nImports Rhino.Commands\n\nNamespace examples_vb\n  Public Class DisplayPrecisionCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbDisplayPrecision\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim gi = New GetInteger()\n      gi.SetCommandPrompt(\"New display precision\")\n      gi.SetDefaultInteger(doc.ModelDistanceDisplayPrecision)\n      gi.SetLowerLimit(0, False)\n      gi.SetUpperLimit(7, False)\n      gi.[Get]()\n      If gi.CommandResult() <> Result.Success Then\n        Return gi.CommandResult()\n      End If\n      Dim distance_display_precision = gi.Number()\n\n      If distance_display_precision <> doc.ModelDistanceDisplayPrecision Then\n        doc.ModelDistanceDisplayPrecision = distance_display_precision\n      End If\n\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.RhinoDoc", "int ModelDistanceDisplayPrecision"]
    ]
  },
  {
    "name": "Dividebylength.vb",
    "code": "Imports Rhino.DocObjects\n\nPartial Class Examples\n  Public Shared Function DivideByLengthPoints(ByVal doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    Const filter As ObjectType = Rhino.DocObjects.ObjectType.Curve\n    Dim objref As Rhino.DocObjects.ObjRef = Nothing\n    Dim rc As Rhino.Commands.Result = Rhino.Input.RhinoGet.GetOneObject(\"Select curve to divide\", False, filter, objref)\n    If rc <> Rhino.Commands.Result.Success OrElse objref Is Nothing Then\n      Return rc\n    End If\n\n    Dim crv As Rhino.Geometry.Curve = objref.Curve()\n    If crv Is Nothing OrElse crv.IsShort(Rhino.RhinoMath.ZeroTolerance) Then\n      Return Rhino.Commands.Result.Failure\n    End If\n\n    Dim crv_length As Double = crv.GetLength()\n    Dim s As String = String.Format(\"Curve length is {0:f3}. Segment length\", crv_length)\n\n    Dim seg_length As Double = crv_length / 2.0\n    rc = Rhino.Input.RhinoGet.GetNumber(s, False, seg_length, 0, crv_length)\n    If rc <> Rhino.Commands.Result.Success Then\n      Return rc\n    End If\n\n    Dim points As Rhino.Geometry.Point3d() = Nothing\n    crv.DivideByLength(seg_length, True, points)\n    If points Is Nothing Then\n      Return Rhino.Commands.Result.Failure\n    End If\n\n    For Each point As Rhino.Geometry.Point3d In points\n      doc.Objects.AddPoint(point)\n    Next\n\n    doc.Views.Redraw()\n    Return Rhino.Commands.Result.Success\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.Geometry.Curve", "static Curve[] JoinCurves(IEnumerable<Curve> inputCurves, double joinTolerance)"],
      ["Rhino.Geometry.Curve", "double[] DivideByLength(double segmentLength, bool includeEnds)"],
      ["Rhino.Geometry.Curve", "double[] DivideByLength(double segmentLength, bool includeEnds, bool reverse)"],
      ["Rhino.Geometry.Curve", "double[] DivideByLength(double segmentLength, bool includeEnds, bool reverse, out Point3d[] points)"],
      ["Rhino.Geometry.Curve", "double[] DivideByLength(double segmentLength, bool includeEnds, out Point3d[] points)"],
      ["Rhino.Geometry.Curve", "bool IsShort(double tolerance)"],
      ["Rhino.Input.RhinoGet", "static Result GetNumber(string prompt, bool acceptNothing, ref double outputNumber)"],
      ["Rhino.Input.RhinoGet", "static Result GetNumber(string prompt, bool acceptNothing, ref double outputNumber, double lowerLimit, double upperLimit)"],
      ["Rhino.Input.RhinoGet", "static Result GetOneObject(string prompt, bool acceptNothing, ObjectType filter, out ObjRef rhObject)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddPoint(Point3d point)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddPoint(Point3f point)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "bool Select(Guid objectId)"]
    ]
  },
  {
    "name": "Drawstring.vb",
    "code": "Imports Rhino\nImports Rhino.DocObjects\nImports Rhino.Geometry\nImports Rhino.Commands\nImports Rhino.Input.Custom\n\nNamespace examples_vb\n  Public Class DrawStringCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbDrawString\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim gp = New GetDrawStringPoint()\n      gp.SetCommandPrompt(\"Point\")\n      gp.[Get]()\n      Return gp.CommandResult()\n    End Function\n  End Class\n\n  Public Class GetDrawStringPoint\n    Inherits GetPoint\n    Protected Overrides Sub OnDynamicDraw(e As GetPointDrawEventArgs)\n      MyBase.OnDynamicDraw(e)\n      Dim xform = e.Viewport.GetTransform(CoordinateSystem.World, CoordinateSystem.Screen)\n      Dim current_point = e.CurrentPoint\n      current_point.Transform(xform)\n      Dim screen_point = New Point2d(current_point.X, current_point.Y)\n      Dim msg = String.Format(\"screen {0:F}, {1:F}\", current_point.X, current_point.Y)\n      e.Display.Draw2dText(msg, System.Drawing.Color.Blue, screen_point, False)\n    End Sub\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Display.DisplayPipeline", "void Draw2dText(string text, Color color, Point2d screenCoordinate, bool middleJustified)"]
    ]
  },
  {
    "name": "Dupborder.vb",
    "code": "Imports Rhino.DocObjects\n\nPartial Class Examples\n  Public Shared Function DupBorder(ByVal doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    Const filter As ObjectType = Rhino.DocObjects.ObjectType.Surface Or Rhino.DocObjects.ObjectType.PolysrfFilter\n    Dim objref As Rhino.DocObjects.ObjRef = Nothing\n    Dim rc As Rhino.Commands.Result = Rhino.Input.RhinoGet.GetOneObject(\"Select surface or polysurface\", False, filter, objref)\n    If rc <> Rhino.Commands.Result.Success OrElse objref Is Nothing Then\n      Return rc\n    End If\n\n    Dim rhobj As Rhino.DocObjects.RhinoObject = objref.[Object]()\n    Dim brep As Rhino.Geometry.Brep = objref.Brep()\n    If rhobj Is Nothing OrElse brep Is Nothing Then\n      Return Rhino.Commands.Result.Failure\n    End If\n\n    rhobj.[Select](False)\n    Dim curves As Rhino.Geometry.Curve() = brep.DuplicateEdgeCurves(True)\n    Dim tol As Double = doc.ModelAbsoluteTolerance * 2.1\n    curves = Rhino.Geometry.Curve.JoinCurves(curves, tol)\n    For i As Integer = 0 To curves.Length - 1\n      Dim id As Guid = doc.Objects.AddCurve(curves(i))\n      doc.Objects.[Select](id)\n    Next\n    doc.Views.Redraw()\n    Return Rhino.Commands.Result.Success\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.Geometry.Brep", "Curve[] DuplicateEdgeCurves(bool nakedOnly)"]
    ]
  },
  {
    "name": "Duplicateobject.vb",
    "code": "Imports Rhino\nImports Rhino.Commands\nImports Rhino.DocObjects\nImports Rhino.Input\n\nNamespace examples_vb\n  Public Class DuplicateObjectCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbDuplicateObject\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim obj_ref As ObjRef = Nothing\n\n      Dim rc = RhinoGet.GetOneObject(\"Select object to duplicate\", False, ObjectType.AnyObject, obj_ref)\n      If rc <> Result.Success Then\n        Return rc\n      End If\n      Dim rhino_object = obj_ref.[Object]()\n\n      Dim geometry_base = rhino_object.DuplicateGeometry()\n      If geometry_base IsNot Nothing Then\n        If doc.Objects.Add(geometry_base) <> Guid.Empty Then\n          doc.Views.Redraw()\n        End If\n      End If\n\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.DocObjects.RhinoObject", "GeometryBase DuplicateGeometry()"]
    ]
  },
  {
    "name": "Dupmeshboundary.vb",
    "code": "Imports Rhino\nImports Rhino.Commands\nImports Rhino.Input.Custom\nImports Rhino.Geometry\nImports Rhino.DocObjects\n\nNamespace examples_vb\n  Public Class DupMeshBoundaryCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbDupMeshBoundary\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim gm = New GetObject()\n      gm.SetCommandPrompt(\"Select open mesh\")\n      gm.GeometryFilter = ObjectType.Mesh\n      gm.GeometryAttributeFilter = GeometryAttributeFilter.OpenMesh\n      gm.[Get]()\n      If gm.CommandResult() <> Result.Success Then\n        Return gm.CommandResult()\n      End If\n      Dim mesh = gm.[Object](0).Mesh()\n      If mesh Is Nothing Then\n        Return Result.Failure\n      End If\n\n      Dim polylines = mesh.GetNakedEdges()\n      For Each polyline As Polyline In polylines\n        doc.Objects.AddPolyline(polyline)\n      Next\n\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Geometry.Mesh", "Polyline[] GetNakedEdges()"]
    ]
  },
  {
    "name": "Edgesrf.vb",
    "code": "Imports System.Linq\nImports Rhino\nImports Rhino.Commands\nImports Rhino.DocObjects\nImports Rhino.Geometry\nImports Rhino.Input.Custom\n\nNamespace examples_vb\n  Public Class EdgeSrfCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbEdgeSrf\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim go = New GetObject()\n      go.SetCommandPrompt(\"Select 2, 3, or 4 open curves\")\n      go.GeometryFilter = ObjectType.Curve\n      go.GeometryAttributeFilter = GeometryAttributeFilter.OpenCurve\n      go.GetMultiple(2, 4)\n      If go.CommandResult() <> Result.Success Then\n        Return go.CommandResult()\n      End If\n\n      Dim curves = go.Objects().[Select](Function(o) o.Curve())\n\n      Dim brep__1 = Brep.CreateEdgeSurface(curves)\n\n      If brep__1 IsNot Nothing Then\n        doc.Objects.AddBrep(brep__1)\n        doc.Views.Redraw()\n      End If\n\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Geometry.Brep", "static Brep CreateEdgeSurface(IEnumerable<Curve> curves)"]
    ]
  },
  {
    "name": "Elevation.vb",
    "code": "Imports System.Collections.Generic\nImports System.Linq\nImports Rhino\nImports Rhino.Commands\nImports Rhino.Geometry\nImports Rhino.Geometry.Intersect\nImports Rhino.Input\nImports Rhino.Input.Custom\nImports Rhino.DocObjects\n\nNamespace examples_vb\n  Public Class FurthestZOnSurfaceCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbFurthestZOnSurfaceGivenXY\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      '#Region \"user input\"\n      ' select a surface\n      Dim gs = New GetObject()\n      gs.SetCommandPrompt(\"select surface\")\n      gs.GeometryFilter = ObjectType.Surface\n      gs.DisablePreSelect()\n      gs.SubObjectSelect = False\n      gs.[Get]()\n      If gs.CommandResult() <> Result.Success Then\n        Return gs.CommandResult()\n      End If\n      ' get the brep\n      Dim brep = gs.[Object](0).Brep()\n      If brep Is Nothing Then\n        Return Result.Failure\n      End If\n\n      ' get X and Y\n      Dim x As Double = 0.0, y As Double = 0.0\n      Dim rc = RhinoGet.GetNumber(\"value of X coordinate\", True, x)\n      If rc <> Result.Success Then\n        Return rc\n      End If\n      rc = RhinoGet.GetNumber(\"value of Y coordinate\", True, y)\n      If rc <> Result.Success Then\n        Return rc\n      End If\n      '#End Region\n\n      ' an earlier version of this sample used a curve-brep intersection to find Z\n      'var maxZ = MaxZIntersectionMethod(brep, x, y, doc.ModelAbsoluteTolerance);\n\n      ' projecting points is another way to find Z\n      Dim maxZ = MaxZProjectionMethod(brep, x, y, doc.ModelAbsoluteTolerance)\n\n      If maxZ IsNot Nothing Then\n        RhinoApp.WriteLine(\"Maximum surface Z coordinate at X={0}, Y={1} is {2}\", x, y, maxZ)\n        doc.Objects.AddPoint(New Point3d(x, y, maxZ.Value))\n        doc.Views.Redraw()\n      Else\n        RhinoApp.WriteLine(\"no maximum surface Z coordinate at X={0}, Y={1} found.\", x, y)\n      End If\n\n      Return Result.Success\n    End Function\n\n    Private Function MaxZProjectionMethod(brep As Brep, x As Double, y As Double, tolerance As Double) As System.Nullable(Of Double)\n      Dim maxZ As System.Nullable(Of Double) = Nothing\n      Dim breps = New List(Of Brep)() From { _\n        brep _\n      }\n      Dim points = New List(Of Point3d)() From { _\n        New Point3d(x, y, 0) _\n      }\n      ' grab all the points projected in Z dir.  Aggregate finds furthest Z from XY plane\n      Try\n        maxZ = (From pt In Intersection.ProjectPointsToBreps(breps, points, New Vector3d(0, 0, 1), tolerance) Select pt.Z).Aggregate(Function(z1, z2) If(Math.Abs(z1) > Math.Abs(z2), z1, z2))\n        'Sequence contains no elements\n      Catch generatedExceptionName As InvalidOperationException\n      End Try\n      Return maxZ\n    End Function\n\n    Private Function MaxZIntersectionMethod(brep As Brep, x As Double, y As Double, tolerance As Double) As System.Nullable(Of Double)\n      Dim maxZ As System.Nullable(Of Double) = Nothing\n\n      Dim bbox = brep.GetBoundingBox(True)\n      ' furthest Z from XY plane.  Max() doesn't work because of possible negative Z values\n      Dim maxDistFromXY = (From corner In bbox.GetCorners() Select corner.Z).Aggregate(Function(z1, z2) If(Math.Abs(z1) > Math.Abs(z2), z1, z2))\n      ' multiply distance by 2 to make sure line intersects completely\n      Dim lineCurve = New LineCurve(New Point3d(x, y, 0), New Point3d(x, y, maxDistFromXY * 2))\n\n      Dim overlapCurves As Curve() = Nothing\n      Dim interPoints As Point3d() = Nothing\n      If Intersection.CurveBrep(lineCurve, brep, tolerance, overlapCurves, interPoints) Then\n        If overlapCurves.Length > 0 OrElse interPoints.Length > 0 Then\n          ' grab all the points resulting frem the intersection. \n          '    1st set: points from overlapping curves, \n          '    2nd set: points when there was no overlap\n          '    .Aggregate: furthest Z from XY plane.\n          Dim overlapCrvsZs As IEnumerable(Of Double) = (From c In overlapCurves Select DirectCast(IIf(Math.Abs(c.PointAtEnd.Z) > Math.Abs(c.PointAtStart.Z), c.PointAtEnd.Z, c.PointAtStart.Z), Double))\n          Dim intersectPtsZs As IEnumerable(Of Double) = (From p In interPoints Select p.Z)\n          Dim allZs = overlapCrvsZs.Union(intersectPtsZs).ToArray()\n          maxZ = allZs.Aggregate(Function(runZ, nextZ) DirectCast(IIf(Math.Abs(runZ) > Math.Abs(nextZ), runZ, nextZ), Double))\n        End If\n      End If\n      Return maxZ\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Geometry.BoundingBox", "Point3d[] GetCorners()"],
      ["Rhino.Geometry.Intersect.Intersection", "static bool CurveBrep(Curve curve, Brep brep, double tolerance, out Curve[] overlapCurves, out Point3d[] intersectionPoints)"]
    ]
  },
  {
    "name": "Evnormal.vb",
    "code": "Imports Rhino\nImports Rhino.Input.Custom\nImports Rhino.DocObjects\nImports Rhino.Commands\n\nNamespace examples_vb\n  Public Class NormalDirectionOfBrepFaceCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbDetermineNormDirectionOfBrepFace\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      ' select a surface\n      Dim gs = New GetObject()\n      gs.SetCommandPrompt(\"select surface\")\n      gs.GeometryFilter = ObjectType.Surface\n      gs.DisablePreSelect()\n      gs.SubObjectSelect = False\n      gs.[Get]()\n      If gs.CommandResult() <> Result.Success Then\n        Return gs.CommandResult()\n      End If\n      ' get the selected face\n      Dim face = gs.[Object](0).Face()\n      If face Is Nothing Then\n        Return Result.Failure\n      End If\n\n      ' pick a point on the surface.  Constain\n      ' picking to the face.\n      Dim gp = New GetPoint()\n      gp.SetCommandPrompt(\"select point on surface\")\n      gp.Constrain(face, False)\n      gp.[Get]()\n      If gp.CommandResult() <> Result.Success Then\n        Return gp.CommandResult()\n      End If\n\n      ' get the parameters of the point on the\n      ' surface that is clesest to gp.Point()\n      Dim u As Double, v As Double\n      If face.ClosestPoint(gp.Point(), u, v) Then\n        Dim direction = face.NormalAt(u, v)\n        If face.OrientationIsReversed Then\n          direction.Reverse()\n        End If\n        RhinoApp.WriteLine(String.Format(\"Surface normal at uv({0:f},{1:f}) = ({2:f},{3:f},{4:f})\", u, v, direction.X, direction.Y, direction.Z))\n      End If\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Geometry.BrepFace", "bool OrientationIsReversed"],
      ["Rhino.Geometry.Surface", "Vector3d NormalAt(double u, double v)"]
    ]
  },
  {
    "name": "Explodehatch.vb",
    "code": "Imports Rhino.DocObjects\n\nPartial Class Examples\n  Public Shared Function ExplodeHatch(ByVal doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n\n    Const filter As ObjectType = Rhino.DocObjects.ObjectType.Hatch\n    Dim objref As Rhino.DocObjects.ObjRef = Nothing\n    Dim rc As Rhino.Commands.Result = Rhino.Input.RhinoGet.GetOneObject(\"Select hatch to explode\", False, filter, objref)\n    If rc <> Rhino.Commands.Result.Success OrElse objref Is Nothing Then\n      Return rc\n    End If\n\n    Dim hatch As Rhino.Geometry.Hatch = DirectCast(objref.Geometry(), Rhino.Geometry.Hatch)\n    If hatch Is Nothing Then\n      Return Rhino.Commands.Result.Failure\n    End If\n\n    Dim hatch_geom As Rhino.Geometry.GeometryBase() = hatch.Explode()\n    If hatch_geom IsNot Nothing Then\n      For i As Integer = 0 To hatch_geom.Length - 1\n        Dim geom As Rhino.Geometry.GeometryBase = hatch_geom(i)\n        If geom IsNot Nothing Then\n          Select Case geom.ObjectType\n            Case Rhino.DocObjects.ObjectType.Point\n              If True Then\n                Dim point As Rhino.Geometry.Point = TryCast(geom, Rhino.Geometry.Point)\n                If point IsNot Nothing Then\n                  doc.Objects.AddPoint(point.Location)\n                End If\n              End If\n              Exit Select\n            Case Rhino.DocObjects.ObjectType.Curve\n              If True Then\n                Dim curve As Rhino.Geometry.Curve = TryCast(geom, Rhino.Geometry.Curve)\n                If curve IsNot Nothing Then\n                  doc.Objects.AddCurve(curve)\n                End If\n              End If\n              Exit Select\n            Case Rhino.DocObjects.ObjectType.Brep\n              If True Then\n                Dim brep As Rhino.Geometry.Brep = TryCast(geom, Rhino.Geometry.Brep)\n                If brep IsNot Nothing Then\n                  doc.Objects.AddBrep(brep)\n                End If\n              End If\n              Exit Select\n          End Select\n        End If\n      Next\n    End If\n\n    Return Rhino.Commands.Result.Success\n  End Function\n\nEnd Class",
    "members": [
      ["Rhino.Geometry.Hatch", "GeometryBase[] Explode()"]
    ]
  },
  {
    "name": "Extendcurve.vb",
    "code": "Imports System.Linq\nImports Rhino\nImports Rhino.Geometry\nImports Rhino.DocObjects\nImports Rhino.Commands\nImports Rhino.Input\nImports Rhino.Input.Custom\n\nNamespace examples_vb\n  Public Class ExtendCurveCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbExtendCurve\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim boundary_obj_refs As ObjRef() = Nothing\n      Dim rc = RhinoGet.GetMultipleObjects(\"Select boundary objects\", False, ObjectType.AnyObject, boundary_obj_refs)\n      If rc <> Result.Success Then\n        Return rc\n      End If\n      If boundary_obj_refs Is Nothing OrElse boundary_obj_refs.Length = 0 Then\n        Return Result.[Nothing]\n      End If\n\n      Dim gc = New GetObject()\n      gc.SetCommandPrompt(\"Select curve to extend\")\n      gc.GeometryFilter = ObjectType.Curve\n      gc.GeometryAttributeFilter = GeometryAttributeFilter.OpenCurve\n      gc.[Get]()\n      If gc.CommandResult() <> Result.Success Then\n        Return gc.CommandResult()\n      End If\n      Dim curve_obj_ref = gc.[Object](0)\n\n      Dim curve = curve_obj_ref.Curve()\n      If curve Is Nothing Then\n        Return Result.Failure\n      End If\n      Dim t As Double\n      If Not curve.ClosestPoint(curve_obj_ref.SelectionPoint(), t) Then\n        Return Result.Failure\n      End If\n      Dim curve_end = If(t <= curve.Domain.Mid, CurveEnd.Start, CurveEnd.[End])\n\n      Dim geometry = boundary_obj_refs.[Select](Function(obj) obj.Geometry())\n      Dim extended_curve = curve.Extend(curve_end, CurveExtensionStyle.Line, geometry)\n      If extended_curve IsNot Nothing AndAlso extended_curve.IsValid Then\n        If Not doc.Objects.Replace(curve_obj_ref.ObjectId, extended_curve) Then\n          Return Result.Failure\n        End If\n        doc.Views.Redraw()\n      Else\n        RhinoApp.WriteLine(\"No boundary object was intersected so curve not extended\")\n        Return Result.[Nothing]\n      End If\n\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Geometry.Curve", "Curve Extend(CurveEnd side, CurveExtensionStyle style, IEnumerable<GeometryBase> geometry)"],
      ["Rhino.Geometry.Interval", "double Mid"]
    ]
  },
  {
    "name": "Extractisocurve.vb",
    "code": "Imports Rhino\nImports Rhino.DocObjects\nImports Rhino.Commands\nImports Rhino.Input\nImports Rhino.Input.Custom\nImports Rhino.Geometry\n\nNamespace examples_vb\n  Public Class ExtractIsocurveCommand\n    Inherits Rhino.Commands.Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbExtractIsocurve\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim obj_ref As ObjRef = Nothing\n      Dim rc = RhinoGet.GetOneObject(\"Select surface\", False, ObjectType.Surface, obj_ref)\n      If rc <> Result.Success OrElse obj_ref Is Nothing Then\n        Return rc\n      End If\n      Dim surface = obj_ref.Surface()\n\n      Dim gp = New GetPoint()\n      gp.SetCommandPrompt(\"Point on surface\")\n      gp.Constrain(surface, False)\n      'gp.GeometryFilter = ObjectType.Point;\n      Dim option_toggle = New OptionToggle(False, \"U\", \"V\")\n      gp.AddOptionToggle(\"Direction\", option_toggle)\n      Dim point As Point3d = Point3d.Unset\n      While True\n        Dim grc = gp.[Get]()\n        If grc = GetResult.[Option] Then\n          Continue While\n        ElseIf grc = GetResult.Point Then\n          point = gp.Point()\n          Exit While\n        Else\n          Return Result.[Nothing]\n        End If\n      End While\n      If point = Point3d.Unset Then\n        Return Result.[Nothing]\n      End If\n\n      Dim direction As Integer = If(option_toggle.CurrentValue, 1, 0)\n      ' V : U\n      Dim u_parameter As Double, v_parameter As Double\n      If Not surface.ClosestPoint(point, u_parameter, v_parameter) Then\n        Return Result.Failure\n      End If\n\n      Dim iso_curve = surface.IsoCurve(direction, If(direction = 1, u_parameter, v_parameter))\n      If iso_curve Is Nothing Then\n        Return Result.Failure\n      End If\n\n      doc.Objects.AddCurve(iso_curve)\n      doc.Views.Redraw()\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Geometry.Surface", "Curve IsoCurve(int direction, double constantParameter)"]
    ]
  },
  {
    "name": "Extractthumbnail.vb",
    "code": "Imports Rhino\nImports Rhino.Commands\nImports Rhino.Input\nImports Rhino.Input.Custom\nImports System.Windows\nImports System.Windows.Controls\n\nNamespace examples_vb\n  Public Class ExtractThumbnailCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbExtractThumbnail\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim gf = RhinoGet.GetFileName(GetFileNameMode.OpenImage, \"*.3dm\", \"select file\", Nothing)\n      If gf = String.Empty OrElse Not System.IO.File.Exists(gf) Then\n        Return Result.Cancel\n      End If\n\n      Dim bitmap = Rhino.FileIO.File3dm.ReadPreviewImage(gf)\n      ' convert System.Drawing.Bitmap to BitmapSource\n      Dim imageSource = System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap(bitmap.GetHbitmap(), IntPtr.Zero, Int32Rect.Empty, System.Windows.Media.Imaging.BitmapSizeOptions.FromEmptyOptions())\n\n      ' show in WPF window\n      Dim window = New Window()\n      Dim image = New Image()\n      image.Source = imageSource\n\n      window.Content = image\n      window.Show()\n\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.FileIO.File3dm", "static System.Drawing.Bitmap ReadPreviewImage(string path)"],
      ["Rhino.Input.RhinoGet", "static string GetFileName(GetFileNameMode mode, string defaultName, string title, object parent)"],
      ["Rhino.Input.RhinoGet", "static string GetFileName(GetFileNameMode mode, string defaultName, string title, object parent, BitmapFileTypes fileTypes)"]
    ]
  },
  {
    "name": "Filletcurves.vb",
    "code": "Imports Rhino\nImports Rhino.Commands\nImports Rhino.Geometry\nImports Rhino.Input\nImports Rhino.DocObjects\nImports Rhino.Input.Custom\n\nNamespace examples_vb\n  Public Class FilletCurvesCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbFilletCurves\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim gc1 = New GetObject()\n      gc1.DisablePreSelect()\n      gc1.SetCommandPrompt(\"Select first curve to fillet (close to the end you want to fillet)\")\n      gc1.GeometryFilter = ObjectType.Curve\n      gc1.GeometryAttributeFilter = GeometryAttributeFilter.OpenCurve\n      gc1.[Get]()\n      If gc1.CommandResult() <> Result.Success Then\n        Return gc1.CommandResult()\n      End If\n      Dim curve1_obj_ref = gc1.[Object](0)\n      Dim curve1 = curve1_obj_ref.Curve()\n      If curve1 Is Nothing Then\n        Return Result.Failure\n      End If\n      Dim curve1_point_near_end = curve1_obj_ref.SelectionPoint()\n      If curve1_point_near_end = Point3d.Unset Then\n        Return Result.Failure\n      End If\n\n      Dim gc2 = New GetObject()\n      gc2.DisablePreSelect()\n      gc2.SetCommandPrompt(\"Select second curve to fillet (close to the end you want to fillet)\")\n      gc2.GeometryFilter = ObjectType.Curve\n      gc2.GeometryAttributeFilter = GeometryAttributeFilter.OpenCurve\n      gc2.[Get]()\n      If gc2.CommandResult() <> Result.Success Then\n        Return gc2.CommandResult()\n      End If\n      Dim curve2_obj_ref = gc2.[Object](0)\n      Dim curve2 = curve2_obj_ref.Curve()\n      If curve2 Is Nothing Then\n        Return Result.Failure\n      End If\n      Dim curve2_point_near_end = curve2_obj_ref.SelectionPoint()\n      If curve2_point_near_end = Point3d.Unset Then\n        Return Result.Failure\n      End If\n\n      Dim radius As Double = 0\n      Dim rc = RhinoGet.GetNumber(\"fillet radius\", False, radius)\n      If rc <> Result.Success Then\n        Return rc\n      End If\n\n      Dim fillet_curve = Curve.CreateFilletCurves(curve1, curve1_point_near_end, curve2, curve2_point_near_end, radius, True, _\n        True, True, doc.ModelAbsoluteTolerance, doc.ModelAngleToleranceDegrees)\n      If fillet_curve Is Nothing OrElse fillet_curve.Length <> 1 Then\n        Return Result.Failure\n      End If\n\n      doc.Objects.AddCurve(fillet_curve(0))\n      doc.Views.Redraw()\n      Return rc\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Geometry.Curve", "static Curve[] CreateFilletCurves(Curve curve0, Point3d point0, Curve curve1, Point3d point1, double radius, bool join, bool trim, bool arcExtension, double tolerance, double angleTolerance)"]
    ]
  },
  {
    "name": "Findobjectsbyname.vb",
    "code": "Partial Class Examples\n  Public Shared Function FindObjectsByName(ByVal doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    Const name As String = \"abc\"\n    Dim settings As New Rhino.DocObjects.ObjectEnumeratorSettings()\n    settings.NameFilter = name\n    Dim ids As New System.Collections.Generic.List(Of Guid)()\n    For Each rhObj As Rhino.DocObjects.RhinoObject In doc.Objects.GetObjectList(settings)\n      ids.Add(rhObj.Id)\n    Next\n\n    If ids.Count = 0 Then\n      Rhino.RhinoApp.WriteLine(\"No objects with the name \" & name)\n      Return Rhino.Commands.Result.Failure\n    Else\n      Rhino.RhinoApp.WriteLine(\"Found {0} objects\", ids.Count)\n      For i As Integer = 0 To ids.Count - 1\n        Rhino.RhinoApp.WriteLine(\"  {0}\", ids(i))\n      Next\n    End If\n\n    Return Rhino.Commands.Result.Success\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.DocObjects.ObjectEnumeratorSettings", "ObjectEnumeratorSettings()"],
      ["Rhino.DocObjects.ObjectEnumeratorSettings", "string NameFilter"]
    ]
  },
  {
    "name": "Getpointdynamicdraw.vb",
    "code": "Imports Rhino\nImports Rhino.Geometry\nImports Rhino.Commands\nImports Rhino.Input.Custom\n\nNamespace examples_vb\n  Public Class GetPointDynamicDrawCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbGetPointDynamicDraw\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim gp = New GetPoint()\n      gp.SetCommandPrompt(\"Center point\")\n      gp.[Get]()\n      If gp.CommandResult() <> Result.Success Then\n        Return gp.CommandResult()\n      End If\n      Dim center_point = gp.Point()\n      If center_point = Point3d.Unset Then\n        Return Result.Failure\n      End If\n\n      Dim gcp = New GetCircleRadiusPoint(center_point)\n      gcp.SetCommandPrompt(\"Radius\")\n      gcp.ConstrainToConstructionPlane(False)\n      gcp.SetBasePoint(center_point, True)\n      gcp.DrawLineFromPoint(center_point, True)\n      gcp.[Get]()\n      If gcp.CommandResult() <> Result.Success Then\n        Return gcp.CommandResult()\n      End If\n\n      Dim radius = center_point.DistanceTo(gcp.Point())\n      Dim cplane = doc.Views.ActiveView.ActiveViewport.ConstructionPlane()\n      doc.Objects.AddCircle(New Circle(cplane, center_point, radius))\n      doc.Views.Redraw()\n      Return Result.Success\n    End Function\n  End Class\n\n  Public Class GetCircleRadiusPoint\n    Inherits GetPoint\n    Private m_center_point As Point3d\n\n    Public Sub New(centerPoint As Point3d)\n      m_center_point = centerPoint\n    End Sub\n\n    Protected Overrides Sub OnDynamicDraw(e As GetPointDrawEventArgs)\n      MyBase.OnDynamicDraw(e)\n      Dim cplane = e.RhinoDoc.Views.ActiveView.ActiveViewport.ConstructionPlane()\n      Dim radius = m_center_point.DistanceTo(e.CurrentPoint)\n      Dim circle = New Circle(cplane, m_center_point, radius)\n      e.Display.DrawCircle(circle, System.Drawing.Color.Black)\n    End Sub\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Display.DisplayPipeline", "void DrawCircle(Circle circle, Color color)"]
    ]
  },
  {
    "name": "Gettext.vb",
    "code": "Imports Rhino\nImports Rhino.DocObjects\nImports Rhino.Commands\nImports Rhino.Input.Custom\n\nNamespace examples_vb\n  Public Class ReadDimensionTextCommand\n    Inherits Rhino.Commands.Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbReadDimensionText\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim go = New GetObject()\n      go.SetCommandPrompt(\"Select annotation\")\n      go.GeometryFilter = ObjectType.Annotation\n      go.[Get]()\n      If go.CommandResult() <> Result.Success Then\n        Return Result.Failure\n      End If\n      Dim annotation = TryCast(go.[Object](0).[Object](), AnnotationObjectBase)\n      If annotation Is Nothing Then\n        Return Result.Failure\n      End If\n\n      RhinoApp.WriteLine(\"Annotation text = {0}\", annotation.DisplayText)\n\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.DocObjects.AnnotationObjectBase", "string DisplayText"]
    ]
  },
  {
    "name": "Hatchcurve.vb",
    "code": "Partial Class Examples\n  Public Shared Function HatchCurve(doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    Dim go = New Rhino.Input.Custom.GetObject()\n    go.SetCommandPrompt(\"Select closed planar curve\")\n    go.GeometryFilter = Rhino.DocObjects.ObjectType.Curve\n    go.GeometryAttributeFilter = Rhino.Input.[Custom].GeometryAttributeFilter.ClosedCurve\n    go.SubObjectSelect = False\n    go.Get()\n    If go.CommandResult() <> Rhino.Commands.Result.Success Then\n      Return go.CommandResult()\n    End If\n\n    Dim curve = go.Object(0).Curve()\n    If curve Is Nothing OrElse Not curve.IsClosed OrElse Not curve.IsPlanar() Then\n      Return Rhino.Commands.Result.Failure\n    End If\n\n    Dim hatch_name As String = doc.HatchPatterns(doc.HatchPatterns.CurrentHatchPatternIndex).Name\n    Dim rc = Rhino.Input.RhinoGet.GetString(\"Hatch pattern\", True, hatch_name)\n    If rc <> Rhino.Commands.Result.Success Then\n      Return rc\n    End If\n    hatch_name = hatch_name.Trim()\n    If String.IsNullOrWhiteSpace(hatch_name) Then\n      Return Rhino.Commands.Result.Nothing\n    End If\n    Dim index As Integer = doc.HatchPatterns.Find(hatch_name, True)\n    If index < 0 Then\n      Rhino.RhinoApp.WriteLine(\"Hatch pattern does not exist.\")\n      Return Rhino.Commands.Result.Nothing\n    End If\n\n    Dim hatches = Rhino.Geometry.Hatch.Create(curve, index, 0, 1)\n    For i As Integer = 0 To hatches.Length - 1\n      doc.Objects.AddHatch(hatches(i))\n    Next\n    If hatches.Length > 0 Then\n      doc.Views.Redraw()\n    End If\n    Return Rhino.Commands.Result.Success\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.RhinoDoc", "HatchPatternTable HatchPatterns"],
      ["Rhino.Geometry.Hatch", "static Hatch[] Create(Curve curve, int hatchPatternIndex, double rotationRadians, double scale)"],
      ["Rhino.Geometry.Hatch", "static Hatch[] Create(Curve curve, int hatchPatternIndex, double rotationRadians, double scale, double tolerance)"],
      ["Rhino.DocObjects.ModelComponent", "string Name"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddHatch(Hatch hatch)"],
      ["Rhino.DocObjects.Tables.HatchPatternTable", "int CurrentHatchPatternIndex"],
      ["Rhino.DocObjects.Tables.HatchPatternTable", "int Find(string name, bool ignoreDeleted)"],
      ["Rhino.DocObjects.Tables.HatchPatternTable", "HatchPattern FindName(string name)"]
    ]
  },
  {
    "name": "Insertknot.vb",
    "code": "Imports Rhino.DocObjects\n\nPartial Class Examples\n  Public Shared Function InsertKnot(ByVal doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    Dim rc As Rhino.Commands.Result\n    Const filter As ObjectType = Rhino.DocObjects.ObjectType.Curve\n    Dim objref As Rhino.DocObjects.ObjRef = Nothing\n    rc = Rhino.Input.RhinoGet.GetOneObject(\"Select curve for knot insertion\", False, filter, objref)\n    If rc <> Rhino.Commands.Result.Success Then\n      Return rc\n    End If\n    Dim curve As Rhino.Geometry.Curve = objref.Curve()\n    If curve Is Nothing Then\n      Return Rhino.Commands.Result.Failure\n    End If\n    Dim nurb As Rhino.Geometry.NurbsCurve = curve.ToNurbsCurve()\n    If nurb Is Nothing Then\n      Return Rhino.Commands.Result.Failure\n    End If\n\n    Dim gp As New Rhino.Input.Custom.GetPoint()\n    gp.SetCommandPrompt(\"Point on curve to add knot\")\n    gp.Constrain(nurb, False)\n    gp.[Get]()\n    If gp.CommandResult() = Rhino.Commands.Result.Success Then\n      Dim t As Double\n      Dim crv As Rhino.Geometry.Curve = gp.PointOnCurve(t)\n      If crv IsNot Nothing AndAlso nurb.Knots.InsertKnot(t) Then\n        doc.Objects.Replace(objref, nurb)\n        doc.Views.Redraw()\n      End If\n    End If\n    Return Rhino.Commands.Result.Success\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.Input.Custom.GetPoint", "bool Constrain(Curve curve, bool allowPickingPointOffObject)"],
      ["Rhino.Input.Custom.GetPoint", "Curve PointOnCurve(out double t)"],
      ["Rhino.Geometry.Collections.NurbsCurveKnotList", "bool InsertKnot(double value)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "bool Replace(ObjRef objref, Curve curve)"]
    ]
  },
  {
    "name": "Instancedefinitionobjects.vb",
    "code": "Partial Class Examples\n  Public Shared Function InstanceDefinitionObjects(doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    Dim objref As Rhino.DocObjects.ObjRef = Nothing\n    Dim rc = Rhino.Input.RhinoGet.GetOneObject(\"Select instance\", False, Rhino.DocObjects.ObjectType.InstanceReference, objref)\n    If rc <> Rhino.Commands.Result.Success Then\n      Return rc\n    End If\n\n    Dim iref = TryCast(objref.Object(), Rhino.DocObjects.InstanceObject)\n    If iref IsNot Nothing Then\n      Dim idef = iref.InstanceDefinition\n      If idef IsNot Nothing Then\n        Dim rhino_objects = idef.GetObjects()\n        For i As Integer = 0 To rhino_objects.Length - 1\n          Rhino.RhinoApp.WriteLine(\"Object {0} = {1}\", i, rhino_objects(i).Id)\n        Next\n      End If\n    End If\n    Return Rhino.Commands.Result.Success\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.DocObjects.InstanceObject", "InstanceDefinition InstanceDefinition"],
      ["Rhino.DocObjects.InstanceDefinition", "RhinoObject[] GetObjects()"]
    ]
  },
  {
    "name": "Intersectcurves.vb",
    "code": "Partial Class Examples\n  Public Shared Function IntersectCurves(doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    ' Select two curves to intersect\n    Dim go = New Rhino.Input.Custom.GetObject()\n    go.SetCommandPrompt(\"Select two curves\")\n    go.GeometryFilter = Rhino.DocObjects.ObjectType.Curve\n    go.GetMultiple(2, 2)\n    If go.CommandResult() <> Rhino.Commands.Result.Success Then\n      Return go.CommandResult()\n    End If\n\n    ' Validate input\n    Dim curveA = go.[Object](0).Curve()\n    Dim curveB = go.[Object](1).Curve()\n    If curveA Is Nothing OrElse curveB Is Nothing Then\n      Return Rhino.Commands.Result.Failure\n    End If\n\n    ' Calculate the intersection\n    Const intersection_tolerance As Double = 0.001\n    Const overlap_tolerance As Double = 0.0\n    Dim events = Rhino.Geometry.Intersect.Intersection.CurveCurve(curveA, curveB, intersection_tolerance, overlap_tolerance)\n\n    ' Process the results\n    If events IsNot Nothing Then\n      For i As Integer = 0 To events.Count - 1\n        Dim ccx_event = events(i)\n        doc.Objects.AddPoint(ccx_event.PointA)\n        If ccx_event.PointA.DistanceTo(ccx_event.PointB) > Double.Epsilon Then\n          doc.Objects.AddPoint(ccx_event.PointB)\n          doc.Objects.AddLine(ccx_event.PointA, ccx_event.PointB)\n        End If\n      Next\n      doc.Views.Redraw()\n    End If\n    Return Rhino.Commands.Result.Success\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.Geometry.Point3f", "double DistanceTo(Point3f other)"],
      ["Rhino.Geometry.Point3d", "double DistanceTo(Point3d other)"],
      ["Rhino.DocObjects.ObjRef", "Curve Curve()"],
      ["Rhino.Geometry.Intersect.Intersection", "static CurveIntersections CurveCurve(Curve curveA, Curve curveB, double tolerance, double overlapTolerance)"]
    ]
  },
  {
    "name": "Intersectlinecircle.vb",
    "code": "Imports Rhino\nImports Rhino.Commands\nImports Rhino.Geometry\nImports Rhino.Geometry.Intersect\n\nNamespace examples_vb\n  Public Class IntersectLineCircleCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbIntersectLineCircle\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim circle As Circle\n      Dim rc = Rhino.Input.RhinoGet.GetCircle(circle)\n      If rc <> Result.Success Then\n        Return rc\n      End If\n      doc.Objects.AddCircle(circle)\n      doc.Views.Redraw()\n\n      Dim line As Line\n      rc = Rhino.Input.RhinoGet.GetLine(line)\n      If rc <> Result.Success Then\n        Return rc\n      End If\n      doc.Objects.AddLine(line)\n      doc.Views.Redraw()\n\n      Dim t1 As Double, t2 As Double\n      Dim point1 As Point3d, point2 As Point3d\n      Dim lineCircleIntersect = Intersection.LineCircle(line, circle, t1, point1, t2, point2)\n      Dim msg As String = \"\"\n      Select Case lineCircleIntersect\n        Case LineCircleIntersection.None\n          msg = \"line does not intersect circle\"\n          Exit Select\n        Case LineCircleIntersection.[Single]\n          msg = [String].Format(\"line intersects circle at point ({0},{1},{2})\", point1.X, point1.Y, point1.Z)\n          doc.Objects.AddPoint(point1)\n          Exit Select\n        Case LineCircleIntersection.Multiple\n          msg = [String].Format(\"line intersects circle at points ({0},{1},{2}) and ({3},{4},{5})\", point1.X, point1.Y, point1.Z, point2.X, point2.Y, _\n            point2.Z)\n          doc.Objects.AddPoint(point1)\n          doc.Objects.AddPoint(point2)\n          Exit Select\n      End Select\n      RhinoApp.WriteLine(msg)\n      doc.Views.Redraw()\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Geometry.Intersect.Intersection", "static LineCircleIntersection LineCircle(Line line, Circle circle, out double t1, out Point3d point1, out double t2, out Point3d point2)"]
    ]
  },
  {
    "name": "Intersectlines.vb",
    "code": "Imports Rhino.Geometry\n\nPartial Class Examples\n  Public Shared Function IntersectLines(ByVal doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    Dim go As New Rhino.Input.Custom.GetObject()\n    go.SetCommandPrompt(\"Select lines\")\n    go.GeometryFilter = Rhino.DocObjects.ObjectType.Curve\n    go.GetMultiple(2, 2)\n    If go.CommandResult() <> Rhino.Commands.Result.Success Then\n      Return go.CommandResult()\n    End If\n    If go.ObjectCount <> 2 Then\n      Return Rhino.Commands.Result.Failure\n    End If\n\n    Dim crv0 As LineCurve = TryCast(go.Object(0).Geometry(), LineCurve)\n    Dim crv1 As LineCurve = TryCast(go.Object(1).Geometry(), LineCurve)\n    If crv0 Is Nothing OrElse crv1 Is Nothing Then\n      Return Rhino.Commands.Result.Failure\n    End If\n\n    Dim line0 As Line = crv0.Line\n    Dim line1 As Line = crv1.Line\n    Dim v0 As Vector3d = line0.Direction\n    v0.Unitize()\n    Dim v1 As Vector3d = line1.Direction\n    v1.Unitize()\n\n    If v0.IsParallelTo(v1) <> 0 Then\n      Rhino.RhinoApp.WriteLine(\"Selected lines are parallel.\")\n      Return Rhino.Commands.Result.[Nothing]\n    End If\n\n    Dim a As Double, b As Double\n    If Not Rhino.Geometry.Intersect.Intersection.LineLine(line0, line1, a, b) Then\n      Rhino.RhinoApp.WriteLine(\"No intersection found.\")\n      Return Rhino.Commands.Result.[Nothing]\n    End If\n\n    Dim pt0 As Point3d = line0.PointAt(a)\n    Dim pt1 As Point3d = line1.PointAt(b)\n    ' pt0 and pt1 should be equal, so we will only add pt0 to the document\n    doc.Objects.AddPoint(pt0)\n    doc.Views.Redraw()\n    Return Rhino.Commands.Result.Success\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.Geometry.Line", "Vector3d Direction"],
      ["Rhino.Geometry.Line", "Point3d PointAt(double t)"],
      ["Rhino.Geometry.Vector3d", "int IsParallelTo(Vector3d other)"],
      ["Rhino.Geometry.Intersect.Intersection", "static bool LineLine(Line lineA, Line lineB, out double a, out double b)"]
    ]
  },
  {
    "name": "Isbrepbox.vb",
    "code": "Partial Class Examples\n  Public Shared Function IsBrepBox(brep As Rhino.Geometry.Brep) As Boolean\n    Const zero_tolerance As Double = 0.000001 ' or whatever\n    Dim rc As Boolean = brep.IsSolid\n    If rc Then\n      rc = brep.Faces.Count = 6\n    End If\n\n    Dim N = New Rhino.Geometry.Vector3d(5) {}\n    Dim i As Integer = 0\n    While rc AndAlso i < 6\n      Dim plane As Rhino.Geometry.Plane\n      rc = brep.Faces(i).TryGetPlane(plane, zero_tolerance)\n      If rc Then\n        N(i) = plane.ZAxis\n        N(i).Unitize()\n      End If\n      i += 1\n    End While\n\n    i = 0\n    While rc AndAlso i < 6\n      Dim count As Integer = 0\n      Dim j As Integer = 0\n      While rc AndAlso j < 6\n        Dim dot As Double = Math.Abs(N(i) * N(j))\n        If dot <= zero_tolerance Then\n          Continue While\n        End If\n        If Math.Abs(dot - 1.0) <= zero_tolerance Then\n          count += 1\n        Else\n          rc = False\n        End If\n        j += 1\n      End While\n\n      If rc Then\n        If 2 <> count Then\n          rc = False\n        End If\n      End If\n      i += 1\n    End While\n    Return rc\n  End Function\n\n  Public Shared Function TestBrepBox(doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    Dim obj_ref As Rhino.DocObjects.ObjRef = Nothing\n    Dim rc = Rhino.Input.RhinoGet.GetOneObject(\"Select Brep\", True, Rhino.DocObjects.ObjectType.Brep, obj_ref)\n    If rc = Rhino.Commands.Result.Success Then\n      Dim brep = obj_ref.Brep()\n      If brep IsNot Nothing Then\n        If IsBrepBox(brep) Then\n          Rhino.RhinoApp.WriteLine(\"Yes it is a box\")\n        Else\n          Rhino.RhinoApp.WriteLine(\"No it is not a box\")\n        End If\n      End If\n    End If\n    Return rc\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.Geometry.Brep", "bool IsSolid"],
      ["Rhino.Geometry.Surface", "bool TryGetPlane(out Plane plane, double tolerance)"]
    ]
  },
  {
    "name": "Isocurvedensity.vb",
    "code": "Partial Class Examples\n  Public Shared Function IsocurveDensity(doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    Dim objref As Rhino.DocObjects.ObjRef = Nothing\n    Dim rc = Rhino.Input.RhinoGet.GetOneObject(\"Select surface\", False, Rhino.DocObjects.ObjectType.Surface, objref)\n    If rc <> Rhino.Commands.Result.Success Then\n      Return rc\n    End If\n\n    Dim brep_obj = TryCast(objref.Object(), Rhino.DocObjects.BrepObject)\n    If brep_obj IsNot Nothing Then\n      brep_obj.Attributes.WireDensity = 3\n      brep_obj.CommitChanges()\n      doc.Views.Redraw()\n    End If\n    Return Rhino.Commands.Result.Success\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.DocObjects.ObjectAttributes", "int WireDensity"]
    ]
  },
  {
    "name": "Issurfaceinplane.vb",
    "code": "Imports System.Linq\nImports Rhino\nImports Rhino.DocObjects\nImports Rhino.Geometry\nImports Rhino.Commands\nImports Rhino.Input\n\nNamespace examples_vb\n  Public Class IsPlanarSurfaceInPlaneCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbIsPlanarSurfaceInPlane\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim obj_ref As ObjRef = Nothing\n      Dim rc = RhinoGet.GetOneObject(\"select surface\", True, ObjectType.Surface, obj_ref)\n      If rc <> Result.Success Then\n        Return rc\n      End If\n      Dim surface = obj_ref.Surface()\n\n      Dim corners As Point3d() = Nothing\n      rc = RhinoGet.GetRectangle(corners)\n      If rc <> Result.Success Then\n        Return rc\n      End If\n\n      Dim plane = New Plane(corners(0), corners(1), corners(2))\n\n      Dim is_or_isnt = If(IsSurfaceInPlane(surface, plane, doc.ModelAbsoluteTolerance), \"\", \" not \")\n      RhinoApp.WriteLine(\"Surface is{0} in plane.\", is_or_isnt)\n      Return Result.Success\n    End Function\n\n    Private Function IsSurfaceInPlane(surface As Surface, plane As Plane, tolerance As Double) As Boolean\n      If Not surface.IsPlanar(tolerance) Then\n        Return False\n      End If\n\n      Dim bbox = surface.GetBoundingBox(True)\n      Return bbox.GetCorners().All(Function(corner) Math.Abs(plane.DistanceTo(corner)) <= tolerance)\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Geometry.Plane", "double DistanceTo(Point3d testPoint)"],
      ["Rhino.Geometry.Surface", "bool IsPlanar()"]
    ]
  },
  {
    "name": "Leader.vb",
    "code": "Imports Rhino\nImports Rhino.Geometry\nImports Rhino.Commands\nImports System.Collections.Generic\nImports System.Linq\n\nNamespace examples_vb\n  Public Class LeaderCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbLeader\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim points = New List(Of Point3d)() From { _\n        New Point3d(1, 1, 0), _\n        New Point3d(5, 1, 0), _\n        New Point3d(5, 5, 0), _\n        New Point3d(9, 5, 0) _\n      }\n\n      Dim xyPlane = Plane.WorldXY\n\n      Dim points2d = New List(Of Point2d)()\n      For Each point3d As Point3d In points\n        Dim x As Double, y As Double\n        If xyPlane.ClosestParameter(point3d, x, y) Then\n          Dim point2d = New Point2d(x, y)\n          If points2d.Count < 1 OrElse point2d.DistanceTo(points2d.Last()) > RhinoMath.SqrtEpsilon Then\n            points2d.Add(point2d)\n          End If\n        End If\n      Next\n\n      doc.Objects.AddLeader(xyPlane, points2d)\n      doc.Views.Redraw()\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Geometry.Point2d", "double DistanceTo(Point2d other)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddLeader(Plane plane, IEnumerable<Point2d> points)"]
    ]
  },
  {
    "name": "Locklayer.vb",
    "code": "Imports Rhino\nImports Rhino.Commands\nImports System.Linq\n\nNamespace examples_vb\n  Public Class LockLayerCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbLockLayer\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim layerName As String = \"\"\n      Dim rc = Rhino.Input.RhinoGet.GetString(\"Name of layer to lock\", True, layerName)\n      If rc <> Result.Success Then\n        Return rc\n      End If\n      If [String].IsNullOrWhiteSpace(layerName) Then\n        Return Result.[Nothing]\n      End If\n\n      ' because of sublayers it's possible that mone than one layer has the same name\n      ' so simply calling doc.Layers.Find(layerName) isn't good enough.  If \"layerName\" returns\n      ' more than one layer then present them to the user and let him decide.\n      Dim matchingLayers = (From layer In doc.Layers Where layer.Name = layerName Select layer).ToList()\n\n      Dim layerToLock As Rhino.DocObjects.Layer = Nothing\n      If matchingLayers.Count = 0 Then\n        RhinoApp.WriteLine([String].Format(\"Layer \"\"{0}\"\" does not exist.\", layerName))\n        Return Result.[Nothing]\n      ElseIf matchingLayers.Count = 1 Then\n        layerToLock = matchingLayers(0)\n      ElseIf matchingLayers.Count > 1 Then\n        For i As Integer = 0 To matchingLayers.Count - 1\n          RhinoApp.WriteLine([String].Format(\"({0}) {1}\", i + 1, matchingLayers(i).FullPath.Replace(\"::\", \"->\")))\n        Next\n        Dim selectedLayer As Integer = -1\n        rc = Rhino.Input.RhinoGet.GetInteger(\"which layer?\", True, selectedLayer)\n        If rc <> Result.Success Then\n          Return rc\n        End If\n        If selectedLayer > 0 AndAlso selectedLayer <= matchingLayers.Count Then\n          layerToLock = matchingLayers(selectedLayer - 1)\n        Else\n          Return Result.[Nothing]\n        End If\n      End If\n\n      If layerToLock Is Nothing Then\n        Return Result.Nothing\n      End If\n\n      If Not layerToLock.IsLocked Then\n        layerToLock.IsLocked = True\n        layerToLock.CommitChanges()\n        Return Result.Success\n      Else\n        RhinoApp.WriteLine([String].Format(\"layer {0} is already locked.\", layerToLock.FullPath))\n        Return Result.[Nothing]\n      End If\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.DocObjects.Layer", "string FullPath"],
      ["Rhino.DocObjects.Layer", "bool IsLocked"],
      ["Rhino.DocObjects.Layer", "bool CommitChanges()"]
    ]
  },
  {
    "name": "Loft.vb",
    "code": "Imports Rhino\nImports Rhino.Input.Custom\nImports Rhino.DocObjects\nImports Rhino.Commands\nImports System.Collections.Generic\nImports Rhino.Geometry\n\nNamespace examples_vb\n  Public Class LoftCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbLoft\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As Rhino.Commands.RunMode) As Result\n      ' select curves to loft\n      Dim gs = New GetObject()\n      gs.SetCommandPrompt(\"select curves to loft\")\n      gs.GeometryFilter = ObjectType.Curve\n      gs.DisablePreSelect()\n      gs.SubObjectSelect = False\n      gs.GetMultiple(2, 0)\n      If gs.CommandResult() <> Result.Success Then\n        Return gs.CommandResult()\n      End If\n\n      Dim curves = New List(Of Curve)()\n      For Each obj As ObjRef In gs.Objects()\n        curves.Add(obj.Curve())\n      Next\n\n      Dim breps = Rhino.Geometry.Brep.CreateFromLoft(curves, Point3d.Unset, Point3d.Unset, LoftType.Tight, False)\n      For Each brep As Brep In breps\n        doc.Objects.AddBrep(brep)\n      Next\n\n      doc.Views.Redraw()\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Geometry.Brep", "static Brep[] CreateFromLoft(IEnumerable<Curve> curves, Point3d start, Point3d end, LoftType loftType, bool closed)"]
    ]
  },
  {
    "name": "Makerhinocontours.vb",
    "code": "Imports Rhino\nImports Rhino.DocObjects\nImports Rhino.Geometry\nImports Rhino.Input\nImports Rhino.Input.Custom\nImports Rhino.Commands\n\nNamespace examples_vb\n  Public Class ContourCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbContour\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim filter = ObjectType.Surface Or ObjectType.PolysrfFilter Or ObjectType.Mesh\n      Dim obj_refs As ObjRef() = Nothing\n      Dim rc = RhinoGet.GetMultipleObjects(\"Select objects to contour\", False, filter, obj_refs)\n      If rc <> Result.Success Then\n        Return rc\n      End If\n\n      Dim gp = New GetPoint()\n      gp.SetCommandPrompt(\"Contour plane base point\")\n      gp.[Get]()\n      If gp.CommandResult() <> Result.Success Then\n        Return gp.CommandResult()\n      End If\n      Dim base_point = gp.Point()\n\n      gp.DrawLineFromPoint(base_point, True)\n      gp.SetCommandPrompt(\"Direction perpendicular to contour planes\")\n      gp.[Get]()\n      If gp.CommandResult() <> Result.Success Then\n        Return gp.CommandResult()\n      End If\n      Dim end_point = gp.Point()\n\n      If base_point.DistanceTo(end_point) < RhinoMath.ZeroTolerance Then\n        Return Result.[Nothing]\n      End If\n\n      Dim distance As Double = 1.0\n      rc = RhinoGet.GetNumber(\"Distance between contours\", False, distance)\n      If rc <> Result.Success Then\n        Return rc\n      End If\n\n      Dim interval = Math.Abs(distance)\n\n      Dim curves As Curve() = Nothing\n      For Each obj_ref As ObjRef In obj_refs\n        Dim geometry = obj_ref.Geometry()\n        If geometry Is Nothing Then\n          Return Result.Failure\n        End If\n\n        If TypeOf geometry Is Brep Then\n          curves = Brep.CreateContourCurves(TryCast(geometry, Brep), base_point, end_point, interval)\n        Else\n          curves = Mesh.CreateContourCurves(TryCast(geometry, Mesh), base_point, end_point, interval)\n        End If\n\n        For Each curve As Curve In curves\n          Dim curve_object_id = doc.Objects.AddCurve(curve)\n          doc.Objects.[Select](curve_object_id)\n        Next\n      Next\n\n      If curves IsNot Nothing Then\n        doc.Views.Redraw()\n      End If\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Geometry.Brep", "static Curve[] CreateContourCurves(Brep brepToContour, Point3d contourStart, Point3d contourEnd, double interval)"],
      ["Rhino.Geometry.Mesh", "static Curve[] CreateContourCurves(Mesh meshToContour, Point3d contourStart, Point3d contourEnd, double interval)"]
    ]
  },
  {
    "name": "Meshdrawing.vb",
    "code": "Imports Rhino\nImports Rhino.Commands\nImports Rhino.Display\nImports Rhino.Geometry\nImports Rhino.Input.Custom\nImports Rhino.DocObjects\nImports System.Drawing\n\nNamespace examples_vb\n  Public Class MeshDrawingCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbDrawMesh\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim gs = New GetObject()\n      gs.SetCommandPrompt(\"select sphere\")\n      gs.GeometryFilter = ObjectType.Surface\n      gs.DisablePreSelect()\n      gs.SubObjectSelect = False\n      gs.[Get]()\n      If gs.CommandResult() <> Result.Success Then\n        Return gs.CommandResult()\n      End If\n\n      Dim sphere As Sphere\n      gs.[Object](0).Surface().TryGetSphere(sphere)\n      If sphere.IsValid Then\n        Dim mesh__1 = Mesh.CreateFromSphere(sphere, 10, 10)\n        If mesh__1 Is Nothing Then\n          Return Result.Failure\n        End If\n        Dim conduit = New DrawBlueMeshConduit(mesh__1)\n        conduit.Enabled = True\n\n        doc.Views.Redraw()\n\n        Dim inStr As String = \"\"\n        Rhino.Input.RhinoGet.GetString(\"press <Enter> to continue\", True, inStr)\n\n        conduit.Enabled = False\n        doc.Views.Redraw()\n        Return Result.Success\n      Else\n        Return Result.Failure\n      End If\n    End Function\n  End Class\n\n  Class DrawBlueMeshConduit\n    Inherits DisplayConduit\n    Private _mesh As Mesh = Nothing\n    Private _color As Color\n    Private _material As DisplayMaterial = Nothing\n    Private _bbox As BoundingBox\n\n    Public Sub New(mesh As Mesh)\n      ' set up as much data as possible so we do the minimum amount of work possible inside\n      ' the actual display code\n      _mesh = mesh\n      _color = System.Drawing.Color.Blue\n      _material = New DisplayMaterial()\n      _material.Diffuse = _color\n      If _mesh IsNot Nothing AndAlso _mesh.IsValid Then\n        _bbox = _mesh.GetBoundingBox(True)\n      End If\n    End Sub\n\n    ' this is called every frame inside the drawing code so try to do as little as possible\n    ' in order to not degrade display speed. Don't create new objects if you don't have to as this\n    ' will incur an overhead on the heap and garbage collection.\n    Protected Overrides Sub CalculateBoundingBox(e As CalculateBoundingBoxEventArgs)\n      MyBase.CalculateBoundingBox(e)\n      ' Since we are dynamically drawing geometry, we needed to override\n      ' CalculateBoundingBox. Otherwise, there is a good chance that our\n      ' dynamically drawing geometry would get clipped.\n\n      ' Union the mesh's bbox with the scene's bounding box\n      e.IncludeBoundingBox(_bbox)\n    End Sub\n\n    Protected Overrides Sub PreDrawObjects(e As DrawEventArgs)\n      MyBase.PreDrawObjects(e)\n      Dim vp = e.Display.Viewport\n      If vp.DisplayMode.EnglishName.ToLower() = \"wireframe\" Then\n        e.Display.DrawMeshWires(_mesh, _color)\n      Else\n        e.Display.DrawMeshShaded(_mesh, _material)\n      End If\n    End Sub\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Display.DisplayPipeline", "void DrawMeshShaded(Mesh mesh, DisplayMaterial material)"],
      ["Rhino.Display.DisplayPipeline", "void DrawMeshWires(Mesh mesh, Color color)"]
    ]
  },
  {
    "name": "Meshvolume.vb",
    "code": "Imports Rhino\nImports Rhino.Commands\nImports Rhino.Input.Custom\nImports Rhino.Geometry\nImports Rhino.DocObjects\n\nNamespace examples_vb\n  Public Class MeshVolumeCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbMeshVolume\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim gm = New GetObject()\n      gm.SetCommandPrompt(\"Select solid meshes for volume calculation\")\n      gm.GeometryFilter = ObjectType.Mesh\n      gm.GeometryAttributeFilter = GeometryAttributeFilter.ClosedMesh\n      gm.SubObjectSelect = False\n      gm.GroupSelect = True\n      gm.GetMultiple(1, 0)\n      If gm.CommandResult() <> Result.Success Then\n        Return gm.CommandResult()\n      End If\n\n      Dim volume As Double = 0.0\n      Dim volume_error As Double = 0.0\n      For Each obj_ref As ObjRef In gm.Objects()\n        If obj_ref.Mesh() IsNot Nothing Then\n          Dim mass_properties = VolumeMassProperties.Compute(obj_ref.Mesh())\n          If mass_properties IsNot Nothing Then\n            volume += mass_properties.Volume\n            volume_error += mass_properties.VolumeError\n          End If\n        End If\n      Next\n\n      RhinoApp.WriteLine(\"Total volume = {0:f} (+/- {1:f})\", volume, volume_error)\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Geometry.VolumeMassProperties", "double Volume"],
      ["Rhino.Geometry.VolumeMassProperties", "double VolumeError"]
    ]
  },
  {
    "name": "Modifylightcolor.vb",
    "code": "Imports Rhino\nImports Rhino.DocObjects\nImports Rhino.Commands\nImports Rhino.Input\nImports Rhino.UI\n\nNamespace examples_vb\n  Public Class ChangeLightColorCommand\n    Inherits Rhino.Commands.Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbLightColor\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim obj_ref As ObjRef = Nothing\n      Dim rc = RhinoGet.GetOneObject(\"Select light to change color\", True, ObjectType.Light, obj_ref)\n      If rc <> Result.Success Then\n        Return rc\n      End If\n      Dim light = obj_ref.Light()\n      If light Is Nothing Then\n        Return Result.Failure\n      End If\n\n      Dim diffuse_color = light.Diffuse\n      If Dialogs.ShowColorDialog(diffuse_color) Then\n        light.Diffuse = diffuse_color\n      End If\n\n      doc.Lights.Modify(obj_ref.ObjectId, light)\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Geometry.Light", "Color Diffuse"],
      ["Rhino.UI.Dialogs", "static bool ShowColorDialog(ref Color color)"],
      ["Rhino.DocObjects.Tables.LightTable", "bool Modify(Guid id, Light light)"]
    ]
  },
  {
    "name": "Modifyobjectcolor.vb",
    "code": "Imports System.Drawing\nImports Rhino\nImports Rhino.DocObjects\nImports Rhino.Geometry\nImports Rhino.Input\nImports Rhino.Commands\n\nNamespace examples_vb\n  Public Class ModifyObjectColorCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbModifyObjectColor\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim obj_ref As ObjRef = Nothing\n      Dim rc = RhinoGet.GetOneObject(\"Select object\", False, ObjectType.AnyObject, obj_ref)\n      If rc <> Result.Success Then\n        Return rc\n      End If\n      Dim rhino_object = obj_ref.[Object]()\n      Dim color__1 = rhino_object.Attributes.ObjectColor\n      Dim b As Boolean = Rhino.UI.Dialogs.ShowColorDialog(color__1)\n      If Not b Then\n        Return Result.Cancel\n      End If\n\n      rhino_object.Attributes.ObjectColor = color__1\n      rhino_object.Attributes.ColorSource = ObjectColorSource.ColorFromObject\n      rhino_object.CommitChanges()\n\n      ' an object's color attributes can also be specified\n      ' when the object is added to Rhino\n      Dim sphere = New Sphere(Point3d.Origin, 5.0)\n      Dim attributes = New ObjectAttributes()\n      attributes.ObjectColor = Color.CadetBlue\n      attributes.ColorSource = ObjectColorSource.ColorFromObject\n      doc.Objects.AddSphere(sphere, attributes)\n\n      doc.Views.Redraw()\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.DocObjects.ObjectAttributes", "ObjectColorSource ColorSource"],
      ["Rhino.DocObjects.ObjectAttributes", "Color ObjectColor"]
    ]
  },
  {
    "name": "Moveobjectstocurrentlayer.vb",
    "code": "Imports Rhino\nImports Rhino.Commands\nImports Rhino.DocObjects\n\nNamespace examples_vb\n  Public Class MoveSelectedObjectsToCurrentLayerCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbMoveSelectedObjectsToCurrentLayer\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      ' all non-light objects that are selected\n      Dim object_enumerator_settings = New ObjectEnumeratorSettings()\n      object_enumerator_settings.IncludeLights = False\n      object_enumerator_settings.IncludeGrips = True\n      object_enumerator_settings.NormalObjects = True\n      object_enumerator_settings.LockedObjects = True\n      object_enumerator_settings.HiddenObjects = True\n      object_enumerator_settings.ReferenceObjects = True\n      object_enumerator_settings.SelectedObjectsFilter = True\n      Dim selected_objects = doc.Objects.GetObjectList(object_enumerator_settings)\n\n      Dim current_layer_index = doc.Layers.CurrentLayerIndex\n      For Each selected_object As RhinoObject In selected_objects\n        selected_object.Attributes.LayerIndex = current_layer_index\n        selected_object.CommitChanges()\n      Next\n      doc.Views.Redraw()\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.DocObjects.ObjectAttributes", "int LayerIndex"],
      ["Rhino.DocObjects.Tables.LayerTable", "int CurrentLayerIndex"]
    ]
  },
  {
    "name": "Nurbscurveincreasedegree.vb",
    "code": "Imports Rhino\nImports Rhino.Commands\nImports Rhino.Input\nImports Rhino.DocObjects\n\nNamespace examples_vb\n  Public Class NurbsCurveIncreaseDegreeCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbNurbsCrvIncreaseDegree\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim obj_ref As ObjRef\n      Dim rc = RhinoGet.GetOneObject(\"Select curve\", False, ObjectType.Curve, obj_ref)\n      If rc <> Result.Success Then\n        Return rc\n      End If\n      If obj_ref Is Nothing Then\n        Return Result.Failure\n      End If\n      Dim curve = obj_ref.Curve()\n      If curve Is Nothing Then\n        Return Result.Failure\n      End If\n      Dim nurbs_curve = curve.ToNurbsCurve()\n\n      Dim new_degree As Integer = -1\n      rc = RhinoGet.GetInteger(String.Format(\"New degree <{0}...11>\", nurbs_curve.Degree), True, new_degree, nurbs_curve.Degree, 11)\n      If rc <> Result.Success Then\n        Return rc\n      End If\n\n      rc = Result.Failure\n      If nurbs_curve.IncreaseDegree(new_degree) Then\n        If doc.Objects.Replace(obj_ref.ObjectId, nurbs_curve) Then\n          rc = Result.Success\n        End If\n      End If\n\n      RhinoApp.WriteLine(\"Result: {0}\", rc.ToString())\n      doc.Views.Redraw()\n      Return rc\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Geometry.NurbsCurve", "bool IncreaseDegree(int desiredDegree)"]
    ]
  },
  {
    "name": "Nurbssurfaceincreasedegree.vb",
    "code": "Imports Rhino\nImports Rhino.Commands\nImports Rhino.Input\nImports Rhino.DocObjects\n\nNamespace examples_vb\n  Public Class NurbsSurfaceIncreaseDegreeCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbNurbsSrfIncreaseDegree\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim obj_ref As ObjRef\n      Dim rc = RhinoGet.GetOneObject(\"Select surface\", False, ObjectType.Surface, obj_ref)\n      If rc <> Result.Success Then\n        Return rc\n      End If\n      If obj_ref Is Nothing Then\n        Return Result.Failure\n      End If\n      Dim surface = obj_ref.Surface()\n      If surface Is Nothing Then\n        Return Result.Failure\n      End If\n      Dim nurbs_surface = surface.ToNurbsSurface()\n\n      Dim new_u_degree As Integer = -1\n      rc = RhinoGet.GetInteger(String.Format(\"New U degree <{0}...11>\", nurbs_surface.Degree(0)), True, new_u_degree, nurbs_surface.Degree(0), 11)\n      If rc <> Result.Success Then\n        Return rc\n      End If\n\n      Dim new_v_degree As Integer = -1\n      rc = RhinoGet.GetInteger(String.Format(\"New V degree <{0}...11>\", nurbs_surface.Degree(1)), True, new_v_degree, nurbs_surface.Degree(1), 11)\n      If rc <> Result.Success Then\n        Return rc\n      End If\n\n      rc = Result.Failure\n      If nurbs_surface.IncreaseDegreeU(new_u_degree) Then\n        If nurbs_surface.IncreaseDegreeV(new_v_degree) Then\n          If doc.Objects.Replace(obj_ref.ObjectId, nurbs_surface) Then\n            rc = Result.Success\n          End If\n        End If\n      End If\n\n      RhinoApp.WriteLine(\"Result: {0}\", rc.ToString())\n      doc.Views.Redraw()\n      Return rc\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Geometry.NurbsSurface", "bool IncreaseDegreeU(int desiredDegree)"],
      ["Rhino.Geometry.NurbsSurface", "bool IncreaseDegreeV(int desiredDegree)"]
    ]
  },
  {
    "name": "Objectdecoration.vb",
    "code": "Partial Class Examples\n  Public Shared Function ObjectDecoration(doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    ' Define a line\n    Dim line = New Rhino.Geometry.Line(New Rhino.Geometry.Point3d(0, 0, 0), New Rhino.Geometry.Point3d(10, 0, 0))\n\n    ' Make a copy of Rhino's default object attributes\n    Dim attribs = doc.CreateDefaultAttributes()\n\n    ' Modify the object decoration style\n    attribs.ObjectDecoration = Rhino.DocObjects.ObjectDecoration.BothArrowhead\n\n    ' Create a new curve object with our attributes\n    doc.Objects.AddLine(line, attribs)\n    doc.Views.Redraw()\n\n    Return Rhino.Commands.Result.Success\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.RhinoDoc", "DocObjects.ObjectAttributes CreateDefaultAttributes()"]
    ]
  },
  {
    "name": "Objectdisplaymode.vb",
    "code": "Imports Rhino\nImports Rhino.DocObjects\n\nPartial Class Examples\n  Public Shared Function ObjectDisplayMode(ByVal doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    Dim rc As Rhino.Commands.Result\n    Const filter As ObjectType = ObjectType.Mesh Or ObjectType.Brep\n    Dim objref As ObjRef = Nothing\n    rc = Rhino.Input.RhinoGet.GetOneObject(\"Select mesh or surface\", True, filter, objref)\n    If rc <> Rhino.Commands.Result.Success Then\n      Return rc\n    End If\n    Dim viewportId As Guid = doc.Views.ActiveView.ActiveViewportID\n\n    Dim attr As ObjectAttributes = objref.[Object]().Attributes\n    If attr.HasDisplayModeOverride(viewportId) Then\n      RhinoApp.WriteLine(\"Removing display mode override from object\")\n      attr.RemoveDisplayModeOverride(viewportId)\n    Else\n      Dim modes As Rhino.Display.DisplayModeDescription() = Rhino.Display.DisplayModeDescription.GetDisplayModes()\n      Dim mode As Rhino.Display.DisplayModeDescription = Nothing\n      If modes.Length = 1 Then\n        mode = modes(0)\n      Else\n        Dim go As New Rhino.Input.Custom.GetOption()\n        go.SetCommandPrompt(\"Select display mode\")\n        Dim str_modes As String() = New String(modes.Length - 1) {}\n        For i As Integer = 0 To modes.Length - 1\n          str_modes(i) = modes(i).EnglishName.Replace(\" \", \"\").Replace(\"-\", \"\")\n        Next\n        go.AddOptionList(\"DisplayMode\", str_modes, 0)\n        If go.[Get]() = Rhino.Input.GetResult.[Option] Then\n          mode = modes(go.[Option]().CurrentListOptionIndex)\n        End If\n      End If\n      If mode Is Nothing Then\n        Return Rhino.Commands.Result.Cancel\n      End If\n      attr.SetDisplayModeOverride(mode, viewportId)\n    End If\n    doc.Objects.ModifyAttributes(objref, attr, False)\n    doc.Views.Redraw()\n    Return Rhino.Commands.Result.Success\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.DocObjects.ObjectAttributes", "bool HasDisplayModeOverride(Guid viewportId)"],
      ["Rhino.DocObjects.ObjectAttributes", "void RemoveDisplayModeOverride(Guid rhinoViewportId)"],
      ["Rhino.DocObjects.ObjectAttributes", "bool SetDisplayModeOverride(DisplayModeDescription mode, Guid rhinoViewportId)"],
      ["Rhino.Input.Custom.GetBaseClass", "int AddOptionList(LocalizeStringPair optionName, IEnumerable<LocalizeStringPair> listValues, int listCurrentIndex)"],
      ["Rhino.Input.Custom.GetBaseClass", "int AddOptionList(string englishOptionName, IEnumerable<string> listValues, int listCurrentIndex)"]
    ]
  },
  {
    "name": "Objectiterator.vb",
    "code": "\nImports Rhino\nImports Rhino.Commands\nImports Rhino.DocObjects\n\nNamespace examples_vb\n  Public Class ObjectEnumeratorCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbObjectEnumerator\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim object_enumerator_settings = New ObjectEnumeratorSettings()\n      object_enumerator_settings.IncludeLights = True\n      object_enumerator_settings.IncludeGrips = False\n      Dim rhino_objects = doc.Objects.GetObjectList(object_enumerator_settings)\n\n      Dim count As Integer = 0\n      For Each rhino_object As RhinoObject In rhino_objects\n        If rhino_object.IsSelectable() AndAlso rhino_object.IsSelected(False) = 0 Then\n          rhino_object.[Select](True)\n          count += 1\n        End If\n      Next\n      If count > 0 Then\n        doc.Views.Redraw()\n        RhinoApp.WriteLine(\"{0} object{1} selected\", count, If(count = 1, \"\", \"s\"))\n      End If\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.DocObjects.ObjectEnumeratorSettings", "bool IncludeGrips"],
      ["Rhino.DocObjects.ObjectEnumeratorSettings", "bool IncludeLights"]
    ]
  },
  {
    "name": "Orientonsrf.vb",
    "code": "Partial Class Examples\n  Public Shared Function OrientOnSrf(ByVal doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    ' Select objects to orient\n    Dim go As New Rhino.Input.Custom.GetObject()\n    go.SetCommandPrompt(\"Select objects to orient\")\n    go.SubObjectSelect = False\n    go.GroupSelect = True\n    go.GetMultiple(1, 0)\n    If go.CommandResult() <> Rhino.Commands.Result.Success Then\n      Return go.CommandResult()\n    End If\n\n    ' Point to orient from\n    Dim gp As New Rhino.Input.Custom.GetPoint()\n    gp.SetCommandPrompt(\"Point to orient from\")\n    gp.Get()\n    If gp.CommandResult() <> Rhino.Commands.Result.Success Then\n      Return gp.CommandResult()\n    End If\n\n    ' Define source plane\n    Dim view As Rhino.Display.RhinoView = gp.View()\n    If view Is Nothing Then\n      view = doc.Views.ActiveView\n      If view Is Nothing Then\n        Return Rhino.Commands.Result.Failure\n      End If\n    End If\n    Dim source_plane As Rhino.Geometry.Plane = view.ActiveViewport.ConstructionPlane()\n    source_plane.Origin = gp.Point()\n\n    ' Surface to orient on\n    Dim gs As New Rhino.Input.Custom.GetObject()\n    gs.SetCommandPrompt(\"Surface to orient on\")\n    gs.GeometryFilter = Rhino.DocObjects.ObjectType.Surface\n    gs.SubObjectSelect = True\n    gs.DeselectAllBeforePostSelect = False\n    gs.OneByOnePostSelect = True\n    gs.Get()\n    If gs.CommandResult() <> Rhino.Commands.Result.Success Then\n      Return gs.CommandResult()\n    End If\n\n    Dim objref As Rhino.DocObjects.ObjRef = gs.[Object](0)\n    ' get selected surface object\n    Dim obj As Rhino.DocObjects.RhinoObject = objref.[Object]()\n    If obj Is Nothing Then\n      Return Rhino.Commands.Result.Failure\n    End If\n    ' get selected surface (face)\n    Dim surface As Rhino.Geometry.Surface = objref.Surface()\n    If surface Is Nothing Then\n      Return Rhino.Commands.Result.Failure\n    End If\n    ' Unselect surface\n    obj.[Select](False)\n\n    ' Point on surface to orient to\n    gp.SetCommandPrompt(\"Point on surface to orient to\")\n    gp.Constrain(surface, False)\n    gp.Get()\n    If gp.CommandResult() <> Rhino.Commands.Result.Success Then\n      Return gp.CommandResult()\n    End If\n\n    ' Do transformation\n    Dim rc As Rhino.Commands.Result = Rhino.Commands.Result.Failure\n    Dim u As Double, v As Double\n    If surface.ClosestPoint(gp.Point(), u, v) Then\n      Dim target_plane As Rhino.Geometry.Plane\n      If surface.FrameAt(u, v, target_plane) Then\n        ' Build transformation\n        Dim xform As Rhino.Geometry.Transform = Rhino.Geometry.Transform.PlaneToPlane(source_plane, target_plane)\n\n        ' Do the transformation. In this example, we will copy the original objects\n        Const delete_original As Boolean = False\n        For i As Integer = 0 To go.ObjectCount - 1\n          doc.Objects.Transform(go.[Object](i), xform, delete_original)\n        Next\n\n        doc.Views.Redraw()\n        rc = Rhino.Commands.Result.Success\n      End If\n    End If\n    Return rc\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.Geometry.Surface", "bool ClosestPoint(Point3d testPoint, out double u, out double v)"],
      ["Rhino.Geometry.Surface", "bool FrameAt(double u, double v, out Plane frame)"],
      ["Rhino.DocObjects.RhinoObject", "int Select(bool on)"],
      ["Rhino.DocObjects.ObjRef", "RhinoObject Object()"],
      ["Rhino.DocObjects.ObjRef", "Surface Surface()"],
      ["Rhino.Input.Custom.GetObject", "bool DeselectAllBeforePostSelect"],
      ["Rhino.Input.Custom.GetObject", "ObjectType GeometryFilter"],
      ["Rhino.Input.Custom.GetObject", "bool GroupSelect"],
      ["Rhino.Input.Custom.GetObject", "bool OneByOnePostSelect"],
      ["Rhino.Input.Custom.GetObject", "bool SubObjectSelect"],
      ["Rhino.Input.Custom.GetObject", "ObjRef Object(int index)"],
      ["Rhino.Input.Custom.GetPoint", "bool Constrain(Surface surface, bool allowPickingPointOffObject)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid Transform(ObjRef objref, Transform xform, bool deleteOriginal)"]
    ]
  },
  {
    "name": "Ortho.vb",
    "code": "Imports Rhino\nImports Rhino.ApplicationSettings\nImports Rhino.Commands\nImports Rhino.Input.Custom\n\nNamespace examples_vb\n  Public Class OrthoCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbOrtho\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim gp = New GetPoint()\n      gp.SetCommandPrompt(\"Start of line\")\n      gp.[Get]()\n      If gp.CommandResult() <> Result.Success Then\n        Return gp.CommandResult()\n      End If\n      Dim start_point = gp.Point()\n\n      Dim original_ortho = ModelAidSettings.Ortho\n      If Not original_ortho Then\n        ModelAidSettings.Ortho = True\n      End If\n\n      gp.SetCommandPrompt(\"End of line\")\n      gp.SetBasePoint(start_point, False)\n      gp.DrawLineFromPoint(start_point, True)\n      gp.[Get]()\n      If gp.CommandResult() <> Result.Success Then\n        Return gp.CommandResult()\n      End If\n      Dim end_point = gp.Point()\n\n      If ModelAidSettings.Ortho <> original_ortho Then\n        ModelAidSettings.Ortho = original_ortho\n      End If\n\n      doc.Objects.AddLine(start_point, end_point)\n      doc.Views.Redraw()\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.ApplicationSettings.ModelAidSettings", "static bool Ortho"]
    ]
  },
  {
    "name": "Planesurface.vb",
    "code": "Imports Rhino\nImports Rhino.Geometry\nImports Rhino.Commands\n\nNamespace examples_vb\n  Public Class PlaneSurfaceCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbPlaneSurface\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim corners As Point3d() = Nothing\n      Dim rc = Input.RhinoGet.GetRectangle(corners)\n      If rc <> Result.Success Then\n        Return rc\n      End If\n\n      Dim plane = New Plane(corners(0), corners(1), corners(2))\n      Dim plane_surface = New PlaneSurface(plane, New Interval(0, corners(0).DistanceTo(corners(1))), New Interval(0, corners(1).DistanceTo(corners(2))))\n      doc.Objects.Add(plane_surface)\n      doc.Views.Redraw()\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Geometry.PlaneSurface", "PlaneSurface(Plane plane, Interval xExtents, Interval yExtents)"]
    ]
  },
  {
    "name": "Pointatcursor.vb",
    "code": "Imports Rhino\nImports Rhino.Commands\nImports Rhino.DocObjects\n\nNamespace examples_vb\n  Public Class PointAtCursorCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbPointAtCursor\"\n      End Get\n    End Property\n\n    <System.Runtime.InteropServices.DllImport(\"user32.dll\")> _\n    Public Shared Function GetCursorPos(ByRef point As System.Drawing.Point) As Boolean\n    End Function\n\n    <System.Runtime.InteropServices.DllImport(\"user32.dll\")> _\n    Public Shared Function ScreenToClient(hWnd As IntPtr, ByRef point As System.Drawing.Point) As Boolean\n    End Function\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim result__1 = Result.Failure\n      Dim view = doc.Views.ActiveView\n      If view Is Nothing Then\n        Return result__1\n      End If\n\n      Dim windowsDrawingPoint As System.Drawing.Point\n      If Not GetCursorPos(windowsDrawingPoint) OrElse Not ScreenToClient(view.Handle, windowsDrawingPoint) Then\n        Return result__1\n      End If\n\n      Dim xform = view.ActiveViewport.GetTransform(CoordinateSystem.Screen, CoordinateSystem.World)\n      Dim point = New Rhino.Geometry.Point3d(windowsDrawingPoint.X, windowsDrawingPoint.Y, 0.0)\n      RhinoApp.WriteLine([String].Format(\"screen point: ({0}, {1}, {2})\", point.X, point.Y, point.Z))\n      point.Transform(xform)\n      RhinoApp.WriteLine([String].Format(\"world point: ({0}, {1}, {2})\", point.X, point.Y, point.Z))\n      result__1 = Result.Success\n      Return result__1\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Geometry.Point3d", "void Transform(Transform xform)"],
      ["Rhino.Display.RhinoViewport", "Transform GetTransform(CoordinateSystem sourceSystem, CoordinateSystem destinationSystem)"]
    ]
  },
  {
    "name": "Principalcurvature.vb",
    "code": "Imports Rhino\nImports Rhino.DocObjects\nImports Rhino.Input\nImports Rhino.Commands\n\nNamespace examples_vb\n  Public Class PrincipalCurvatureCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbPrincipalCurvature\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim obj_ref As ObjRef = Nothing\n      Dim rc = RhinoGet.GetOneObject(\"Select surface for curvature measurement\", True,\n                                     ObjectType.Surface, obj_ref)\n      If rc <> Result.Success Then\n        Return rc\n      End If\n      Dim surface = obj_ref.Surface()\n\n      Dim gp = New Rhino.Input.Custom.GetPoint()\n      gp.SetCommandPrompt(\"Select point on surface for curvature measurement\")\n      gp.Constrain(surface, False)\n      gp.[Get]()\n      If gp.CommandResult() <> Result.Success Then\n        Return gp.CommandResult()\n      End If\n      Dim point_on_surface = gp.Point()\n\n      Dim u As Double, v As Double\n      If Not surface.ClosestPoint(point_on_surface, u, v) Then\n        Return Result.Failure\n      End If\n\n      Dim surface_curvature = surface.CurvatureAt(u, v)\n      If surface_curvature Is Nothing Then\n        Return Result.Failure\n      End If\n\n      RhinoApp.WriteLine(\"Surface curvature evaluation at parameter: ({0}, {1})\", u, v)\n\n      RhinoApp.WriteLine(\"  3-D Point: {0}\", surface_curvature.Point)\n      RhinoApp.WriteLine(\"  3-D Normal: {0}\", surface_curvature.Normal)\n      RhinoApp.WriteLine(\"  Maximum principal curvature: {0} ({1})\", surface_curvature.Kappa(0), surface_curvature.Direction(0))\n      RhinoApp.WriteLine(\"  Minimum principal curvature: {0} ({1})\", surface_curvature.Kappa(1), surface_curvature.Direction(1))\n      RhinoApp.WriteLine(\"  Gaussian curvature: {0}\", surface_curvature.Gaussian)\n      RhinoApp.WriteLine(\"  Mean curvature: {0}\", surface_curvature.Mean)\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Geometry.SurfaceCurvature", "double Gaussian"],
      ["Rhino.Geometry.SurfaceCurvature", "double Mean"],
      ["Rhino.Geometry.SurfaceCurvature", "Vector3d Normal"],
      ["Rhino.Geometry.SurfaceCurvature", "Point3d Point"],
      ["Rhino.Geometry.SurfaceCurvature", "Vector3d Direction(int direction)"],
      ["Rhino.Geometry.SurfaceCurvature", "double Kappa(int direction)"],
      ["Rhino.Geometry.Surface", "SurfaceCurvature CurvatureAt(double u, double v)"]
    ]
  },
  {
    "name": "Printinstancedefinitiontree.vb",
    "code": "Imports Rhino\nImports Rhino.DocObjects\nImports Rhino.FileIO\nImports Rhino.Commands\n\nNamespace examples_vb\n  Public Class InstanceDefinitionTreeCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbInstanceDefinitionTree\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim instanceDefinitions = doc.InstanceDefinitions\n      Dim instanceDefinitionCount = instanceDefinitions.Count\n\n      If instanceDefinitionCount = 0 Then\n        RhinoApp.WriteLine(\"Document contains no instance definitions.\")\n        Return Result.[Nothing]\n      End If\n\n      Dim dump = New TextLog()\n      dump.IndentSize = 4\n\n      For i As Integer = 0 To instanceDefinitionCount - 1\n        DumpInstanceDefinition(instanceDefinitions(i), dump, True)\n      Next\n\n      RhinoApp.WriteLine(dump.ToString())\n\n      Return Result.Success\n    End Function\n\n    Private Sub DumpInstanceDefinition(instanceDefinition As InstanceDefinition, ByRef dump As TextLog, isRoot As Boolean)\n      If instanceDefinition IsNot Nothing AndAlso Not instanceDefinition.IsDeleted Then\n        Dim node As String\n        If isRoot Then\n          node = \"─\"\n        Else\n          '\"\\u2500\"; \n          node = \"└\"\n        End If\n        '\"\\u2514\"; \n        dump.Print(String.Format(\"{0} Instance definition {1} = {2}\" & vbLf, node, instanceDefinition.Index, instanceDefinition.Name))\n\n        If instanceDefinition.ObjectCount > 0 Then\n          dump.PushIndent()\n          For i As Integer = 0 To instanceDefinition.ObjectCount - 1\n            Dim obj = instanceDefinition.[Object](i)\n\n            If obj Is Nothing Then Continue For\n\n            If TypeOf obj Is InstanceObject Then\n              DumpInstanceDefinition(TryCast(obj, InstanceObject).InstanceDefinition, dump, False)\n            Else\n              ' Recursive...\n              dump.Print(String.Format(\"└ Object {0} = {1}\" & vbLf, i, obj.ShortDescription(False)))\n            End If\n          Next\n          dump.PopIndent()\n        End If\n      End If\n    End Sub\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.RhinoDoc", "InstanceDefinitionTable InstanceDefinitions"],
      ["Rhino.FileIO.TextLog", "void PopIndent()"],
      ["Rhino.FileIO.TextLog", "void Print(string text)"],
      ["Rhino.FileIO.TextLog", "void PushIndent()"]
    ]
  },
  {
    "name": "Projectpointstobreps.vb",
    "code": "Imports Rhino\nImports Rhino.DocObjects\nImports Rhino.Input.Custom\nImports Rhino.Commands\nImports System.Collections.Generic\nImports Rhino.Geometry\nImports Rhino.Geometry.Intersect\n\nNamespace examples_vb\n  Public Class ProjectPointsToBrepsCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbProjectPtointsToBreps\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim gs = New GetObject()\n      gs.SetCommandPrompt(\"select surface\")\n      gs.GeometryFilter = ObjectType.Surface Or ObjectType.PolysrfFilter\n      gs.DisablePreSelect()\n      gs.SubObjectSelect = False\n      gs.[Get]()\n      If gs.CommandResult() <> Result.Success Then\n        Return gs.CommandResult()\n      End If\n      Dim brep = gs.[Object](0).Brep()\n      If brep Is Nothing Then\n        Return Result.Failure\n      End If\n\n      ' brep on which to project\n      ' some random points to project\n      ' project on Y axis\n      Dim points = Intersection.ProjectPointsToBreps(New List(Of Brep)() From { _\n        brep _\n      }, New List(Of Point3d)() From { _\n        New Point3d(0, 0, 0), _\n        New Point3d(3, 0, 3), _\n        New Point3d(-2, 0, -2) _\n      }, New Vector3d(0, 1, 0), doc.ModelAbsoluteTolerance)\n\n      If points IsNot Nothing AndAlso points.Length > 0 Then\n        For Each point As Point3d In points\n          doc.Objects.AddPoint(point)\n        Next\n      End If\n      doc.Views.Redraw()\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Geometry.Intersect.Intersection", "static Point3d[] ProjectPointsToBreps(IEnumerable<Brep> breps, IEnumerable<Point3d> points, Vector3d direction, double tolerance)"]
    ]
  },
  {
    "name": "Projectpointstomeshesex.vb",
    "code": "Imports System.Collections.Generic\nImports Rhino\nImports Rhino.Commands\nImports Rhino.Geometry\nImports Rhino.Geometry.Intersect\nImports Rhino.Input\nImports Rhino.DocObjects\n\nNamespace examples_vb\n  Public Class ProjectPointsToMeshesExCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbProjectPointsToMeshesEx\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim obj_ref As ObjRef\n      Dim rc = RhinoGet.GetOneObject(\"mesh\", False, ObjectType.Mesh, obj_ref)\n      If rc <> Result.Success Then\n        Return rc\n      End If\n      Dim mesh = obj_ref.Mesh()\n\n      Dim obj_ref_pts As ObjRef()\n      rc = RhinoGet.GetMultipleObjects(\"points\", False, ObjectType.Point, obj_ref_pts)\n      If rc <> Result.Success Then\n        Return rc\n      End If\n      Dim points As New List(Of Point3d)()\n      For Each obj_ref_pt As ObjRef In obj_ref_pts\n        Dim pt = obj_ref_pt.Point().Location\n        points.Add(pt)\n      Next\n\n      Dim indices As Integer()\n      Dim prj_points = Intersection.ProjectPointsToMeshesEx(New Mesh() {mesh}, points, New Vector3d(0, 1, 0), 0, indices)\n      For Each prj_pt As Point3d In prj_points\n        doc.Objects.AddPoint(prj_pt)\n      Next\n      doc.Views.Redraw()\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace\n\n",
    "members": [
      ["Rhino.Geometry.Intersect.Intersection", "static Point3d[] ProjectPointsToMeshesEx(IEnumerable<Mesh> meshes, IEnumerable<Point3d> points, Vector3d direction, double tolerance, out int[] indices)"]
    ]
  },
  {
    "name": "Renameblock.vb",
    "code": "Imports Rhino\nImports Rhino.Commands\n\nNamespace examples_vb\n  Public Class RenameBlockCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbRenameInstanceDefinition\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      ' Get the name of the insance definition to rename\n      Dim instanceDefinitionName As String = \"\"\n      Dim rc = Rhino.Input.RhinoGet.GetString(\"Name of block to rename\", True, instanceDefinitionName)\n      If rc <> Result.Success Then\n        Return rc\n      End If\n      If [String].IsNullOrWhiteSpace(instanceDefinitionName) Then\n        Return Result.[Nothing]\n      End If\n\n      ' Verify instance definition exists\n      Dim instanceDefinition = doc.InstanceDefinitions.Find(instanceDefinitionName, True)\n      If instanceDefinition Is Nothing Then\n        RhinoApp.WriteLine([String].Format(\"Block \"\"{0}\"\" not found.\", instanceDefinitionName))\n        Return Result.[Nothing]\n      End If\n\n      ' Verify instance definition is rename-able\n      If instanceDefinition.IsDeleted OrElse instanceDefinition.IsReference Then\n        RhinoApp.WriteLine([String].Format(\"Unable to rename block \"\"{0}\"\".\", instanceDefinitionName))\n        Return Result.[Nothing]\n      End If\n\n      ' Get the new instance definition name\n      Dim instanceDefinitionNewName As String = \"\"\n      rc = Rhino.Input.RhinoGet.GetString(\"Name of block to rename\", True, instanceDefinitionNewName)\n      If rc <> Result.Success Then\n        Return rc\n      End If\n      If [String].IsNullOrWhiteSpace(instanceDefinitionNewName) Then\n        Return Result.[Nothing]\n      End If\n\n      ' Verify the new instance definition name is not already in use\n      Dim existingInstanceDefinition = doc.InstanceDefinitions.Find(instanceDefinitionNewName, True)\n      If existingInstanceDefinition IsNot Nothing AndAlso Not existingInstanceDefinition.IsDeleted Then\n        RhinoApp.WriteLine([String].Format(\"Block \"\"{0}\"\" already exists.\", existingInstanceDefinition))\n        Return Result.[Nothing]\n      End If\n\n      ' change the block name\n      If Not doc.InstanceDefinitions.Modify(instanceDefinition.Index, instanceDefinitionNewName, instanceDefinition.Description, True) Then\n        RhinoApp.WriteLine([String].Format(\"Could not rename {0} to {1}\", instanceDefinition.Name, instanceDefinitionNewName))\n        Return Result.Failure\n      End If\n\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.DocObjects.InstanceDefinition", "bool IsDeleted"],
      ["Rhino.DocObjects.InstanceDefinition", "bool IsReference"],
      ["Rhino.DocObjects.Tables.InstanceDefinitionTable", "bool Modify(int idefIndex, string newName, string newDescription, bool quiet)"]
    ]
  },
  {
    "name": "Replacecolordialog.vb",
    "code": "Imports Rhino\nImports Rhino.Commands\nImports Rhino.UI\nImports System.Windows.Forms\n\nNamespace examples_vb\n  Public Class ReplaceColorDialogCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbReplaceColorDialog\"\n      End Get\n    End Property\n\n    Private m_dlg As ColorDialog = Nothing\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dialogs.SetCustomColorDialog(AddressOf OnSetCustomColorDialog)\n      Return Result.Success\n    End Function\n\n    Private Sub OnSetCustomColorDialog(sender As Object, e As GetColorEventArgs)\n\n      m_dlg = New ColorDialog()\n      If m_dlg.ShowDialog(Nothing) = DialogResult.OK Then\n        Dim c = m_dlg.Color\n        e.SelectedColor = c\n      End If\n    End Sub\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.UI.Dialogs", "static void SetCustomColorDialog(EventHandler<GetColorEventArgs> handler)"]
    ]
  },
  {
    "name": "Replacehatchpattern.vb",
    "code": "Imports Rhino\nImports Rhino.DocObjects\nImports Rhino.Commands\nImports Rhino.Input\nImports Rhino.Input.Custom\n\nNamespace examples_vb\n  Public Class ReplaceHatchPatternCommand\n    Inherits Rhino.Commands.Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbReplaceHatchPattern\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim obj_refs As ObjRef() = Nothing\n      Dim rc = RhinoGet.GetMultipleObjects(\"Select hatches to replace\", False, ObjectType.Hatch, obj_refs)\n      If rc <> Result.Success OrElse obj_refs Is Nothing Then\n        Return rc\n      End If\n\n      Dim gs = New GetString()\n      gs.SetCommandPrompt(\"Name of replacement hatch pattern\")\n      gs.AcceptNothing(False)\n      gs.[Get]()\n      If gs.CommandResult() <> Result.Success Then\n        Return gs.CommandResult()\n      End If\n      Dim hatch_name = gs.StringResult()\n\n      Dim pattern_index = doc.HatchPatterns.Find(hatch_name, True)\n\n      If pattern_index < 0 Then\n        RhinoApp.WriteLine(\"The hatch pattern \"\"{0}\"\" not found  in the document.\", hatch_name)\n        Return Result.[Nothing]\n      End If\n\n      For Each obj_ref As ObjRef In obj_refs\n        Dim hatch_object = TryCast(obj_ref.[Object](), HatchObject)\n        If hatch_object.HatchGeometry.PatternIndex <> pattern_index Then\n          hatch_object.HatchGeometry.PatternIndex = pattern_index\n          hatch_object.CommitChanges()\n        End If\n      Next\n      doc.Views.Redraw()\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Geometry.Hatch", "int PatternIndex"],
      ["Rhino.DocObjects.HatchObject", "Hatch HatchGeometry"]
    ]
  },
  {
    "name": "Rhinogettransform.vb",
    "code": "Imports Rhino\nImports Rhino.DocObjects\nImports Rhino.Geometry\nImports Rhino.Commands\nImports Rhino.Input.Custom\nImports Rhino.Display\n\nNamespace examples_vb\n  Public Class GetTranslation\n    Inherits GetTransform\n    Public Overrides Function CalculateTransform(viewport As RhinoViewport, point As Point3d) As Transform\n      Dim xform = Transform.Identity\n      Dim base_point As Point3d\n      If TryGetBasePoint(base_point) Then\n        Dim v = point - base_point\n        If Not v.IsZero Then\n          xform = Transform.Translation(v)\n          If Not xform.IsValid Then\n            xform = Transform.Identity\n          End If\n        End If\n      End If\n      Return xform\n    End Function\n  End Class\n\n  Public Class RhinoGetTransformCommand\n    Inherits TransformCommand\n    Public Sub New()\n      ' simple example of handling the BeforeTransformObjects event\n      AddHandler RhinoDoc.BeforeTransformObjects, AddressOf RhinoDocOnBeforeTransformObjects\n    End Sub\n\n    Private Sub RhinoDocOnBeforeTransformObjects(sender As Object, ea As RhinoTransformObjectsEventArgs)\n      RhinoApp.WriteLine(\"Transform Objects Count: {0}\", ea.ObjectCount)\n    End Sub\n\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbGetTranslation\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim list = New Rhino.Collections.TransformObjectList()\n      Dim rc = SelectObjects(\"Select objects to move\", list)\n      If rc <> Rhino.Commands.Result.Success Then\n        Return rc\n      End If\n\n      Dim gp = New GetPoint()\n      gp.SetCommandPrompt(\"Point to move from\")\n      gp.[Get]()\n      If gp.CommandResult() <> Result.Success Then\n        Return gp.CommandResult()\n      End If\n\n\n      Dim gt = New GetTranslation()\n      gt.SetCommandPrompt(\"Point to move to\")\n      gt.SetBasePoint(gp.Point(), True)\n      gt.DrawLineFromPoint(gp.Point(), True)\n      gt.AddTransformObjects(list)\n      gt.GetXform()\n      If gt.CommandResult() <> Result.Success Then\n        Return gt.CommandResult()\n      End If\n\n      Dim xform = gt.CalculateTransform(gt.View().ActiveViewport, gt.Point())\n      TransformObjects(list, xform, False, False)\n      doc.Views.Redraw()\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace\n",
    "members": [
      ["Rhino.RhinoDoc", "static BeforeTransformObjects"]
    ]
  },
  {
    "name": "Rhinopageviewwidthheight.vb",
    "code": "Imports Rhino\nImports Rhino.Commands\nImports Rhino.Input\n\nNamespace examples_vb\n  Public Class RhinoPageViewWidthHeightCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbSetRhinoPageViewWidthAndHeight\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim width = 1189\n      Dim height = 841\n      Dim page_views = doc.Views.GetPageViews()\n      Dim page_number As Integer = If((page_views Is Nothing), 1, page_views.Length + 1)\n      Dim pageview = doc.Views.AddPageView(String.Format(\"A0_{0}\", page_number), width, height)\n\n      Dim new_width As Integer = width\n      Dim rc = RhinoGet.GetInteger(\"new width\", False, new_width)\n      If rc <> Result.Success OrElse new_width <= 0 Then\n        Return rc\n      End If\n\n      Dim new_height As Integer = height\n      rc = RhinoGet.GetInteger(\"new height\", False, new_height)\n      If rc <> Result.Success OrElse new_height <= 0 Then\n        Return rc\n      End If\n\n      pageview.PageWidth = new_width\n      pageview.PageHeight = new_height\n      doc.Views.Redraw()\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Display.RhinoPageView", "double PageHeight"],
      ["Rhino.Display.RhinoPageView", "double PageWidth"]
    ]
  },
  {
    "name": "Screencaptureview.vb",
    "code": "Imports System.Windows.Forms\nImports Rhino\nImports Rhino.Commands\n\nNamespace examples_vb\n  Public Class CaptureViewToBitmapCommand\n    Inherits Rhino.Commands.Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbCaptureViewToBitmap\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim file_name = \"\"\n\n      Dim bitmap = doc.Views.ActiveView.CaptureToBitmap(True, True, True)\n\n      ' copy bitmap to clipboard\n      Clipboard.SetImage(bitmap)\n\n      ' save bitmap to file\n      Dim save_file_dialog = New Rhino.UI.SaveFileDialog()\n      save_file_dialog.Filter = \"*.bmp\"\n      save_file_dialog.InitialDirectory =\n        Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)\n\n      If save_file_dialog.ShowDialog() = DialogResult.OK Then\n        file_name = save_file_dialog.FileName\n      End If\n\n      If file_name <> \"\" Then\n        bitmap.Save(file_name)\n      End If\n\n      Return Rhino.Commands.Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Display.RhinoView", "System.Drawing.Bitmap CaptureToBitmap(bool grid, bool worldAxes, bool cplaneAxes)"],
      ["Rhino.UI.SaveFileDialog", "SaveFileDialog()"],
      ["Rhino.UI.SaveFileDialog", "string FileName"],
      ["Rhino.UI.SaveFileDialog", "string Filter"],
      ["Rhino.UI.SaveFileDialog", "string InitialDirectory"],
      ["Rhino.UI.SaveFileDialog", "bool ShowSaveDialog()"]
    ]
  },
  {
    "name": "Sellayer.vb",
    "code": "Partial Class Examples\n  Public Shared Function SelLayer(ByVal doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    Dim rc As Rhino.Commands.Result\n    ' Prompt for a layer name\n    Dim layername As String = doc.Layers.CurrentLayer.Name\n    rc = Rhino.Input.RhinoGet.GetString(\"Name of layer to select objects\", True, layername)\n    If rc <> Rhino.Commands.Result.Success Then Return rc\n\n    ' Get all of the objects on the layer. If layername is bogus, you will\n    ' just get an empty list back\n    Dim rhobjs As Rhino.DocObjects.RhinoObject() = doc.Objects.FindByLayer(layername)\n    If rhobjs Is Nothing OrElse rhobjs.Length < 1 Then\n      Return Rhino.Commands.Result.Cancel\n    End If\n\n    For i As Integer = 0 To rhobjs.Length - 1\n      rhobjs(i).Select(True)\n    Next\n    doc.Views.Redraw()\n    Return Rhino.Commands.Result.Success\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.DocObjects.Layer", "string Name"],
      ["Rhino.DocObjects.Tables.ObjectTable", "RhinoObject[] FindByLayer(string layerName)"],
      ["Rhino.DocObjects.Tables.LayerTable", "Layer CurrentLayer"]
    ]
  },
  {
    "name": "Splitbrepwithplane.vb",
    "code": "Imports Rhino\nImports Rhino.DocObjects\nImports Rhino.Commands\nImports Rhino.Input\nImports Rhino.Geometry\n\nNamespace examples_vb\n  Public Class SplitBrepsWithPlaneCommand\n    Inherits Rhino.Commands.Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbSplitBrepsWithPlane\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      'First, collect all the breps to split\n      Dim obj_refs As ObjRef() = Nothing\n      Dim rc = RhinoGet.GetMultipleObjects(\"Select breps to split\", False, ObjectType.Brep, obj_refs)\n      If rc <> Result.Success OrElse obj_refs Is Nothing Then\n        Return rc\n      End If\n\n      ' Get the final plane\n      Dim plane As Plane\n      rc = RhinoGet.GetPlane(plane)\n      If rc <> Result.Success Then\n        Return rc\n      End If\n\n      'Iterate over all object references\n      For Each obj_ref As ObjRef In obj_refs\n        Dim brep = obj_ref.Brep()\n        Dim bbox = brep.GetBoundingBox(False)\n\n        'Grow the boundingbox in all directions\n        'If the boundingbox is flat (zero volume or even zero area) \n        'then the CreateThroughBox method will fail.\n        Dim min_point = bbox.Min\n        min_point.X -= 1.0\n        min_point.Y -= 1.0\n        min_point.Z -= 1.0\n        bbox.Min = min_point\n        Dim max_point = bbox.Max\n        max_point.X += 1.0\n        max_point.Y += 1.0\n        max_point.Z += 1.0\n        bbox.Max = max_point\n\n        Dim plane_surface = PlaneSurface.CreateThroughBox(plane, bbox)\n        If plane_surface Is Nothing Then\n          'This is rare, it will most likely not happen unless either the plane or the boundingbox are invalid\n          RhinoApp.WriteLine(\"Cutting plane could not be constructed.\")\n        Else\n          Dim breps = brep.Split(plane_surface.ToBrep(), doc.ModelAbsoluteTolerance)\n          If breps Is Nothing OrElse breps.Length = 0 Then\n            RhinoApp.Write(\"Plane does not intersect brep (id:{0})\", obj_ref.ObjectId)\n            Continue For\n          End If\n          For Each brep_piece As Brep In breps\n            doc.Objects.AddBrep(brep_piece)\n          Next\n          doc.Objects.AddSurface(plane_surface)\n          doc.Objects.Delete(obj_ref, False)\n        End If\n      Next\n\n      doc.Views.Redraw()\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Geometry.PlaneSurface", "static PlaneSurface CreateThroughBox(Plane plane, BoundingBox box)"],
      ["Rhino.Input.RhinoGet", "static Result GetPlane(out Plane plane)"]
    ]
  },
  {
    "name": "Srfpt.vb",
    "code": "Imports Rhino\nImports Rhino.Geometry\nImports Rhino.Commands\n\nNamespace examples_vb\n  Public Class SurfaceFromCornersCommand\n    Inherits Rhino.Commands.Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbSurfaceFromCorners\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim surface = NurbsSurface.CreateFromCorners(\n        New Point3d(5, 0, 0),\n        New Point3d(5, 5, 5),\n        New Point3d(0, 5, 0),\n        New Point3d(0, 0, 0))\n\n      doc.Objects.AddSurface(surface)\n      doc.Views.Redraw()\n\n      Return Rhino.Commands.Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Geometry.NurbsSurface", "static NurbsSurface CreateFromCorners(Point3d corner1, Point3d corner2, Point3d corner3, Point3d corner4)"]
    ]
  },
  {
    "name": "Sweep1.vb",
    "code": "Imports Rhino.Input\nImports System.Collections.Generic\n\nPartial Class Examples\n  Public Shared Function Sweep1(doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    Dim rail_ref As Rhino.DocObjects.ObjRef = Nothing\n    Dim rc = RhinoGet.GetOneObject(\"Select rail curve\", False, Rhino.DocObjects.ObjectType.Curve, rail_ref)\n    If rc <> Rhino.Commands.Result.Success Then\n      Return rc\n    End If\n\n    Dim rail_crv = rail_ref.Curve()\n    If rail_crv Is Nothing Then\n      Return Rhino.Commands.Result.Failure\n    End If\n\n    Dim gx = New Rhino.Input.Custom.GetObject()\n    gx.SetCommandPrompt(\"Select cross section curves\")\n    gx.GeometryFilter = Rhino.DocObjects.ObjectType.Curve\n    gx.EnablePreSelect(False, True)\n    gx.GetMultiple(1, 0)\n    If gx.CommandResult() <> Rhino.Commands.Result.Success Then\n      Return gx.CommandResult()\n    End If\n\n    Dim cross_sections = New List(Of Rhino.Geometry.Curve)()\n    For i As Integer = 0 To gx.ObjectCount - 1\n      Dim crv = gx.Object(i).Curve()\n      If crv IsNot Nothing Then\n        cross_sections.Add(crv)\n      End If\n    Next\n    If cross_sections.Count < 1 Then\n      Return Rhino.Commands.Result.Failure\n    End If\n\n    Dim sweep = New Rhino.Geometry.SweepOneRail()\n    sweep.AngleToleranceRadians = doc.ModelAngleToleranceRadians\n    sweep.ClosedSweep = False\n    sweep.SweepTolerance = doc.ModelAbsoluteTolerance\n    sweep.SetToRoadlikeTop()\n    Dim breps = sweep.PerformSweep(rail_crv, cross_sections)\n    For i As Integer = 0 To breps.Length - 1\n      doc.Objects.AddBrep(breps(i))\n    Next\n    doc.Views.Redraw()\n    Return Rhino.Commands.Result.Success\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.Geometry.SweepOneRail", "SweepOneRail()"],
      ["Rhino.Geometry.SweepOneRail", "Brep[] PerformSweep(Curve rail, IEnumerable<Curve> crossSections)"]
    ]
  },
  {
    "name": "Textjustify.vb",
    "code": "Imports Rhino\nImports Rhino.Commands\nImports Rhino.Geometry\n\nNamespace examples_vb\n  Public Class TextJustifyCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbTextJustify\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim text_entity = New TextEntity()\n      text_entity.Plane = Plane.WorldXY\n      text_entity.Text = \"Hello Rhino!\"\n      text_entity.Justification = TextJustification.MiddleCenter\n      text_entity.FontIndex = doc.Fonts.FindOrCreate(\"Arial\", False, False)\n\n      doc.Objects.AddText(text_entity)\n      doc.Views.Redraw()\n\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Geometry.TextEntity", "TextEntity()"],
      ["Rhino.Geometry.TextEntity", "TextJustification Justification"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddText(Text3d text3d)"],
      ["Rhino.DocObjects.Tables.FontTable", "int FindOrCreate(string face, bool bold, bool italic)"]
    ]
  },
  {
    "name": "Tightboundingbox.vb",
    "code": "Imports Rhino\nImports Rhino.Commands\nImports System.Linq\nImports Rhino.Geometry\nImports Rhino.Input\nImports Rhino.DocObjects\nImports System.Collections.Generic\n\nNamespace examples_vb\n  Public Class TightBoundingBoxCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbTightBoundingBox\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim obj_ref As ObjRef = Nothing\n      Dim rc = RhinoGet.GetOneObject(\"Select surface to split\", True, ObjectType.Surface, obj_ref)\n      If rc <> Result.Success Then\n        Return rc\n      End If\n      Dim surface = obj_ref.Surface()\n      If surface Is Nothing Then\n        Return Result.Failure\n      End If\n\n      obj_ref = Nothing\n      rc = RhinoGet.GetOneObject(\"Select cutting curve\", True, ObjectType.Curve, obj_ref)\n      If rc <> Result.Success Then\n        Return rc\n      End If\n      Dim curve = obj_ref.Curve()\n      If curve Is Nothing Then\n        Return Result.Failure\n      End If\n\n      Dim brep_face = TryCast(surface, BrepFace)\n      If brep_face Is Nothing Then\n        Return Result.Failure\n      End If\n\n      Dim split_brep = brep_face.Split(New List(Of Curve)() From { _\n        curve _\n      }, doc.ModelAbsoluteTolerance)\n      If split_brep Is Nothing Then\n        RhinoApp.WriteLine(\"Unable to split surface.\")\n        Return Result.[Nothing]\n      End If\n\n      Dim meshes = Mesh.CreateFromBrep(split_brep)\n\n      For Each mesh__1 As Mesh In meshes\n        Dim bbox = mesh__1.GetBoundingBox(True)\n        Select Case bbox.IsDegenerate(doc.ModelAbsoluteTolerance)\n          Case 3, 2\n            Return Result.Failure\n            Exit Select\n          Case 1\n            ' rectangle\n            ' box with 8 corners flattened to rectangle with 4 corners\n            Dim rectangle_corners = bbox.GetCorners().Distinct().ToList()\n            ' add 1st point as last to close the loop\n            rectangle_corners.Add(rectangle_corners(0))\n            doc.Objects.AddPolyline(rectangle_corners)\n            doc.Views.Redraw()\n            Exit Select\n          Case 0\n            ' box\n            Dim brep_box = New Box(bbox).ToBrep()\n            doc.Objects.AddBrep(brep_box)\n            doc.Views.Redraw()\n            Exit Select\n        End Select\n      Next\n\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace\n",
    "members": [
      ["Rhino.Geometry.BrepFace", "Brep Split(IEnumerable<Curve> curves, double tolerance)"],
      ["Rhino.Geometry.Mesh", "static Mesh[] CreateFromBrep(Brep brep)"],
      ["Rhino.DocObjects.Tables.ObjectTable", "Guid AddPolyline(IEnumerable<Point3d> points)"]
    ]
  },
  {
    "name": "Transformbrep.vb",
    "code": "Imports Rhino.Input\n\nPartial Class Examples\n  Public Shared Function TransformBrep(doc As Rhino.RhinoDoc) As Rhino.Commands.Result\n    Dim rhobj As Rhino.DocObjects.ObjRef = Nothing\n    Dim rc = RhinoGet.GetOneObject(\"Select brep\", True, Rhino.DocObjects.ObjectType.Brep, rhobj)\n    If rc <> Rhino.Commands.Result.Success Then\n      Return rc\n    End If\n\n    ' Simple translation transformation\n    Dim xform = Rhino.Geometry.Transform.Translation(18, -18, 25)\n    doc.Objects.Transform(rhobj, xform, True)\n    doc.Views.Redraw()\n    Return Rhino.Commands.Result.Success\n  End Function\nEnd Class\n",
    "members": [
      ["Rhino.Geometry.Transform", "static Transform Translation(double dx, double dy, double dz)"]
    ]
  },
  {
    "name": "Viewportresolution.vb",
    "code": "Imports Rhino\nImports Rhino.Commands\n\nNamespace examples_vb\n  Public Class ViewportResolutionCommand\n    Inherits Command\n    Public Overrides ReadOnly Property EnglishName() As String\n      Get\n        Return \"vbViewportResolution\"\n      End Get\n    End Property\n\n    Protected Overrides Function RunCommand(doc As RhinoDoc, mode As RunMode) As Result\n      Dim activeViewport = doc.Views.ActiveView.ActiveViewport\n      RhinoApp.WriteLine([String].Format(\"Name = {0}: Width = {1}, Height = {2}\", activeViewport.Name, activeViewport.Size.Width, activeViewport.Size.Height))\n      Return Result.Success\n    End Function\n  End Class\nEnd Namespace",
    "members": [
      ["Rhino.Display.RhinoViewport", "Size Size"]
    ]
  }
]

